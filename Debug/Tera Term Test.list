
Tera Term Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015af8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  08015c98  08015c98  00025c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016800  08016800  000302f0  2**0
                  CONTENTS
  4 .ARM          00000008  08016800  08016800  00026800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016808  08016808  000302f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016808  08016808  00026808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801680c  0801680c  0002680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  08016810  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aec  200002f0  08016b00  000302f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004ddc  08016b00  00034ddc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dd36  00000000  00000000  00030363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e45  00000000  00000000  0004e099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  00052ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012e7  00000000  00000000  00054790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d088  00000000  00000000  00055a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024d9b  00000000  00000000  00072aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092ceb  00000000  00000000  0009789a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008084  00000000  00000000  0012a588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013260c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f0 	.word	0x200002f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015c80 	.word	0x08015c80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f4 	.word	0x200002f4
 80001dc:	08015c80 	.word	0x08015c80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f1 	b.w	800109c <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a6 	b.w	800109c <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460f      	mov	r7, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0xe2>
 8000dea:	fab2 f382 	clz	r3, r2
 8000dee:	b143      	cbz	r3, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	f1c3 0220 	rsb	r2, r3, #32
 8000df8:	409f      	lsls	r7, r3
 8000dfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	409c      	lsls	r4, r3
 8000e02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e06:	fa1f f58c 	uxth.w	r5, ip
 8000e0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e0e:	0c22      	lsrs	r2, r4, #16
 8000e10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e18:	fb01 f005 	mul.w	r0, r1, r5
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e28:	f080 811c 	bcs.w	8001064 <__udivmoddi4+0x290>
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f240 8119 	bls.w	8001064 <__udivmoddi4+0x290>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4462      	add	r2, ip
 8000e36:	1a12      	subs	r2, r2, r0
 8000e38:	b2a4      	uxth	r4, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e46:	fb00 f505 	mul.w	r5, r0, r5
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d90a      	bls.n	8000e64 <__udivmoddi4+0x90>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e56:	f080 8107 	bcs.w	8001068 <__udivmoddi4+0x294>
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	f240 8104 	bls.w	8001068 <__udivmoddi4+0x294>
 8000e60:	4464      	add	r4, ip
 8000e62:	3802      	subs	r0, #2
 8000e64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11e      	cbz	r6, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40dc      	lsrs	r4, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	e9c6 4300 	strd	r4, r3, [r6]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0xbc>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	f000 80ed 	beq.w	800105e <__udivmoddi4+0x28a>
 8000e84:	2100      	movs	r1, #0
 8000e86:	e9c6 0500 	strd	r0, r5, [r6]
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	fab3 f183 	clz	r1, r3
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d149      	bne.n	8000f2c <__udivmoddi4+0x158>
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	d302      	bcc.n	8000ea2 <__udivmoddi4+0xce>
 8000e9c:	4282      	cmp	r2, r0
 8000e9e:	f200 80f8 	bhi.w	8001092 <__udivmoddi4+0x2be>
 8000ea2:	1a84      	subs	r4, r0, r2
 8000ea4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4617      	mov	r7, r2
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d0e2      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000eb4:	e7df      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb6:	b902      	cbnz	r2, 8000eba <__udivmoddi4+0xe6>
 8000eb8:	deff      	udf	#255	; 0xff
 8000eba:	fab2 f382 	clz	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8090 	bne.w	8000fe4 <__udivmoddi4+0x210>
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eca:	fa1f fe8c 	uxth.w	lr, ip
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ed4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ed8:	0c22      	lsrs	r2, r4, #16
 8000eda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ede:	fb0e f005 	mul.w	r0, lr, r5
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x124>
 8000ee6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x122>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f200 80cb 	bhi.w	800108c <__udivmoddi4+0x2b8>
 8000ef6:	4645      	mov	r5, r8
 8000ef8:	1a12      	subs	r2, r2, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f00:	fb07 2210 	mls	r2, r7, r0, r2
 8000f04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f08:	fb0e fe00 	mul.w	lr, lr, r0
 8000f0c:	45a6      	cmp	lr, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x14e>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x14c>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f200 80bb 	bhi.w	8001096 <__udivmoddi4+0x2c2>
 8000f20:	4610      	mov	r0, r2
 8000f22:	eba4 040e 	sub.w	r4, r4, lr
 8000f26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f2a:	e79f      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f2c:	f1c1 0720 	rsb	r7, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f42:	40fd      	lsrs	r5, r7
 8000f44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f48:	4323      	orrs	r3, r4
 8000f4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f4e:	fa1f fe8c 	uxth.w	lr, ip
 8000f52:	fb09 5518 	mls	r5, r9, r8, r5
 8000f56:	0c1c      	lsrs	r4, r3, #16
 8000f58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	fa02 f201 	lsl.w	r2, r2, r1
 8000f66:	fa00 f001 	lsl.w	r0, r0, r1
 8000f6a:	d90b      	bls.n	8000f84 <__udivmoddi4+0x1b0>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f74:	f080 8088 	bcs.w	8001088 <__udivmoddi4+0x2b4>
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	f240 8085 	bls.w	8001088 <__udivmoddi4+0x2b4>
 8000f7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f82:	4464      	add	r4, ip
 8000f84:	1b64      	subs	r4, r4, r5
 8000f86:	b29d      	uxth	r5, r3
 8000f88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x1da>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fa4:	d26c      	bcs.n	8001080 <__udivmoddi4+0x2ac>
 8000fa6:	45a6      	cmp	lr, r4
 8000fa8:	d96a      	bls.n	8001080 <__udivmoddi4+0x2ac>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fb6:	eba4 040e 	sub.w	r4, r4, lr
 8000fba:	42ac      	cmp	r4, r5
 8000fbc:	46c8      	mov	r8, r9
 8000fbe:	46ae      	mov	lr, r5
 8000fc0:	d356      	bcc.n	8001070 <__udivmoddi4+0x29c>
 8000fc2:	d053      	beq.n	800106c <__udivmoddi4+0x298>
 8000fc4:	b156      	cbz	r6, 8000fdc <__udivmoddi4+0x208>
 8000fc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fca:	eb64 040e 	sbc.w	r4, r4, lr
 8000fce:	fa04 f707 	lsl.w	r7, r4, r7
 8000fd2:	40ca      	lsrs	r2, r1
 8000fd4:	40cc      	lsrs	r4, r1
 8000fd6:	4317      	orrs	r7, r2
 8000fd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe4:	f1c3 0120 	rsb	r1, r3, #32
 8000fe8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ff0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ff4:	409d      	lsls	r5, r3
 8000ff6:	432a      	orrs	r2, r5
 8000ff8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ffc:	fa1f fe8c 	uxth.w	lr, ip
 8001000:	fbb1 f0f7 	udiv	r0, r1, r7
 8001004:	fb07 1510 	mls	r5, r7, r0, r1
 8001008:	0c11      	lsrs	r1, r2, #16
 800100a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800100e:	fb00 f50e 	mul.w	r5, r0, lr
 8001012:	428d      	cmp	r5, r1
 8001014:	fa04 f403 	lsl.w	r4, r4, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x258>
 800101a:	eb1c 0101 	adds.w	r1, ip, r1
 800101e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001022:	d22f      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001024:	428d      	cmp	r5, r1
 8001026:	d92d      	bls.n	8001084 <__udivmoddi4+0x2b0>
 8001028:	3802      	subs	r0, #2
 800102a:	4461      	add	r1, ip
 800102c:	1b49      	subs	r1, r1, r5
 800102e:	b292      	uxth	r2, r2
 8001030:	fbb1 f5f7 	udiv	r5, r1, r7
 8001034:	fb07 1115 	mls	r1, r7, r5, r1
 8001038:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800103c:	fb05 f10e 	mul.w	r1, r5, lr
 8001040:	4291      	cmp	r1, r2
 8001042:	d908      	bls.n	8001056 <__udivmoddi4+0x282>
 8001044:	eb1c 0202 	adds.w	r2, ip, r2
 8001048:	f105 38ff 	add.w	r8, r5, #4294967295
 800104c:	d216      	bcs.n	800107c <__udivmoddi4+0x2a8>
 800104e:	4291      	cmp	r1, r2
 8001050:	d914      	bls.n	800107c <__udivmoddi4+0x2a8>
 8001052:	3d02      	subs	r5, #2
 8001054:	4462      	add	r2, ip
 8001056:	1a52      	subs	r2, r2, r1
 8001058:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800105c:	e738      	b.n	8000ed0 <__udivmoddi4+0xfc>
 800105e:	4631      	mov	r1, r6
 8001060:	4630      	mov	r0, r6
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xa2>
 8001064:	4639      	mov	r1, r7
 8001066:	e6e6      	b.n	8000e36 <__udivmoddi4+0x62>
 8001068:	4610      	mov	r0, r2
 800106a:	e6fb      	b.n	8000e64 <__udivmoddi4+0x90>
 800106c:	4548      	cmp	r0, r9
 800106e:	d2a9      	bcs.n	8000fc4 <__udivmoddi4+0x1f0>
 8001070:	ebb9 0802 	subs.w	r8, r9, r2
 8001074:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001078:	3b01      	subs	r3, #1
 800107a:	e7a3      	b.n	8000fc4 <__udivmoddi4+0x1f0>
 800107c:	4645      	mov	r5, r8
 800107e:	e7ea      	b.n	8001056 <__udivmoddi4+0x282>
 8001080:	462b      	mov	r3, r5
 8001082:	e794      	b.n	8000fae <__udivmoddi4+0x1da>
 8001084:	4640      	mov	r0, r8
 8001086:	e7d1      	b.n	800102c <__udivmoddi4+0x258>
 8001088:	46d0      	mov	r8, sl
 800108a:	e77b      	b.n	8000f84 <__udivmoddi4+0x1b0>
 800108c:	3d02      	subs	r5, #2
 800108e:	4462      	add	r2, ip
 8001090:	e732      	b.n	8000ef8 <__udivmoddi4+0x124>
 8001092:	4608      	mov	r0, r1
 8001094:	e70a      	b.n	8000eac <__udivmoddi4+0xd8>
 8001096:	4464      	add	r4, ip
 8001098:	3802      	subs	r0, #2
 800109a:	e742      	b.n	8000f22 <__udivmoddi4+0x14e>

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2203      	movs	r2, #3
 80010ac:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2203      	movs	r2, #3
 80010b8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2203      	movs	r2, #3
 80010c4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	715a      	strb	r2, [r3, #5]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af04      	add	r7, sp, #16
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	8af9      	ldrh	r1, [r7, #22]
 80010f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2302      	movs	r3, #2
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	f003 fcfb 	bl	8004b04 <HAL_I2C_Mem_Read>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10b      	bne.n	800112c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001114:	7d7b      	ldrb	r3, [r7, #21]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	7d3b      	ldrb	r3, [r7, #20]
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b21b      	sxth	r3, r3
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	801a      	strh	r2, [r3, #0]
		return true;
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <read_register16+0x56>
	} else
		return false;
 800112c:	2300      	movs	r3, #0

}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001136:	b590      	push	{r4, r7, lr}
 8001138:	b08b      	sub	sp, #44	; 0x2c
 800113a:	af04      	add	r7, sp, #16
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	461a      	mov	r2, r3
 8001142:	460b      	mov	r3, r1
 8001144:	72fb      	strb	r3, [r7, #11]
 8001146:	4613      	mov	r3, r2
 8001148:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	b29a      	uxth	r2, r3
 800115a:	7abb      	ldrb	r3, [r7, #10]
 800115c:	b29b      	uxth	r3, r3
 800115e:	8af9      	ldrh	r1, [r7, #22]
 8001160:	f241 3488 	movw	r4, #5000	; 0x1388
 8001164:	9402      	str	r4, [sp, #8]
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	f003 fcc9 	bl	8004b04 <HAL_I2C_Mem_Read>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <read_data+0x46>
		return 0;
 8001178:	2300      	movs	r3, #0
 800117a:	e000      	b.n	800117e <read_data+0x48>
	else
		return 1;
 800117c:	2301      	movs	r3, #1

}
 800117e:	4618      	mov	r0, r3
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}

08001186 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	461a      	mov	r2, r3
 8001192:	2188      	movs	r1, #136	; 0x88
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff9f 	bl	80010d8 <read_register16>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d06f      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3302      	adds	r3, #2
 80011a4:	461a      	mov	r2, r3
 80011a6:	218a      	movs	r1, #138	; 0x8a
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff95 	bl	80010d8 <read_register16>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d065      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3304      	adds	r3, #4
 80011b8:	461a      	mov	r2, r3
 80011ba:	218c      	movs	r1, #140	; 0x8c
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff8b 	bl	80010d8 <read_register16>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d05b      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3306      	adds	r3, #6
 80011cc:	461a      	mov	r2, r3
 80011ce:	218e      	movs	r1, #142	; 0x8e
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff81 	bl	80010d8 <read_register16>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d051      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3308      	adds	r3, #8
 80011e0:	461a      	mov	r2, r3
 80011e2:	2190      	movs	r1, #144	; 0x90
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff77 	bl	80010d8 <read_register16>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d047      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	330a      	adds	r3, #10
 80011f4:	461a      	mov	r2, r3
 80011f6:	2192      	movs	r1, #146	; 0x92
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff6d 	bl	80010d8 <read_register16>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d03d      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	330c      	adds	r3, #12
 8001208:	461a      	mov	r2, r3
 800120a:	2194      	movs	r1, #148	; 0x94
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff63 	bl	80010d8 <read_register16>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d033      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	330e      	adds	r3, #14
 800121c:	461a      	mov	r2, r3
 800121e:	2196      	movs	r1, #150	; 0x96
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff59 	bl	80010d8 <read_register16>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d029      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3310      	adds	r3, #16
 8001230:	461a      	mov	r2, r3
 8001232:	2198      	movs	r1, #152	; 0x98
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff4f 	bl	80010d8 <read_register16>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d01f      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3312      	adds	r3, #18
 8001244:	461a      	mov	r2, r3
 8001246:	219a      	movs	r1, #154	; 0x9a
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff45 	bl	80010d8 <read_register16>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d015      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3314      	adds	r3, #20
 8001258:	461a      	mov	r2, r3
 800125a:	219c      	movs	r1, #156	; 0x9c
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff3b 	bl	80010d8 <read_register16>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00b      	beq.n	8001280 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800126c:	461a      	mov	r2, r3
 800126e:	219e      	movs	r1, #158	; 0x9e
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff31 	bl	80010d8 <read_register16>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <read_calibration_data+0xfa>

		return true;
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <read_calibration_data+0xfc>
	}

	return false;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f103 0218 	add.w	r2, r3, #24
 8001298:	2301      	movs	r3, #1
 800129a:	21a1      	movs	r1, #161	; 0xa1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff4a 	bl	8001136 <read_data>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d14b      	bne.n	8001340 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	331a      	adds	r3, #26
 80012ac:	461a      	mov	r2, r3
 80012ae:	21e1      	movs	r1, #225	; 0xe1
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff11 	bl	80010d8 <read_register16>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d041      	beq.n	8001340 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f103 021c 	add.w	r2, r3, #28
 80012c2:	2301      	movs	r3, #1
 80012c4:	21e3      	movs	r1, #227	; 0xe3
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff35 	bl	8001136 <read_data>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d136      	bne.n	8001340 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80012d2:	f107 030e 	add.w	r3, r7, #14
 80012d6:	461a      	mov	r2, r3
 80012d8:	21e4      	movs	r1, #228	; 0xe4
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fefc 	bl	80010d8 <read_register16>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d02c      	beq.n	8001340 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	461a      	mov	r2, r3
 80012ec:	21e5      	movs	r1, #229	; 0xe5
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fef2 	bl	80010d8 <read_register16>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d022      	beq.n	8001340 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001300:	2301      	movs	r3, #1
 8001302:	21e7      	movs	r1, #231	; 0xe7
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff16 	bl	8001136 <read_data>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d117      	bne.n	8001340 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	b21b      	sxth	r3, r3
 8001316:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800131a:	b21a      	sxth	r2, r3
 800131c:	89fb      	ldrh	r3, [r7, #14]
 800131e:	121b      	asrs	r3, r3, #8
 8001320:	b21b      	sxth	r3, r3
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21a      	sxth	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	b29b      	uxth	r3, r3
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	841a      	strh	r2, [r3, #32]

		return true;
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800134a:	b580      	push	{r7, lr}
 800134c:	b088      	sub	sp, #32
 800134e:	af04      	add	r7, sp, #16
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	70fb      	strb	r3, [r7, #3]
 8001356:	4613      	mov	r3, r2
 8001358:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	b29a      	uxth	r2, r3
 800136a:	89f9      	ldrh	r1, [r7, #14]
 800136c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	1cbb      	adds	r3, r7, #2
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	f003 fac8 	bl	8004910 <HAL_I2C_Mem_Write>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <write_register8+0x40>
		return false;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <write_register8+0x42>
	else
		return true;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013a2:	2b76      	cmp	r3, #118	; 0x76
 80013a4:	d005      	beq.n	80013b2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013aa:	2b77      	cmp	r3, #119	; 0x77
 80013ac:	d001      	beq.n	80013b2 <bmp280_init+0x1e>

		return false;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e099      	b.n	80014e6 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013b8:	2301      	movs	r3, #1
 80013ba:	21d0      	movs	r1, #208	; 0xd0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff feba 	bl	8001136 <read_data>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <bmp280_init+0x38>
		return false;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e08c      	b.n	80014e6 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013d2:	2b58      	cmp	r3, #88	; 0x58
 80013d4:	d006      	beq.n	80013e4 <bmp280_init+0x50>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013dc:	2b60      	cmp	r3, #96	; 0x60
 80013de:	d001      	beq.n	80013e4 <bmp280_init+0x50>

		return false;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e080      	b.n	80014e6 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80013e4:	22b6      	movs	r2, #182	; 0xb6
 80013e6:	21e0      	movs	r1, #224	; 0xe0
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffae 	bl	800134a <write_register8>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <bmp280_init+0x64>
		return false;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e076      	b.n	80014e6 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80013f8:	f107 020c 	add.w	r2, r7, #12
 80013fc:	2301      	movs	r3, #1
 80013fe:	21f3      	movs	r1, #243	; 0xf3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff fe98 	bl	8001136 <read_data>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f5      	bne.n	80013f8 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800140c:	7b3b      	ldrb	r3, [r7, #12]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff feb5 	bl	8001186 <read_calibration_data>
 800141c:	4603      	mov	r3, r0
 800141e:	f083 0301 	eor.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d100      	bne.n	800142a <bmp280_init+0x96>
 8001428:	e001      	b.n	800142e <bmp280_init+0x9a>
		return false;
 800142a:	2300      	movs	r3, #0
 800142c:	e05b      	b.n	80014e6 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001434:	2b60      	cmp	r3, #96	; 0x60
 8001436:	d10a      	bne.n	800144e <bmp280_init+0xba>
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff26 	bl	800128a <read_hum_calibration_data>
 800143e:	4603      	mov	r3, r0
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <bmp280_init+0xba>
		return false;
 800144a:	2300      	movs	r3, #0
 800144c:	e04b      	b.n	80014e6 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	795b      	ldrb	r3, [r3, #5]
 8001452:	015b      	lsls	r3, r3, #5
 8001454:	b25a      	sxtb	r2, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	b25b      	sxtb	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b25b      	sxtb	r3, r3
 8001462:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	461a      	mov	r2, r3
 8001468:	21f5      	movs	r1, #245	; 0xf5
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff6d 	bl	800134a <write_register8>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <bmp280_init+0xe6>
		return false;
 8001476:	2300      	movs	r3, #0
 8001478:	e035      	b.n	80014e6 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d102      	bne.n	8001488 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	78db      	ldrb	r3, [r3, #3]
 800148c:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800148e:	b25a      	sxtb	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	b25b      	sxtb	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b25a      	sxtb	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014a6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014ae:	2b60      	cmp	r3, #96	; 0x60
 80014b0:	d10d      	bne.n	80014ce <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	791b      	ldrb	r3, [r3, #4]
 80014b6:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	461a      	mov	r2, r3
 80014bc:	21f2      	movs	r1, #242	; 0xf2
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ff43 	bl	800134a <write_register8>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <bmp280_init+0x13a>
			return false;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e00b      	b.n	80014e6 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80014ce:	7bbb      	ldrb	r3, [r7, #14]
 80014d0:	461a      	mov	r2, r3
 80014d2:	21f4      	movs	r1, #244	; 0xf4
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff38 	bl	800134a <write_register8>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <bmp280_init+0x150>
		return false;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e000      	b.n	80014e6 <bmp280_init+0x152>
	}

	return true;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80014ee:	b480      	push	{r7}
 80014f0:	b087      	sub	sp, #28
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	10da      	asrs	r2, r3, #3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800150c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001510:	12db      	asrs	r3, r3, #11
 8001512:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	111b      	asrs	r3, r3, #4
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	8812      	ldrh	r2, [r2, #0]
 800151c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	1112      	asrs	r2, r2, #4
 8001522:	68f9      	ldr	r1, [r7, #12]
 8001524:	8809      	ldrh	r1, [r1, #0]
 8001526:	1a52      	subs	r2, r2, r1
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001534:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001538:	139b      	asrs	r3, r3, #14
 800153a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	441a      	add	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	3380      	adds	r3, #128	; 0x80
 8001552:	121b      	asrs	r3, r3, #8
}
 8001554:	4618      	mov	r0, r3
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001564:	b0cc      	sub	sp, #304	; 0x130
 8001566:	af00      	add	r7, sp, #0
 8001568:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800156c:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001570:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001578:	17da      	asrs	r2, r3, #31
 800157a:	461c      	mov	r4, r3
 800157c:	4615      	mov	r5, r2
 800157e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001582:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001586:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800158a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800158e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001592:	fb03 f102 	mul.w	r1, r3, r2
 8001596:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800159a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	18ca      	adds	r2, r1, r3
 80015a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015a8:	fba3 8903 	umull	r8, r9, r3, r3
 80015ac:	eb02 0309 	add.w	r3, r2, r9
 80015b0:	4699      	mov	r9, r3
 80015b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015b6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	17da      	asrs	r2, r3, #31
 80015be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015c2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015c6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015ca:	4603      	mov	r3, r0
 80015cc:	fb03 f209 	mul.w	r2, r3, r9
 80015d0:	460b      	mov	r3, r1
 80015d2:	fb08 f303 	mul.w	r3, r8, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	4602      	mov	r2, r0
 80015da:	fba8 1202 	umull	r1, r2, r8, r2
 80015de:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015e2:	460a      	mov	r2, r1
 80015e4:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015ec:	4413      	add	r3, r2
 80015ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015f2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015f6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80015fa:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80015fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001602:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001606:	b21b      	sxth	r3, r3
 8001608:	17da      	asrs	r2, r3, #31
 800160a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800160e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001616:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800161a:	462a      	mov	r2, r5
 800161c:	fb02 f203 	mul.w	r2, r2, r3
 8001620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001624:	4621      	mov	r1, r4
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	441a      	add	r2, r3
 800162c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001630:	4621      	mov	r1, r4
 8001632:	fba3 1301 	umull	r1, r3, r3, r1
 8001636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800163a:	460b      	mov	r3, r1
 800163c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001644:	18d3      	adds	r3, r2, r3
 8001646:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001656:	462b      	mov	r3, r5
 8001658:	0459      	lsls	r1, r3, #17
 800165a:	4623      	mov	r3, r4
 800165c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001660:	4623      	mov	r3, r4
 8001662:	0458      	lsls	r0, r3, #17
 8001664:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001668:	1814      	adds	r4, r2, r0
 800166a:	643c      	str	r4, [r7, #64]	; 0x40
 800166c:	414b      	adcs	r3, r1
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
 8001670:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001674:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800167c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001680:	b21b      	sxth	r3, r3
 8001682:	17da      	asrs	r2, r3, #31
 8001684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001688:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800168c:	f04f 0000 	mov.w	r0, #0
 8001690:	f04f 0100 	mov.w	r1, #0
 8001694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001698:	00d9      	lsls	r1, r3, #3
 800169a:	2000      	movs	r0, #0
 800169c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016a0:	1814      	adds	r4, r2, r0
 80016a2:	63bc      	str	r4, [r7, #56]	; 0x38
 80016a4:	414b      	adcs	r3, r1
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016ac:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80016b0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80016b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016b8:	fb03 f102 	mul.w	r1, r3, r2
 80016bc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80016c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	18ca      	adds	r2, r1, r3
 80016ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016ce:	fba3 1303 	umull	r1, r3, r3, r3
 80016d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016d6:	460b      	mov	r3, r1
 80016d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	17da      	asrs	r2, r3, #31
 80016f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016fa:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016fe:	462b      	mov	r3, r5
 8001700:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001704:	4642      	mov	r2, r8
 8001706:	fb02 f203 	mul.w	r2, r2, r3
 800170a:	464b      	mov	r3, r9
 800170c:	4621      	mov	r1, r4
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	4622      	mov	r2, r4
 8001716:	4641      	mov	r1, r8
 8001718:	fba2 1201 	umull	r1, r2, r2, r1
 800171c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001720:	460a      	mov	r2, r1
 8001722:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001726:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800172a:	4413      	add	r3, r2
 800172c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800173c:	4623      	mov	r3, r4
 800173e:	0a18      	lsrs	r0, r3, #8
 8001740:	462b      	mov	r3, r5
 8001742:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001746:	462b      	mov	r3, r5
 8001748:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800174a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800174e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001752:	b21b      	sxth	r3, r3
 8001754:	17da      	asrs	r2, r3, #31
 8001756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800175a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800175e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001762:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001766:	464a      	mov	r2, r9
 8001768:	fb02 f203 	mul.w	r2, r2, r3
 800176c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001770:	4644      	mov	r4, r8
 8001772:	fb04 f303 	mul.w	r3, r4, r3
 8001776:	441a      	add	r2, r3
 8001778:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800177c:	4644      	mov	r4, r8
 800177e:	fba3 4304 	umull	r4, r3, r3, r4
 8001782:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001786:	4623      	mov	r3, r4
 8001788:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800178c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001790:	18d3      	adds	r3, r2, r3
 8001792:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017a2:	464c      	mov	r4, r9
 80017a4:	0323      	lsls	r3, r4, #12
 80017a6:	4644      	mov	r4, r8
 80017a8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017ac:	4644      	mov	r4, r8
 80017ae:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017b0:	1884      	adds	r4, r0, r2
 80017b2:	633c      	str	r4, [r7, #48]	; 0x30
 80017b4:	eb41 0303 	adc.w	r3, r1, r3
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ba:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017be:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80017c2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80017c6:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017ca:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017d6:	88db      	ldrh	r3, [r3, #6]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2200      	movs	r2, #0
 80017dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017e4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017e8:	462b      	mov	r3, r5
 80017ea:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017ee:	4642      	mov	r2, r8
 80017f0:	fb02 f203 	mul.w	r2, r2, r3
 80017f4:	464b      	mov	r3, r9
 80017f6:	4621      	mov	r1, r4
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	4622      	mov	r2, r4
 8001800:	4641      	mov	r1, r8
 8001802:	fba2 1201 	umull	r1, r2, r2, r1
 8001806:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800180a:	460a      	mov	r2, r1
 800180c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001810:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001814:	4413      	add	r3, r2
 8001816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001826:	4629      	mov	r1, r5
 8001828:	104a      	asrs	r2, r1, #1
 800182a:	4629      	mov	r1, r5
 800182c:	17cb      	asrs	r3, r1, #31
 800182e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001832:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001836:	4313      	orrs	r3, r2
 8001838:	d101      	bne.n	800183e <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 800183a:	2300      	movs	r3, #0
 800183c:	e148      	b.n	8001ad0 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800183e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001842:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001846:	17da      	asrs	r2, r3, #31
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
 800184a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800184c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001850:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001854:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001858:	105b      	asrs	r3, r3, #1
 800185a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800185e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001862:	07db      	lsls	r3, r3, #31
 8001864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001868:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800186c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001870:	4621      	mov	r1, r4
 8001872:	1a89      	subs	r1, r1, r2
 8001874:	67b9      	str	r1, [r7, #120]	; 0x78
 8001876:	4629      	mov	r1, r5
 8001878:	eb61 0303 	sbc.w	r3, r1, r3
 800187c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800187e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001882:	4622      	mov	r2, r4
 8001884:	462b      	mov	r3, r5
 8001886:	1891      	adds	r1, r2, r2
 8001888:	6239      	str	r1, [r7, #32]
 800188a:	415b      	adcs	r3, r3
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
 800188e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001892:	4621      	mov	r1, r4
 8001894:	1851      	adds	r1, r2, r1
 8001896:	61b9      	str	r1, [r7, #24]
 8001898:	4629      	mov	r1, r5
 800189a:	414b      	adcs	r3, r1
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018aa:	4649      	mov	r1, r9
 80018ac:	018b      	lsls	r3, r1, #6
 80018ae:	4641      	mov	r1, r8
 80018b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b4:	4641      	mov	r1, r8
 80018b6:	018a      	lsls	r2, r1, #6
 80018b8:	4641      	mov	r1, r8
 80018ba:	1889      	adds	r1, r1, r2
 80018bc:	6139      	str	r1, [r7, #16]
 80018be:	4649      	mov	r1, r9
 80018c0:	eb43 0101 	adc.w	r1, r3, r1
 80018c4:	6179      	str	r1, [r7, #20]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018d2:	4649      	mov	r1, r9
 80018d4:	008b      	lsls	r3, r1, #2
 80018d6:	4641      	mov	r1, r8
 80018d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018dc:	4641      	mov	r1, r8
 80018de:	008a      	lsls	r2, r1, #2
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	4603      	mov	r3, r0
 80018e6:	4622      	mov	r2, r4
 80018e8:	189b      	adds	r3, r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	460b      	mov	r3, r1
 80018ee:	462a      	mov	r2, r5
 80018f0:	eb42 0303 	adc.w	r3, r2, r3
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001902:	4649      	mov	r1, r9
 8001904:	008b      	lsls	r3, r1, #2
 8001906:	4641      	mov	r1, r8
 8001908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800190c:	4641      	mov	r1, r8
 800190e:	008a      	lsls	r2, r1, #2
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	4603      	mov	r3, r0
 8001916:	4622      	mov	r2, r4
 8001918:	189b      	adds	r3, r3, r2
 800191a:	673b      	str	r3, [r7, #112]	; 0x70
 800191c:	462b      	mov	r3, r5
 800191e:	460a      	mov	r2, r1
 8001920:	eb42 0303 	adc.w	r3, r2, r3
 8001924:	677b      	str	r3, [r7, #116]	; 0x74
 8001926:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800192a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800192e:	f7ff f9b3 	bl	8000c98 <__aeabi_ldivmod>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800193a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800193e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001942:	b21b      	sxth	r3, r3
 8001944:	17da      	asrs	r2, r3, #31
 8001946:	66bb      	str	r3, [r7, #104]	; 0x68
 8001948:	66fa      	str	r2, [r7, #108]	; 0x6c
 800194a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0b50      	lsrs	r0, r2, #13
 8001958:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800195c:	1359      	asrs	r1, r3, #13
 800195e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001962:	462b      	mov	r3, r5
 8001964:	fb00 f203 	mul.w	r2, r0, r3
 8001968:	4623      	mov	r3, r4
 800196a:	fb03 f301 	mul.w	r3, r3, r1
 800196e:	4413      	add	r3, r2
 8001970:	4622      	mov	r2, r4
 8001972:	fba2 1200 	umull	r1, r2, r2, r0
 8001976:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800197a:	460a      	mov	r2, r1
 800197c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001980:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001984:	4413      	add	r3, r2
 8001986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800198a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800198e:	f04f 0000 	mov.w	r0, #0
 8001992:	f04f 0100 	mov.w	r1, #0
 8001996:	0b50      	lsrs	r0, r2, #13
 8001998:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800199c:	1359      	asrs	r1, r3, #13
 800199e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019a2:	462b      	mov	r3, r5
 80019a4:	fb00 f203 	mul.w	r2, r0, r3
 80019a8:	4623      	mov	r3, r4
 80019aa:	fb03 f301 	mul.w	r3, r3, r1
 80019ae:	4413      	add	r3, r2
 80019b0:	4622      	mov	r2, r4
 80019b2:	fba2 1200 	umull	r1, r2, r2, r0
 80019b6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019ba:	460a      	mov	r2, r1
 80019bc:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019c4:	4413      	add	r3, r2
 80019c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019d6:	4621      	mov	r1, r4
 80019d8:	0e4a      	lsrs	r2, r1, #25
 80019da:	4629      	mov	r1, r5
 80019dc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019e0:	4629      	mov	r1, r5
 80019e2:	164b      	asrs	r3, r1, #25
 80019e4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80019e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019ec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	17da      	asrs	r2, r3, #31
 80019f4:	663b      	str	r3, [r7, #96]	; 0x60
 80019f6:	667a      	str	r2, [r7, #100]	; 0x64
 80019f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80019fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a00:	462a      	mov	r2, r5
 8001a02:	fb02 f203 	mul.w	r2, r2, r3
 8001a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a16:	4621      	mov	r1, r4
 8001a18:	fba2 1201 	umull	r1, r2, r2, r1
 8001a1c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a20:	460a      	mov	r2, r1
 8001a22:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a26:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	0cca      	lsrs	r2, r1, #19
 8001a40:	4629      	mov	r1, r5
 8001a42:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a46:	4629      	mov	r1, r5
 8001a48:	14cb      	asrs	r3, r1, #19
 8001a4a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001a4e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001a52:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001a56:	1884      	adds	r4, r0, r2
 8001a58:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a5a:	eb41 0303 	adc.w	r3, r1, r3
 8001a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a60:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a64:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a68:	4621      	mov	r1, r4
 8001a6a:	1889      	adds	r1, r1, r2
 8001a6c:	6539      	str	r1, [r7, #80]	; 0x50
 8001a6e:	4629      	mov	r1, r5
 8001a70:	eb43 0101 	adc.w	r1, r3, r1
 8001a74:	6579      	str	r1, [r7, #84]	; 0x54
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a82:	4623      	mov	r3, r4
 8001a84:	0a18      	lsrs	r0, r3, #8
 8001a86:	462b      	mov	r3, r5
 8001a88:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a8c:	462b      	mov	r3, r5
 8001a8e:	1219      	asrs	r1, r3, #8
 8001a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a94:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	17da      	asrs	r2, r3, #31
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aac:	464c      	mov	r4, r9
 8001aae:	0123      	lsls	r3, r4, #4
 8001ab0:	4644      	mov	r4, r8
 8001ab2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	0122      	lsls	r2, r4, #4
 8001aba:	1884      	adds	r4, r0, r2
 8001abc:	603c      	str	r4, [r7, #0]
 8001abe:	eb41 0303 	adc.w	r3, r1, r3
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ac8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001acc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001adc <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001aee:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	039a      	lsls	r2, r3, #14
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001afa:	051b      	lsls	r3, r3, #20
 8001afc:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b04:	4619      	mov	r1, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b12:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	fb01 f202 	mul.w	r2, r1, r2
 8001b22:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	7f09      	ldrb	r1, [r1, #28]
 8001b28:	4608      	mov	r0, r1
 8001b2a:	6979      	ldr	r1, [r7, #20]
 8001b2c:	fb00 f101 	mul.w	r1, r0, r1
 8001b30:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b32:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b36:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b3a:	1292      	asrs	r2, r2, #10
 8001b3c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001b46:	fb01 f202 	mul.w	r2, r1, r2
 8001b4a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b4e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	13db      	asrs	r3, r3, #15
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	13d2      	asrs	r2, r2, #15
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	7e12      	ldrb	r2, [r2, #24]
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b7a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b82:	bfa8      	it	ge
 8001b84:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b88:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	131b      	asrs	r3, r3, #12
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b08c      	sub	sp, #48	; 0x30
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001bae:	2b60      	cmp	r3, #96	; 0x60
 8001bb0:	d007      	beq.n	8001bc2 <bmp280_read_fixed+0x28>
		if (humidity)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <bmp280_read_fixed+0x32>
 8001bc8:	2308      	movs	r3, #8
 8001bca:	e000      	b.n	8001bce <bmp280_read_fixed+0x34>
 8001bcc:	2306      	movs	r3, #6
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f107 0218 	add.w	r2, r7, #24
 8001bd8:	21f7      	movs	r1, #247	; 0xf7
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f7ff faab 	bl	8001136 <read_data>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <bmp280_read_fixed+0x50>
		return false;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e038      	b.n	8001c5c <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001bea:	7e3b      	ldrb	r3, [r7, #24]
 8001bec:	031a      	lsls	r2, r3, #12
 8001bee:	7e7b      	ldrb	r3, [r7, #25]
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	7eba      	ldrb	r2, [r7, #26]
 8001bf6:	0912      	lsrs	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001bfe:	7efb      	ldrb	r3, [r7, #27]
 8001c00:	031a      	lsls	r2, r3, #12
 8001c02:	7f3b      	ldrb	r3, [r7, #28]
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	4313      	orrs	r3, r2
 8001c08:	7f7a      	ldrb	r2, [r7, #29]
 8001c0a:	0912      	lsrs	r2, r2, #4
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	461a      	mov	r2, r3
 8001c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff fc67 	bl	80014ee <compensate_temperature>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7ff fc97 	bl	8001560 <compensate_pressure>
 8001c32:	4602      	mov	r2, r0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001c3e:	7fbb      	ldrb	r3, [r7, #30]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	7ffa      	ldrb	r2, [r7, #31]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff ff44 	bl	8001adc <compensate_humidity>
 8001c54:	4602      	mov	r2, r0
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3730      	adds	r7, #48	; 0x30
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <bmp280_read_float+0x1a>
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	e000      	b.n	8001c80 <bmp280_read_float+0x1c>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f107 0218 	add.w	r2, r7, #24
 8001c84:	f107 011c 	add.w	r1, r7, #28
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff ff86 	bl	8001b9a <bmp280_read_fixed>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d028      	beq.n	8001ce6 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c9e:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001cf0 <bmp280_read_float+0x8c>
 8001ca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cb6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001cf4 <bmp280_read_float+0x90>
 8001cba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cd4:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001cf8 <bmp280_read_float+0x94>
 8001cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <bmp280_read_float+0x84>
	}

	return false;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	42c80000 	.word	0x42c80000
 8001cf4:	43800000 	.word	0x43800000
 8001cf8:	44800000 	.word	0x44800000

08001cfc <Bmp_Init>:
 *      Author: 123ke
 */
#include "bmp_sensor.h"

uint8_t sensor_Data[256];
void Bmp_Init(I2C_HandleTypeDef *hi2c1, BMP280_HandleTypedef *bmp280) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	bmp280_init_default_params(&bmp280->params);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	332c      	adds	r3, #44	; 0x2c
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f9c8 	bl	80010a0 <bmp280_init_default_params>
	bmp280->addr = BMP280_I2C_ADDRESS_0;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2276      	movs	r2, #118	; 0x76
 8001d14:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280->i2c = hi2c1;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
	if (!bmp280_init(bmp280, &bmp280->params)) {
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	332c      	adds	r3, #44	; 0x2c
 8001d20:	4619      	mov	r1, r3
 8001d22:	6838      	ldr	r0, [r7, #0]
 8001d24:	f7ff fb36 	bl	8001394 <bmp280_init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f083 0301 	eor.w	r3, r3, #1
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <Bmp_Init+0x40>
		cdc_Transmit("BMP280 initialization failed! \r\n");
 8001d34:	4805      	ldr	r0, [pc, #20]	; (8001d4c <Bmp_Init+0x50>)
 8001d36:	f001 f9d5 	bl	80030e4 <cdc_Transmit>
	} else {
		cdc_Transmit("BMP280 initialization successful! \r\n");
	}
}
 8001d3a:	e002      	b.n	8001d42 <Bmp_Init+0x46>
		cdc_Transmit("BMP280 initialization successful! \r\n");
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <Bmp_Init+0x54>)
 8001d3e:	f001 f9d1 	bl	80030e4 <cdc_Transmit>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	08015c98 	.word	0x08015c98
 8001d50:	08015cbc 	.word	0x08015cbc

08001d54 <Bmp_Read_Data>:

void Bmp_Read_Data(BMP280_HandleTypedef *bmp280, float *pressure, float *temperature, float *humidity) {
 8001d54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d58:	b08a      	sub	sp, #40	; 0x28
 8001d5a:	af04      	add	r7, sp, #16
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
	if (!bmp280_read_float(bmp280, temperature, pressure, humidity)) {
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7ff ff7a 	bl	8001c64 <bmp280_read_float>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <Bmp_Read_Data+0x32>
		sprintf((char *)sensor_Data, "Temperature and pressure reading failed!\r\n");
 8001d7c:	491a      	ldr	r1, [pc, #104]	; (8001de8 <Bmp_Read_Data+0x94>)
 8001d7e:	481b      	ldr	r0, [pc, #108]	; (8001dec <Bmp_Read_Data+0x98>)
 8001d80:	f00e fff0 	bl	8010d64 <siprintf>
 8001d84:	e025      	b.n	8001dd2 <Bmp_Read_Data+0x7e>
	} else {
		float altitude = 0;
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
		altitude = altitude_calc(pressure, temperature);
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f000 f832 	bl	8001df8 <altitude_calc>
 8001d94:	ed87 0a05 	vstr	s0, [r7, #20]
		sprintf((char *)sensor_Data,"Pressure: %.2f Pa, Temperature: %.2f C, Altitude: %.f ft\r\n", *pressure, *temperature, altitude);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbdb 	bl	8000558 <__aeabi_f2d>
 8001da2:	4680      	mov	r8, r0
 8001da4:	4689      	mov	r9, r1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbd4 	bl	8000558 <__aeabi_f2d>
 8001db0:	4604      	mov	r4, r0
 8001db2:	460d      	mov	r5, r1
 8001db4:	6978      	ldr	r0, [r7, #20]
 8001db6:	f7fe fbcf 	bl	8000558 <__aeabi_f2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dc2:	e9cd 4500 	strd	r4, r5, [sp]
 8001dc6:	4642      	mov	r2, r8
 8001dc8:	464b      	mov	r3, r9
 8001dca:	4909      	ldr	r1, [pc, #36]	; (8001df0 <Bmp_Read_Data+0x9c>)
 8001dcc:	4807      	ldr	r0, [pc, #28]	; (8001dec <Bmp_Read_Data+0x98>)
 8001dce:	f00e ffc9 	bl	8010d64 <siprintf>

	}
	cdc_Transmit(sensor_Data);
 8001dd2:	4806      	ldr	r0, [pc, #24]	; (8001dec <Bmp_Read_Data+0x98>)
 8001dd4:	f001 f986 	bl	80030e4 <cdc_Transmit>
	sd_write(sensor_Data);
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <Bmp_Read_Data+0x98>)
 8001dda:	f001 fa2d 	bl	8003238 <sd_write>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001de8:	08015ce4 	.word	0x08015ce4
 8001dec:	2000030c 	.word	0x2000030c
 8001df0:	08015d10 	.word	0x08015d10
 8001df4:	00000000 	.word	0x00000000

08001df8 <altitude_calc>:

float altitude_calc(float *pressure, float *temperature) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	float altitude;
	altitude = 145366.45 * (1 - pow(*pressure / 101325, 1 / 5.255));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001e78 <altitude_calc+0x80>
 8001e0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e10:	ee16 0a90 	vmov	r0, s13
 8001e14:	f7fe fba0 	bl	8000558 <__aeabi_f2d>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001e68 <altitude_calc+0x70>
 8001e20:	ec43 2b10 	vmov	d0, r2, r3
 8001e24:	f012 fff4 	bl	8014e10 <pow>
 8001e28:	ec53 2b10 	vmov	r2, r3, d0
 8001e2c:	f04f 0000 	mov.w	r0, #0
 8001e30:	4912      	ldr	r1, [pc, #72]	; (8001e7c <altitude_calc+0x84>)
 8001e32:	f7fe fa31 	bl	8000298 <__aeabi_dsub>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	a30c      	add	r3, pc, #48	; (adr r3, 8001e70 <altitude_calc+0x78>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fbe0 	bl	8000608 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe fed2 	bl	8000bf8 <__aeabi_d2f>
 8001e54:	4603      	mov	r3, r0
 8001e56:	60fb      	str	r3, [r7, #12]
	return altitude;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	ee07 3a90 	vmov	s15, r3
}
 8001e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	ccd9456c 	.word	0xccd9456c
 8001e6c:	3fc85b95 	.word	0x3fc85b95
 8001e70:	9999999a 	.word	0x9999999a
 8001e74:	4101beb3 	.word	0x4101beb3
 8001e78:	47c5e680 	.word	0x47c5e680
 8001e7c:	3ff00000 	.word	0x3ff00000

08001e80 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e8a:	4804      	ldr	r0, [pc, #16]	; (8001e9c <SELECT+0x1c>)
 8001e8c:	f002 fbc8 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f001 fd9b 	bl	80039cc <HAL_Delay>
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eaa:	4804      	ldr	r0, [pc, #16]	; (8001ebc <DESELECT+0x1c>)
 8001eac:	f002 fbb8 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f001 fd8b 	bl	80039cc <HAL_Delay>
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001eca:	bf00      	nop
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <SPI_TxByte+0x30>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d1f8      	bne.n	8001ecc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001eda:	1df9      	adds	r1, r7, #7
 8001edc:	2364      	movs	r3, #100	; 0x64
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <SPI_TxByte+0x30>)
 8001ee2:	f005 fb26 	bl	8007532 <HAL_SPI_Transmit>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200007fc 	.word	0x200007fc

08001ef4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f00:	bf00      	nop
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <SPI_TxBuffer+0x30>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d1f8      	bne.n	8001f02 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001f10:	887a      	ldrh	r2, [r7, #2]
 8001f12:	2364      	movs	r3, #100	; 0x64
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4803      	ldr	r0, [pc, #12]	; (8001f24 <SPI_TxBuffer+0x30>)
 8001f18:	f005 fb0b 	bl	8007532 <HAL_SPI_Transmit>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200007fc 	.word	0x200007fc

08001f28 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001f2e:	23ff      	movs	r3, #255	; 0xff
 8001f30:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f32:	bf00      	nop
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <SPI_RxByte+0x34>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d1f8      	bne.n	8001f34 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f42:	1dba      	adds	r2, r7, #6
 8001f44:	1df9      	adds	r1, r7, #7
 8001f46:	2364      	movs	r3, #100	; 0x64
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <SPI_RxByte+0x34>)
 8001f4e:	f005 fc33 	bl	80077b8 <HAL_SPI_TransmitReceive>

	return data;
 8001f52:	79bb      	ldrb	r3, [r7, #6]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200007fc 	.word	0x200007fc

08001f60 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001f68:	f7ff ffde 	bl	8001f28 <SPI_RxByte>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	701a      	strb	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <SD_ReadyWait+0x30>)
 8001f84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f88:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001f8a:	f7ff ffcd 	bl	8001f28 <SPI_RxByte>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	2bff      	cmp	r3, #255	; 0xff
 8001f96:	d004      	beq.n	8001fa2 <SD_ReadyWait+0x26>
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <SD_ReadyWait+0x30>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f3      	bne.n	8001f8a <SD_ReadyWait+0xe>

	return res;
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20002e66 	.word	0x20002e66

08001fb0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001fb6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001fba:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001fbc:	f7ff ff70 	bl	8001ea0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	e005      	b.n	8001fd2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001fc6:	20ff      	movs	r0, #255	; 0xff
 8001fc8:	f7ff ff7a 	bl	8001ec0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b09      	cmp	r3, #9
 8001fd6:	ddf6      	ble.n	8001fc6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001fd8:	f7ff ff52 	bl	8001e80 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001fdc:	2340      	movs	r3, #64	; 0x40
 8001fde:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001ff0:	2395      	movs	r3, #149	; 0x95
 8001ff2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	2106      	movs	r1, #6
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff7b 	bl	8001ef4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001ffe:	e002      	b.n	8002006 <SD_PowerOn+0x56>
	{
		cnt--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3b01      	subs	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8002006:	f7ff ff8f 	bl	8001f28 <SPI_RxByte>
 800200a:	4603      	mov	r3, r0
 800200c:	2b01      	cmp	r3, #1
 800200e:	d002      	beq.n	8002016 <SD_PowerOn+0x66>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f4      	bne.n	8002000 <SD_PowerOn+0x50>
	}

	DESELECT();
 8002016:	f7ff ff43 	bl	8001ea0 <DESELECT>
	SPI_TxByte(0XFF);
 800201a:	20ff      	movs	r0, #255	; 0xff
 800201c:	f7ff ff50 	bl	8001ec0 <SPI_TxByte>

	PowerFlag = 1;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <SD_PowerOn+0x80>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000040d 	.word	0x2000040d

08002034 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <SD_PowerOff+0x14>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	2000040d 	.word	0x2000040d

0800204c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <SD_CheckPower+0x14>)
 8002052:	781b      	ldrb	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	2000040d 	.word	0x2000040d

08002064 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <SD_RxDataBlock+0x5c>)
 8002070:	22c8      	movs	r2, #200	; 0xc8
 8002072:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002074:	f7ff ff58 	bl	8001f28 <SPI_RxByte>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	2bff      	cmp	r3, #255	; 0xff
 8002080:	d104      	bne.n	800208c <SD_RxDataBlock+0x28>
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <SD_RxDataBlock+0x5c>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f3      	bne.n	8002074 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2bfe      	cmp	r3, #254	; 0xfe
 8002090:	d001      	beq.n	8002096 <SD_RxDataBlock+0x32>
 8002092:	2300      	movs	r3, #0
 8002094:	e00f      	b.n	80020b6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5f 	bl	8001f60 <SPI_RxBytePtr>
	} while(len--);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	1e5a      	subs	r2, r3, #1
 80020a6:	603a      	str	r2, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f4      	bne.n	8002096 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80020ac:	f7ff ff3c 	bl	8001f28 <SPI_RxByte>
	SPI_RxByte();
 80020b0:	f7ff ff3a 	bl	8001f28 <SPI_RxByte>

	return TRUE;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20002e65 	.word	0x20002e65

080020c4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80020d4:	f7ff ff52 	bl	8001f7c <SD_ReadyWait>
 80020d8:	4603      	mov	r3, r0
 80020da:	2bff      	cmp	r3, #255	; 0xff
 80020dc:	d001      	beq.n	80020e2 <SD_TxDataBlock+0x1e>
 80020de:	2300      	movs	r3, #0
 80020e0:	e02f      	b.n	8002142 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff feeb 	bl	8001ec0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	2bfd      	cmp	r3, #253	; 0xfd
 80020ee:	d020      	beq.n	8002132 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80020f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fefd 	bl	8001ef4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80020fa:	f7ff ff15 	bl	8001f28 <SPI_RxByte>
		SPI_RxByte();
 80020fe:	f7ff ff13 	bl	8001f28 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002102:	e00b      	b.n	800211c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002104:	f7ff ff10 	bl	8001f28 <SPI_RxByte>
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	2b05      	cmp	r3, #5
 8002114:	d006      	beq.n	8002124 <SD_TxDataBlock+0x60>
			i++;
 8002116:	7bbb      	ldrb	r3, [r7, #14]
 8002118:	3301      	adds	r3, #1
 800211a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800211c:	7bbb      	ldrb	r3, [r7, #14]
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d9f0      	bls.n	8002104 <SD_TxDataBlock+0x40>
 8002122:	e000      	b.n	8002126 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002124:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8002126:	bf00      	nop
 8002128:	f7ff fefe 	bl	8001f28 <SPI_RxByte>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0fa      	beq.n	8002128 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	2b05      	cmp	r3, #5
 800213a:	d101      	bne.n	8002140 <SD_TxDataBlock+0x7c>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <SD_TxDataBlock+0x7e>

	return FALSE;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	6039      	str	r1, [r7, #0]
 8002154:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002156:	f7ff ff11 	bl	8001f7c <SD_ReadyWait>
 800215a:	4603      	mov	r3, r0
 800215c:	2bff      	cmp	r3, #255	; 0xff
 800215e:	d001      	beq.n	8002164 <SD_SendCmd+0x1a>
 8002160:	23ff      	movs	r3, #255	; 0xff
 8002162:	e042      	b.n	80021ea <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff feaa 	bl	8001ec0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	0e1b      	lsrs	r3, r3, #24
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fea4 	bl	8001ec0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fe9e 	bl	8001ec0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fe98 	bl	8001ec0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fe93 	bl	8001ec0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	d102      	bne.n	80021a6 <SD_SendCmd+0x5c>
 80021a0:	2395      	movs	r3, #149	; 0x95
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e007      	b.n	80021b6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b48      	cmp	r3, #72	; 0x48
 80021aa:	d102      	bne.n	80021b2 <SD_SendCmd+0x68>
 80021ac:	2387      	movs	r3, #135	; 0x87
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e001      	b.n	80021b6 <SD_SendCmd+0x6c>
	else crc = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fe81 	bl	8001ec0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2b4c      	cmp	r3, #76	; 0x4c
 80021c2:	d101      	bne.n	80021c8 <SD_SendCmd+0x7e>
 80021c4:	f7ff feb0 	bl	8001f28 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80021c8:	230a      	movs	r3, #10
 80021ca:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80021cc:	f7ff feac 	bl	8001f28 <SPI_RxByte>
 80021d0:	4603      	mov	r3, r0
 80021d2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80021d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da05      	bge.n	80021e8 <SD_SendCmd+0x9e>
 80021dc:	7bbb      	ldrb	r3, [r7, #14]
 80021de:	3b01      	subs	r3, #1
 80021e0:	73bb      	strb	r3, [r7, #14]
 80021e2:	7bbb      	ldrb	r3, [r7, #14]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f1      	bne.n	80021cc <SD_SendCmd+0x82>

	return res;
 80021e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <SD_disk_initialize+0x14>
 8002204:	2301      	movs	r3, #1
 8002206:	e0d6      	b.n	80023b6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002208:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <SD_disk_initialize+0x1cc>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <SD_disk_initialize+0x2a>
 8002216:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <SD_disk_initialize+0x1cc>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	e0cb      	b.n	80023b6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800221e:	f7ff fec7 	bl	8001fb0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8002222:	f7ff fe2d 	bl	8001e80 <SELECT>

	/* check disk type */
	type = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800222a:	2100      	movs	r1, #0
 800222c:	2040      	movs	r0, #64	; 0x40
 800222e:	f7ff ff8c 	bl	800214a <SD_SendCmd>
 8002232:	4603      	mov	r3, r0
 8002234:	2b01      	cmp	r3, #1
 8002236:	f040 80a6 	bne.w	8002386 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800223a:	4b62      	ldr	r3, [pc, #392]	; (80023c4 <SD_disk_initialize+0x1d0>)
 800223c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002240:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002242:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002246:	2048      	movs	r0, #72	; 0x48
 8002248:	f7ff ff7f 	bl	800214a <SD_SendCmd>
 800224c:	4603      	mov	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d158      	bne.n	8002304 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	e00c      	b.n	8002272 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002258:	7bfc      	ldrb	r4, [r7, #15]
 800225a:	f7ff fe65 	bl	8001f28 <SPI_RxByte>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	f104 0310 	add.w	r3, r4, #16
 8002266:	443b      	add	r3, r7
 8002268:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	3301      	adds	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d9ef      	bls.n	8002258 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002278:	7abb      	ldrb	r3, [r7, #10]
 800227a:	2b01      	cmp	r3, #1
 800227c:	f040 8083 	bne.w	8002386 <SD_disk_initialize+0x192>
 8002280:	7afb      	ldrb	r3, [r7, #11]
 8002282:	2baa      	cmp	r3, #170	; 0xaa
 8002284:	d17f      	bne.n	8002386 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002286:	2100      	movs	r1, #0
 8002288:	2077      	movs	r0, #119	; 0x77
 800228a:	f7ff ff5e 	bl	800214a <SD_SendCmd>
 800228e:	4603      	mov	r3, r0
 8002290:	2b01      	cmp	r3, #1
 8002292:	d807      	bhi.n	80022a4 <SD_disk_initialize+0xb0>
 8002294:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002298:	2069      	movs	r0, #105	; 0x69
 800229a:	f7ff ff56 	bl	800214a <SD_SendCmd>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80022a4:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <SD_disk_initialize+0x1d0>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1eb      	bne.n	8002286 <SD_disk_initialize+0x92>
 80022ae:	e000      	b.n	80022b2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80022b0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80022b2:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <SD_disk_initialize+0x1d0>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d064      	beq.n	8002386 <SD_disk_initialize+0x192>
 80022bc:	2100      	movs	r1, #0
 80022be:	207a      	movs	r0, #122	; 0x7a
 80022c0:	f7ff ff43 	bl	800214a <SD_SendCmd>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d15d      	bne.n	8002386 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e00c      	b.n	80022ea <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80022d0:	7bfc      	ldrb	r4, [r7, #15]
 80022d2:	f7ff fe29 	bl	8001f28 <SPI_RxByte>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	f104 0310 	add.w	r3, r4, #16
 80022de:	443b      	add	r3, r7
 80022e0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d9ef      	bls.n	80022d0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80022f0:	7a3b      	ldrb	r3, [r7, #8]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <SD_disk_initialize+0x10a>
 80022fa:	230c      	movs	r3, #12
 80022fc:	e000      	b.n	8002300 <SD_disk_initialize+0x10c>
 80022fe:	2304      	movs	r3, #4
 8002300:	73bb      	strb	r3, [r7, #14]
 8002302:	e040      	b.n	8002386 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002304:	2100      	movs	r1, #0
 8002306:	2077      	movs	r0, #119	; 0x77
 8002308:	f7ff ff1f 	bl	800214a <SD_SendCmd>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d808      	bhi.n	8002324 <SD_disk_initialize+0x130>
 8002312:	2100      	movs	r1, #0
 8002314:	2069      	movs	r0, #105	; 0x69
 8002316:	f7ff ff18 	bl	800214a <SD_SendCmd>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	d801      	bhi.n	8002324 <SD_disk_initialize+0x130>
 8002320:	2302      	movs	r3, #2
 8002322:	e000      	b.n	8002326 <SD_disk_initialize+0x132>
 8002324:	2301      	movs	r3, #1
 8002326:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8002328:	7bbb      	ldrb	r3, [r7, #14]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d10e      	bne.n	800234c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800232e:	2100      	movs	r1, #0
 8002330:	2077      	movs	r0, #119	; 0x77
 8002332:	f7ff ff0a 	bl	800214a <SD_SendCmd>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d80e      	bhi.n	800235a <SD_disk_initialize+0x166>
 800233c:	2100      	movs	r1, #0
 800233e:	2069      	movs	r0, #105	; 0x69
 8002340:	f7ff ff03 	bl	800214a <SD_SendCmd>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <SD_disk_initialize+0x166>
 800234a:	e00d      	b.n	8002368 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800234c:	2100      	movs	r1, #0
 800234e:	2041      	movs	r0, #65	; 0x41
 8002350:	f7ff fefb 	bl	800214a <SD_SendCmd>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <SD_disk_initialize+0x1d0>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e1      	bne.n	8002328 <SD_disk_initialize+0x134>
 8002364:	e000      	b.n	8002368 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002366:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <SD_disk_initialize+0x1d0>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <SD_disk_initialize+0x18e>
 8002372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002376:	2050      	movs	r0, #80	; 0x50
 8002378:	f7ff fee7 	bl	800214a <SD_SendCmd>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <SD_disk_initialize+0x192>
 8002382:	2300      	movs	r3, #0
 8002384:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <SD_disk_initialize+0x1d4>)
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800238c:	f7ff fd88 	bl	8001ea0 <DESELECT>
	SPI_RxByte();
 8002390:	f7ff fdca 	bl	8001f28 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002394:	7bbb      	ldrb	r3, [r7, #14]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <SD_disk_initialize+0x1cc>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <SD_disk_initialize+0x1cc>)
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e001      	b.n	80023b0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80023ac:	f7ff fe42 	bl	8002034 <SD_PowerOff>
	}

	return Stat;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <SD_disk_initialize+0x1cc>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000
 80023c4:	20002e65 	.word	0x20002e65
 80023c8:	2000040c 	.word	0x2000040c

080023cc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <SD_disk_status+0x14>
 80023dc:	2301      	movs	r3, #1
 80023de:	e002      	b.n	80023e6 <SD_disk_status+0x1a>
	return Stat;
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <SD_disk_status+0x28>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000000 	.word	0x20000000

080023f8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4603      	mov	r3, r0
 8002406:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <SD_disk_read+0x1c>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <SD_disk_read+0x20>
 8002414:	2304      	movs	r3, #4
 8002416:	e051      	b.n	80024bc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <SD_disk_read+0xcc>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <SD_disk_read+0x32>
 8002426:	2303      	movs	r3, #3
 8002428:	e048      	b.n	80024bc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800242a:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <SD_disk_read+0xd0>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <SD_disk_read+0x44>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	025b      	lsls	r3, r3, #9
 800243a:	607b      	str	r3, [r7, #4]

	SELECT();
 800243c:	f7ff fd20 	bl	8001e80 <SELECT>

	if (count == 1)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d111      	bne.n	800246a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	2051      	movs	r0, #81	; 0x51
 800244a:	f7ff fe7e 	bl	800214a <SD_SendCmd>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d129      	bne.n	80024a8 <SD_disk_read+0xb0>
 8002454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002458:	68b8      	ldr	r0, [r7, #8]
 800245a:	f7ff fe03 	bl	8002064 <SD_RxDataBlock>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d021      	beq.n	80024a8 <SD_disk_read+0xb0>
 8002464:	2300      	movs	r3, #0
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	e01e      	b.n	80024a8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	2052      	movs	r0, #82	; 0x52
 800246e:	f7ff fe6c 	bl	800214a <SD_SendCmd>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d117      	bne.n	80024a8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800247c:	68b8      	ldr	r0, [r7, #8]
 800247e:	f7ff fdf1 	bl	8002064 <SD_RxDataBlock>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <SD_disk_read+0xa6>
				buff += 512;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800248e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	3b01      	subs	r3, #1
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ed      	bne.n	8002478 <SD_disk_read+0x80>
 800249c:	e000      	b.n	80024a0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800249e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80024a0:	2100      	movs	r1, #0
 80024a2:	204c      	movs	r0, #76	; 0x4c
 80024a4:	f7ff fe51 	bl	800214a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80024a8:	f7ff fcfa 	bl	8001ea0 <DESELECT>
	SPI_RxByte();
 80024ac:	f7ff fd3c 	bl	8001f28 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000000 	.word	0x20000000
 80024c8:	2000040c 	.word	0x2000040c

080024cc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4603      	mov	r3, r0
 80024da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <SD_disk_write+0x1c>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <SD_disk_write+0x20>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e06b      	b.n	80025c4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80024ec:	4b37      	ldr	r3, [pc, #220]	; (80025cc <SD_disk_write+0x100>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <SD_disk_write+0x32>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e062      	b.n	80025c4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <SD_disk_write+0x100>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <SD_disk_write+0x44>
 800250c:	2302      	movs	r3, #2
 800250e:	e059      	b.n	80025c4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002510:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <SD_disk_write+0x104>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <SD_disk_write+0x56>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	025b      	lsls	r3, r3, #9
 8002520:	607b      	str	r3, [r7, #4]

	SELECT();
 8002522:	f7ff fcad 	bl	8001e80 <SELECT>

	if (count == 1)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d110      	bne.n	800254e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	2058      	movs	r0, #88	; 0x58
 8002530:	f7ff fe0b 	bl	800214a <SD_SendCmd>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d13a      	bne.n	80025b0 <SD_disk_write+0xe4>
 800253a:	21fe      	movs	r1, #254	; 0xfe
 800253c:	68b8      	ldr	r0, [r7, #8]
 800253e:	f7ff fdc1 	bl	80020c4 <SD_TxDataBlock>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d033      	beq.n	80025b0 <SD_disk_write+0xe4>
			count = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	e030      	b.n	80025b0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <SD_disk_write+0x104>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800255a:	2100      	movs	r1, #0
 800255c:	2077      	movs	r0, #119	; 0x77
 800255e:	f7ff fdf4 	bl	800214a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002562:	6839      	ldr	r1, [r7, #0]
 8002564:	2057      	movs	r0, #87	; 0x57
 8002566:	f7ff fdf0 	bl	800214a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	2059      	movs	r0, #89	; 0x59
 800256e:	f7ff fdec 	bl	800214a <SD_SendCmd>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d11b      	bne.n	80025b0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002578:	21fc      	movs	r1, #252	; 0xfc
 800257a:	68b8      	ldr	r0, [r7, #8]
 800257c:	f7ff fda2 	bl	80020c4 <SD_TxDataBlock>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <SD_disk_write+0xd0>
				buff += 512;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800258c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3b01      	subs	r3, #1
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ee      	bne.n	8002578 <SD_disk_write+0xac>
 800259a:	e000      	b.n	800259e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800259c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800259e:	21fd      	movs	r1, #253	; 0xfd
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7ff fd8f 	bl	80020c4 <SD_TxDataBlock>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <SD_disk_write+0xe4>
			{
				count = 1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80025b0:	f7ff fc76 	bl	8001ea0 <DESELECT>
	SPI_RxByte();
 80025b4:	f7ff fcb8 	bl	8001f28 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000000 	.word	0x20000000
 80025d0:	2000040c 	.word	0x2000040c

080025d4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b08b      	sub	sp, #44	; 0x2c
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	603a      	str	r2, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
 80025e0:	460b      	mov	r3, r1
 80025e2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <SD_disk_ioctl+0x1e>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e115      	b.n	800281e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80025f8:	79bb      	ldrb	r3, [r7, #6]
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d124      	bne.n	8002648 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d012      	beq.n	800262c <SD_disk_ioctl+0x58>
 8002606:	2b02      	cmp	r3, #2
 8002608:	dc1a      	bgt.n	8002640 <SD_disk_ioctl+0x6c>
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <SD_disk_ioctl+0x40>
 800260e:	2b01      	cmp	r3, #1
 8002610:	d006      	beq.n	8002620 <SD_disk_ioctl+0x4c>
 8002612:	e015      	b.n	8002640 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002614:	f7ff fd0e 	bl	8002034 <SD_PowerOff>
			res = RES_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800261e:	e0fc      	b.n	800281a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8002620:	f7ff fcc6 	bl	8001fb0 <SD_PowerOn>
			res = RES_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800262a:	e0f6      	b.n	800281a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	1c5c      	adds	r4, r3, #1
 8002630:	f7ff fd0c 	bl	800204c <SD_CheckPower>
 8002634:	4603      	mov	r3, r0
 8002636:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002638:	2300      	movs	r3, #0
 800263a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800263e:	e0ec      	b.n	800281a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002640:	2304      	movs	r3, #4
 8002642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002646:	e0e8      	b.n	800281a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002648:	4b77      	ldr	r3, [pc, #476]	; (8002828 <SD_disk_ioctl+0x254>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <SD_disk_ioctl+0x86>
 8002656:	2303      	movs	r3, #3
 8002658:	e0e1      	b.n	800281e <SD_disk_ioctl+0x24a>

		SELECT();
 800265a:	f7ff fc11 	bl	8001e80 <SELECT>

		switch (ctrl)
 800265e:	79bb      	ldrb	r3, [r7, #6]
 8002660:	2b0d      	cmp	r3, #13
 8002662:	f200 80cb 	bhi.w	80027fc <SD_disk_ioctl+0x228>
 8002666:	a201      	add	r2, pc, #4	; (adr r2, 800266c <SD_disk_ioctl+0x98>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	08002767 	.word	0x08002767
 8002670:	080026a5 	.word	0x080026a5
 8002674:	08002757 	.word	0x08002757
 8002678:	080027fd 	.word	0x080027fd
 800267c:	080027fd 	.word	0x080027fd
 8002680:	080027fd 	.word	0x080027fd
 8002684:	080027fd 	.word	0x080027fd
 8002688:	080027fd 	.word	0x080027fd
 800268c:	080027fd 	.word	0x080027fd
 8002690:	080027fd 	.word	0x080027fd
 8002694:	080027fd 	.word	0x080027fd
 8002698:	08002779 	.word	0x08002779
 800269c:	0800279d 	.word	0x0800279d
 80026a0:	080027c1 	.word	0x080027c1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80026a4:	2100      	movs	r1, #0
 80026a6:	2049      	movs	r0, #73	; 0x49
 80026a8:	f7ff fd4f 	bl	800214a <SD_SendCmd>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 80a8 	bne.w	8002804 <SD_disk_ioctl+0x230>
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	2110      	movs	r1, #16
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fcd2 	bl	8002064 <SD_RxDataBlock>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 809e 	beq.w	8002804 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80026c8:	7b3b      	ldrb	r3, [r7, #12]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10e      	bne.n	80026f0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80026d2:	7d7b      	ldrb	r3, [r7, #21]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	7d3b      	ldrb	r3, [r7, #20]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4413      	add	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80026e6:	8bfb      	ldrh	r3, [r7, #30]
 80026e8:	029a      	lsls	r2, r3, #10
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e02e      	b.n	800274e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80026f0:	7c7b      	ldrb	r3, [r7, #17]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	7dbb      	ldrb	r3, [r7, #22]
 80026fa:	09db      	lsrs	r3, r3, #7
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	4413      	add	r3, r2
 8002700:	b2da      	uxtb	r2, r3
 8002702:	7d7b      	ldrb	r3, [r7, #21]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f003 0306 	and.w	r3, r3, #6
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4413      	add	r3, r2
 8002710:	b2db      	uxtb	r3, r3
 8002712:	3302      	adds	r3, #2
 8002714:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002718:	7d3b      	ldrb	r3, [r7, #20]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	b2db      	uxtb	r3, r3
 800271e:	b29a      	uxth	r2, r3
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	b29b      	uxth	r3, r3
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	b29b      	uxth	r3, r3
 8002728:	4413      	add	r3, r2
 800272a:	b29a      	uxth	r2, r3
 800272c:	7cbb      	ldrb	r3, [r7, #18]
 800272e:	029b      	lsls	r3, r3, #10
 8002730:	b29b      	uxth	r3, r3
 8002732:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002736:	b29b      	uxth	r3, r3
 8002738:	4413      	add	r3, r2
 800273a:	b29b      	uxth	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002740:	8bfa      	ldrh	r2, [r7, #30]
 8002742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002746:	3b09      	subs	r3, #9
 8002748:	409a      	lsls	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002754:	e056      	b.n	8002804 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002764:	e055      	b.n	8002812 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002766:	f7ff fc09 	bl	8001f7c <SD_ReadyWait>
 800276a:	4603      	mov	r3, r0
 800276c:	2bff      	cmp	r3, #255	; 0xff
 800276e:	d14b      	bne.n	8002808 <SD_disk_ioctl+0x234>
 8002770:	2300      	movs	r3, #0
 8002772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002776:	e047      	b.n	8002808 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002778:	2100      	movs	r1, #0
 800277a:	2049      	movs	r0, #73	; 0x49
 800277c:	f7ff fce5 	bl	800214a <SD_SendCmd>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d142      	bne.n	800280c <SD_disk_ioctl+0x238>
 8002786:	2110      	movs	r1, #16
 8002788:	6a38      	ldr	r0, [r7, #32]
 800278a:	f7ff fc6b 	bl	8002064 <SD_RxDataBlock>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d03b      	beq.n	800280c <SD_disk_ioctl+0x238>
 8002794:	2300      	movs	r3, #0
 8002796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800279a:	e037      	b.n	800280c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800279c:	2100      	movs	r1, #0
 800279e:	204a      	movs	r0, #74	; 0x4a
 80027a0:	f7ff fcd3 	bl	800214a <SD_SendCmd>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d132      	bne.n	8002810 <SD_disk_ioctl+0x23c>
 80027aa:	2110      	movs	r1, #16
 80027ac:	6a38      	ldr	r0, [r7, #32]
 80027ae:	f7ff fc59 	bl	8002064 <SD_RxDataBlock>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d02b      	beq.n	8002810 <SD_disk_ioctl+0x23c>
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80027be:	e027      	b.n	8002810 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80027c0:	2100      	movs	r1, #0
 80027c2:	207a      	movs	r0, #122	; 0x7a
 80027c4:	f7ff fcc1 	bl	800214a <SD_SendCmd>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d116      	bne.n	80027fc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80027d4:	e00b      	b.n	80027ee <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80027d6:	6a3c      	ldr	r4, [r7, #32]
 80027d8:	1c63      	adds	r3, r4, #1
 80027da:	623b      	str	r3, [r7, #32]
 80027dc:	f7ff fba4 	bl	8001f28 <SPI_RxByte>
 80027e0:	4603      	mov	r3, r0
 80027e2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80027e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027e8:	3301      	adds	r3, #1
 80027ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80027ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d9ef      	bls.n	80027d6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80027fc:	2304      	movs	r3, #4
 80027fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002802:	e006      	b.n	8002812 <SD_disk_ioctl+0x23e>
			break;
 8002804:	bf00      	nop
 8002806:	e004      	b.n	8002812 <SD_disk_ioctl+0x23e>
			break;
 8002808:	bf00      	nop
 800280a:	e002      	b.n	8002812 <SD_disk_ioctl+0x23e>
			break;
 800280c:	bf00      	nop
 800280e:	e000      	b.n	8002812 <SD_disk_ioctl+0x23e>
			break;
 8002810:	bf00      	nop
		}

		DESELECT();
 8002812:	f7ff fb45 	bl	8001ea0 <DESELECT>
		SPI_RxByte();
 8002816:	f7ff fb87 	bl	8001f28 <SPI_RxByte>
	}

	return res;
 800281a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800281e:	4618      	mov	r0, r3
 8002820:	372c      	adds	r7, #44	; 0x2c
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}
 8002826:	bf00      	nop
 8002828:	20000000 	.word	0x20000000

0800282c <HAL_UART_RxCpltCallback>:
#include "sdCard.h"

Neo6M_GpsData NEO_GPS;
uint8_t radioData[700];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { //called automatically after DMA interrupt
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huart, NEO_GPS.data, 700); //restarts DMA
 8002834:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_UART_RxCpltCallback+0x1c>)
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f005 fb08 	bl	8007e50 <HAL_UART_Receive_DMA>
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2000043a 	.word	0x2000043a

0800284c <Gps_Data_Parse>:

void Gps_Data_Parse(UART_HandleTypeDef *huart, uint32_t lastTransmitTime) {
 800284c:	b5b0      	push	{r4, r5, r7, lr}
 800284e:	b08c      	sub	sp, #48	; 0x30
 8002850:	af06      	add	r7, sp, #24
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
	//CDC_Transmit_FS(NEO_GPS.data, strlen(NEO_GPS.data));
	char *start = strstr((char*) NEO_GPS.data, "GPGGA");
 8002856:	4933      	ldr	r1, [pc, #204]	; (8002924 <Gps_Data_Parse+0xd8>)
 8002858:	4833      	ldr	r0, [pc, #204]	; (8002928 <Gps_Data_Parse+0xdc>)
 800285a:	f00e fb3c 	bl	8010ed6 <strstr>
 800285e:	6178      	str	r0, [r7, #20]
	if (start != NULL) {
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d05a      	beq.n	800291c <Gps_Data_Parse+0xd0>
		char *newline_position = strchr(start, '\n');
 8002866:	210a      	movs	r1, #10
 8002868:	6978      	ldr	r0, [r7, #20]
 800286a:	f00e fb14 	bl	8010e96 <strchr>
 800286e:	6138      	str	r0, [r7, #16]
		if (newline_position != NULL) {
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d052      	beq.n	800291c <Gps_Data_Parse+0xd0>
			size_t length = newline_position - start + 1; //calculate GPGAA substring length
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	3301      	adds	r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
			NEO_GPS.GPGGA = (uint8_t* ) malloc(length * sizeof(uint8_t));
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f00d fa7b 	bl	800fd7c <malloc>
 8002886:	4603      	mov	r3, r0
 8002888:	461a      	mov	r2, r3
 800288a:	4b28      	ldr	r3, [pc, #160]	; (800292c <Gps_Data_Parse+0xe0>)
 800288c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
			strncpy((char*)NEO_GPS.GPGGA, start, length);
 8002890:	4b26      	ldr	r3, [pc, #152]	; (800292c <Gps_Data_Parse+0xe0>)
 8002892:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	6979      	ldr	r1, [r7, #20]
 800289a:	4618      	mov	r0, r3
 800289c:	f00e fb08 	bl	8010eb0 <strncpy>

			sscanf(NEO_GPS.GPGGA,"GPGGA,%lf,%lf,%c,%lf,%c,,,,%lf,,%lf,,,", &NEO_GPS.time,
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <Gps_Data_Parse+0xe0>)
 80028a2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <Gps_Data_Parse+0xe4>)
 80028a8:	9304      	str	r3, [sp, #16]
 80028aa:	4b22      	ldr	r3, [pc, #136]	; (8002934 <Gps_Data_Parse+0xe8>)
 80028ac:	9303      	str	r3, [sp, #12]
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <Gps_Data_Parse+0xec>)
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <Gps_Data_Parse+0xf0>)
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	4b22      	ldr	r3, [pc, #136]	; (8002940 <Gps_Data_Parse+0xf4>)
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <Gps_Data_Parse+0xf8>)
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <Gps_Data_Parse+0xe0>)
 80028be:	4922      	ldr	r1, [pc, #136]	; (8002948 <Gps_Data_Parse+0xfc>)
 80028c0:	f00e fa70 	bl	8010da4 <siscanf>
					&NEO_GPS.latitude, &NEO_GPS.N_OR_S, &NEO_GPS.longitude, &NEO_GPS.E_OR_W, &NEO_GPS.altitude_approx,
					&NEO_GPS.altitude_correction);
			Gps_Data_Conversion();
 80028c4:	f000 f848 	bl	8002958 <Gps_Data_Conversion>
			sprintf(NEO_GPS.result, "Time: %.5lf Latitude: %.5lf Longitude: %.5lf\r\n\0",
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <Gps_Data_Parse+0xe0>)
 80028ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <Gps_Data_Parse+0xe0>)
 80028d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028d4:	4915      	ldr	r1, [pc, #84]	; (800292c <Gps_Data_Parse+0xe0>)
 80028d6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80028da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028de:	e9cd 2300 	strd	r2, r3, [sp]
 80028e2:	4622      	mov	r2, r4
 80028e4:	462b      	mov	r3, r5
 80028e6:	4919      	ldr	r1, [pc, #100]	; (800294c <Gps_Data_Parse+0x100>)
 80028e8:	4819      	ldr	r0, [pc, #100]	; (8002950 <Gps_Data_Parse+0x104>)
 80028ea:	f00e fa3b 	bl	8010d64 <siprintf>
					NEO_GPS.time, NEO_GPS.latitude, NEO_GPS.longitude);
			//CDC_Transmit_FS(NEO_GPS.GPGGA, length);

			CDC_Transmit_FS(NEO_GPS.result, strlen(NEO_GPS.result)); //transmit Latitude and Longitude
 80028ee:	4818      	ldr	r0, [pc, #96]	; (8002950 <Gps_Data_Parse+0x104>)
 80028f0:	f7fd fcc6 	bl	8000280 <strlen>
 80028f4:	4603      	mov	r3, r0
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4619      	mov	r1, r3
 80028fa:	4815      	ldr	r0, [pc, #84]	; (8002950 <Gps_Data_Parse+0x104>)
 80028fc:	f00c fdec 	bl	800f4d8 <CDC_Transmit_FS>

			//write result to SD card
			sd_write(NEO_GPS.result);
 8002900:	4813      	ldr	r0, [pc, #76]	; (8002950 <Gps_Data_Parse+0x104>)
 8002902:	f000 fc99 	bl	8003238 <sd_write>
			free(NEO_GPS.GPGGA);
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <Gps_Data_Parse+0xe0>)
 8002908:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800290c:	4618      	mov	r0, r3
 800290e:	f00d fa3d 	bl	800fd8c <free>

			//transmit radio data
			HAL_UART_Transmit_DMA(huart, NEO_GPS.result, 100);
 8002912:	2264      	movs	r2, #100	; 0x64
 8002914:	490e      	ldr	r1, [pc, #56]	; (8002950 <Gps_Data_Parse+0x104>)
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f005 fa2a 	bl	8007d70 <HAL_UART_Transmit_DMA>
		}
		/*size_t offset = start - (char*) data;
		return data + offset;*/
	}
}
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bdb0      	pop	{r4, r5, r7, pc}
 8002924:	08015d4c 	.word	0x08015d4c
 8002928:	2000043a 	.word	0x2000043a
 800292c:	20000410 	.word	0x20000410
 8002930:	20000430 	.word	0x20000430
 8002934:	20000428 	.word	0x20000428
 8002938:	20000439 	.word	0x20000439
 800293c:	20000420 	.word	0x20000420
 8002940:	20000438 	.word	0x20000438
 8002944:	20000418 	.word	0x20000418
 8002948:	08015d54 	.word	0x08015d54
 800294c:	08015d7c 	.word	0x08015d7c
 8002950:	200006fc 	.word	0x200006fc
 8002954:	00000000 	.word	0x00000000

08002958 <Gps_Data_Conversion>:
//convert long and lat to human readable
void Gps_Data_Conversion() {
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
	double Deg_Val = 0.0, Min_Val = 0.0, Sec_Val = 0.0, lon = 0.0, lat = 0.0;
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9c7 2300 	strd	r2, r3, [r7]

	lon = NEO_GPS.longitude;
 800299a:	4b97      	ldr	r3, [pc, #604]	; (8002bf8 <Gps_Data_Conversion+0x2a0>)
 800299c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	lat = NEO_GPS.latitude;
 80029a4:	4b94      	ldr	r3, [pc, #592]	; (8002bf8 <Gps_Data_Conversion+0x2a0>)
 80029a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029aa:	e9c7 2300 	strd	r2, r3, [r7]
	Deg_Val = (int)(lon / 100);
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	4b92      	ldr	r3, [pc, #584]	; (8002bfc <Gps_Data_Conversion+0x2a4>)
 80029b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029b8:	f7fd ff50 	bl	800085c <__aeabi_ddiv>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fe f8d0 	bl	8000b68 <__aeabi_d2iz>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd fdb2 	bl	8000534 <__aeabi_i2d>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Min_Val = (int)(lon - (Deg_Val * 100));
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	4b87      	ldr	r3, [pc, #540]	; (8002bfc <Gps_Data_Conversion+0x2a4>)
 80029de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029e2:	f7fd fe11 	bl	8000608 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029ee:	f7fd fc53 	bl	8000298 <__aeabi_dsub>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7fe f8b5 	bl	8000b68 <__aeabi_d2iz>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd97 	bl	8000534 <__aeabi_i2d>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	Sec_Val = ((lon - (Deg_Val * 100)) - Min_Val) * 100;
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	4b7a      	ldr	r3, [pc, #488]	; (8002bfc <Gps_Data_Conversion+0x2a4>)
 8002a14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a18:	f7fd fdf6 	bl	8000608 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a24:	f7fd fc38 	bl	8000298 <__aeabi_dsub>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a34:	f7fd fc30 	bl	8000298 <__aeabi_dsub>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <Gps_Data_Conversion+0x2a4>)
 8002a46:	f7fd fddf 	bl	8000608 <__aeabi_dmul>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	NEO_GPS.longitude = (Deg_Val + (Min_Val * Min_To_Degree) + (Sec_Val * Sec_To_Degree)) * (NEO_GPS.E_OR_W == 'W' ? -1 : 1);
 8002a52:	a365      	add	r3, pc, #404	; (adr r3, 8002be8 <Gps_Data_Conversion+0x290>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a5c:	f7fd fdd4 	bl	8000608 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a6c:	f7fd fc16 	bl	800029c <__adddf3>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4614      	mov	r4, r2
 8002a76:	461d      	mov	r5, r3
 8002a78:	a35d      	add	r3, pc, #372	; (adr r3, 8002bf0 <Gps_Data_Conversion+0x298>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a82:	f7fd fdc1 	bl	8000608 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	f7fd fc05 	bl	800029c <__adddf3>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4614      	mov	r4, r2
 8002a98:	461d      	mov	r5, r3
 8002a9a:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <Gps_Data_Conversion+0x2a0>)
 8002a9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002aa0:	2b57      	cmp	r3, #87	; 0x57
 8002aa2:	d103      	bne.n	8002aac <Gps_Data_Conversion+0x154>
 8002aa4:	f04f 0000 	mov.w	r0, #0
 8002aa8:	4955      	ldr	r1, [pc, #340]	; (8002c00 <Gps_Data_Conversion+0x2a8>)
 8002aaa:	e002      	b.n	8002ab2 <Gps_Data_Conversion+0x15a>
 8002aac:	f04f 0000 	mov.w	r0, #0
 8002ab0:	4954      	ldr	r1, [pc, #336]	; (8002c04 <Gps_Data_Conversion+0x2ac>)
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	f7fd fda7 	bl	8000608 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	494e      	ldr	r1, [pc, #312]	; (8002bf8 <Gps_Data_Conversion+0x2a0>)
 8002ac0:	e9c1 2304 	strd	r2, r3, [r1, #16]

	Deg_Val = (int)((lat / 100));
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <Gps_Data_Conversion+0x2a4>)
 8002aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ace:	f7fd fec5 	bl	800085c <__aeabi_ddiv>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f7fe f845 	bl	8000b68 <__aeabi_d2iz>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fd27 	bl	8000534 <__aeabi_i2d>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Min_Val = (int)(lat - (Deg_Val * 100));
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <Gps_Data_Conversion+0x2a4>)
 8002af4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002af8:	f7fd fd86 	bl	8000608 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b04:	f7fd fbc8 	bl	8000298 <__aeabi_dsub>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7fe f82a 	bl	8000b68 <__aeabi_d2iz>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fd0c 	bl	8000534 <__aeabi_i2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	e9c7 2306 	strd	r2, r3, [r7, #24]
	Sec_Val = ((lat - (Deg_Val * 100)) - Min_Val) * 10;
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <Gps_Data_Conversion+0x2a4>)
 8002b2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b2e:	f7fd fd6b 	bl	8000608 <__aeabi_dmul>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b3a:	f7fd fbad 	bl	8000298 <__aeabi_dsub>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b4a:	f7fd fba5 	bl	8000298 <__aeabi_dsub>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <Gps_Data_Conversion+0x2b0>)
 8002b5c:	f7fd fd54 	bl	8000608 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	e9c7 2304 	strd	r2, r3, [r7, #16]
	NEO_GPS.latitude = (Deg_Val + (Min_Val * Min_To_Degree) + (Sec_Val * Sec_To_Degree)) * (NEO_GPS.N_OR_S == 'S' ? -1 : 1);
 8002b68:	a31f      	add	r3, pc, #124	; (adr r3, 8002be8 <Gps_Data_Conversion+0x290>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b72:	f7fd fd49 	bl	8000608 <__aeabi_dmul>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b82:	f7fd fb8b 	bl	800029c <__adddf3>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4614      	mov	r4, r2
 8002b8c:	461d      	mov	r5, r3
 8002b8e:	a318      	add	r3, pc, #96	; (adr r3, 8002bf0 <Gps_Data_Conversion+0x298>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b98:	f7fd fd36 	bl	8000608 <__aeabi_dmul>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	f7fd fb7a 	bl	800029c <__adddf3>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <Gps_Data_Conversion+0x2a0>)
 8002bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bb6:	2b53      	cmp	r3, #83	; 0x53
 8002bb8:	d103      	bne.n	8002bc2 <Gps_Data_Conversion+0x26a>
 8002bba:	f04f 0000 	mov.w	r0, #0
 8002bbe:	4910      	ldr	r1, [pc, #64]	; (8002c00 <Gps_Data_Conversion+0x2a8>)
 8002bc0:	e002      	b.n	8002bc8 <Gps_Data_Conversion+0x270>
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	490f      	ldr	r1, [pc, #60]	; (8002c04 <Gps_Data_Conversion+0x2ac>)
 8002bc8:	4622      	mov	r2, r4
 8002bca:	462b      	mov	r3, r5
 8002bcc:	f7fd fd1c 	bl	8000608 <__aeabi_dmul>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4908      	ldr	r1, [pc, #32]	; (8002bf8 <Gps_Data_Conversion+0x2a0>)
 8002bd6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002bda:	bf00      	nop
 8002bdc:	3728      	adds	r7, #40	; 0x28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bdb0      	pop	{r4, r5, r7, pc}
 8002be2:	bf00      	nop
 8002be4:	f3af 8000 	nop.w
 8002be8:	111fba11 	.word	0x111fba11
 8002bec:	3f911111 	.word	0x3f911111
 8002bf0:	78d949ab 	.word	0x78d949ab
 8002bf4:	3f323456 	.word	0x3f323456
 8002bf8:	20000410 	.word	0x20000410
 8002bfc:	40590000 	.word	0x40590000
 8002c00:	bff00000 	.word	0xbff00000
 8002c04:	3ff00000 	.word	0x3ff00000
 8002c08:	40240000 	.word	0x40240000

08002c0c <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	//cdc_Transmit("hello world");
	if (HAL_GetTick() - lastTransmitTime <= 1000){
 8002c14:	f000 fece 	bl	80039b4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_UART_TxCpltCallback+0x28>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c24:	d802      	bhi.n	8002c2c <HAL_UART_TxCpltCallback+0x20>
		HAL_UART_DMAPause(huart1);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f005 f937 	bl	8007e9a <HAL_UART_DMAPause>
	}
	//add live altitude data later
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	200009a4 	.word	0x200009a4

08002c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c3c:	f000 fe54 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c40:	f000 f85c 	bl	8002cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c44:	f000 f9b4 	bl	8002fb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c48:	f000 f97c 	bl	8002f44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c4c:	f000 f950 	bl	8002ef0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8002c50:	f00c fb84 	bl	800f35c <MX_USB_DEVICE_Init>
  MX_SPI3_Init();
 8002c54:	f000 f8ec 	bl	8002e30 <MX_SPI3_Init>
  MX_FATFS_Init();
 8002c58:	f007 faaa 	bl	800a1b0 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8002c5c:	f000 f91e 	bl	8002e9c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002c60:	f000 f8b8 	bl	8002dd4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_DMA(&huart2, NEO_GPS.data, 700);
 8002c64:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002c68:	491a      	ldr	r1, [pc, #104]	; (8002cd4 <main+0x9c>)
 8002c6a:	481b      	ldr	r0, [pc, #108]	; (8002cd8 <main+0xa0>)
 8002c6c:	f005 f8f0 	bl	8007e50 <HAL_UART_Receive_DMA>
	  while (1)
	  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  if (HAL_GetTick() - lastTransmitTime >= 1000) {
 8002c70:	f000 fea0 	bl	80039b4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <main+0xa4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c80:	d3f6      	bcc.n	8002c70 <main+0x38>

			  //SD card reader & Bmp280 init
			  if (lastTransmitTime == 0) sd_Start_Up();
 8002c82:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <main+0xa4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <main+0x56>
 8002c8a:	f000 fa3d 	bl	8003108 <sd_Start_Up>
			  if (lastTransmitTime == 0) Bmp_Init(&hi2c1, &bmp280);
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <main+0xa4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <main+0x66>
 8002c96:	4912      	ldr	r1, [pc, #72]	; (8002ce0 <main+0xa8>)
 8002c98:	4812      	ldr	r0, [pc, #72]	; (8002ce4 <main+0xac>)
 8002c9a:	f7ff f82f 	bl	8001cfc <Bmp_Init>

			  Bmp_Read_Data(&bmp280, &temperature, &pressure, &humidity);
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <main+0xb0>)
 8002ca0:	4a12      	ldr	r2, [pc, #72]	; (8002cec <main+0xb4>)
 8002ca2:	4913      	ldr	r1, [pc, #76]	; (8002cf0 <main+0xb8>)
 8002ca4:	480e      	ldr	r0, [pc, #56]	; (8002ce0 <main+0xa8>)
 8002ca6:	f7ff f855 	bl	8001d54 <Bmp_Read_Data>
			  Gps_Data_Parse(&huart1, lastTransmitTime);
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <main+0xa4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4810      	ldr	r0, [pc, #64]	; (8002cf4 <main+0xbc>)
 8002cb2:	f7ff fdcb 	bl	800284c <Gps_Data_Parse>

			  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin); //toggle LED
 8002cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cba:	480f      	ldr	r0, [pc, #60]	; (8002cf8 <main+0xc0>)
 8002cbc:	f001 fcc9 	bl	8004652 <HAL_GPIO_TogglePin>
			  //sd_write("paeffoaajojfafojf");

			  //resume DMA transmission
			  HAL_UART_DMAResume(&huart1);
 8002cc0:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <main+0xbc>)
 8002cc2:	f005 f987 	bl	8007fd4 <HAL_UART_DMAResume>


			  //get time
			  lastTransmitTime = HAL_GetTick();
 8002cc6:	f000 fe75 	bl	80039b4 <HAL_GetTick>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4a03      	ldr	r2, [pc, #12]	; (8002cdc <main+0xa4>)
 8002cce:	6013      	str	r3, [r2, #0]
		  if (HAL_GetTick() - lastTransmitTime >= 1000) {
 8002cd0:	e7ce      	b.n	8002c70 <main+0x38>
 8002cd2:	bf00      	nop
 8002cd4:	2000043a 	.word	0x2000043a
 8002cd8:	2000089c 	.word	0x2000089c
 8002cdc:	200009a4 	.word	0x200009a4
 8002ce0:	200009a8 	.word	0x200009a8
 8002ce4:	200007a8 	.word	0x200007a8
 8002ce8:	200009e4 	.word	0x200009e4
 8002cec:	200009dc 	.word	0x200009dc
 8002cf0:	200009e0 	.word	0x200009e0
 8002cf4:	20000854 	.word	0x20000854
 8002cf8:	40020800 	.word	0x40020800

08002cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b094      	sub	sp, #80	; 0x50
 8002d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d02:	f107 0320 	add.w	r3, r7, #32
 8002d06:	2230      	movs	r2, #48	; 0x30
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f00e f8bb 	bl	8010e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d20:	2300      	movs	r3, #0
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <SystemClock_Config+0xd0>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <SystemClock_Config+0xd0>)
 8002d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <SystemClock_Config+0xd0>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <SystemClock_Config+0xd4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <SystemClock_Config+0xd4>)
 8002d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <SystemClock_Config+0xd4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d62:	2301      	movs	r3, #1
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d66:	2310      	movs	r3, #16
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002d74:	230f      	movs	r3, #15
 8002d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002d78:	2390      	movs	r3, #144	; 0x90
 8002d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002d80:	2305      	movs	r3, #5
 8002d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d84:	f107 0320 	add.w	r3, r7, #32
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fef1 	bl	8006b70 <HAL_RCC_OscConfig>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002d94:	f000 f984 	bl	80030a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d98:	230f      	movs	r3, #15
 8002d9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f004 f954 	bl	8007060 <HAL_RCC_ClockConfig>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002dbe:	f000 f96f 	bl	80030a0 <Error_Handler>
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	3750      	adds	r7, #80	; 0x50
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40007000 	.word	0x40007000

08002dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <MX_I2C1_Init+0x50>)
 8002dda:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <MX_I2C1_Init+0x54>)
 8002ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <MX_I2C1_Init+0x50>)
 8002de0:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <MX_I2C1_Init+0x58>)
 8002de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <MX_I2C1_Init+0x50>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <MX_I2C1_Init+0x50>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <MX_I2C1_Init+0x50>)
 8002df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002df6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <MX_I2C1_Init+0x50>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <MX_I2C1_Init+0x50>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <MX_I2C1_Init+0x50>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <MX_I2C1_Init+0x50>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <MX_I2C1_Init+0x50>)
 8002e12:	f001 fc39 	bl	8004688 <HAL_I2C_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e1c:	f000 f940 	bl	80030a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	200007a8 	.word	0x200007a8
 8002e28:	40005400 	.word	0x40005400
 8002e2c:	00061a80 	.word	0x00061a80

08002e30 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <MX_SPI3_Init+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e60:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e80:	4804      	ldr	r0, [pc, #16]	; (8002e94 <MX_SPI3_Init+0x64>)
 8002e82:	f004 facd 	bl	8007420 <HAL_SPI_Init>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002e8c:	f000 f908 	bl	80030a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	200007fc 	.word	0x200007fc
 8002e98:	40003c00 	.word	0x40003c00

08002e9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <MX_USART1_UART_Init+0x4c>)
 8002ea2:	4a12      	ldr	r2, [pc, #72]	; (8002eec <MX_USART1_UART_Init+0x50>)
 8002ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <MX_USART1_UART_Init+0x4c>)
 8002ea8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <MX_USART1_UART_Init+0x4c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <MX_USART1_UART_Init+0x4c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <MX_USART1_UART_Init+0x4c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <MX_USART1_UART_Init+0x4c>)
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <MX_USART1_UART_Init+0x4c>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <MX_USART1_UART_Init+0x4c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ed2:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <MX_USART1_UART_Init+0x4c>)
 8002ed4:	f004 fefc 	bl	8007cd0 <HAL_UART_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ede:	f000 f8df 	bl	80030a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000854 	.word	0x20000854
 8002eec:	40011000 	.word	0x40011000

08002ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <MX_USART2_UART_Init+0x4c>)
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <MX_USART2_UART_Init+0x50>)
 8002ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <MX_USART2_UART_Init+0x4c>)
 8002efc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <MX_USART2_UART_Init+0x4c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <MX_USART2_UART_Init+0x4c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <MX_USART2_UART_Init+0x4c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <MX_USART2_UART_Init+0x4c>)
 8002f16:	220c      	movs	r2, #12
 8002f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <MX_USART2_UART_Init+0x4c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <MX_USART2_UART_Init+0x4c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f26:	4805      	ldr	r0, [pc, #20]	; (8002f3c <MX_USART2_UART_Init+0x4c>)
 8002f28:	f004 fed2 	bl	8007cd0 <HAL_UART_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f32:	f000 f8b5 	bl	80030a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	2000089c 	.word	0x2000089c
 8002f40:	40004400 	.word	0x40004400

08002f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <MX_DMA_Init+0x68>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a16      	ldr	r2, [pc, #88]	; (8002fac <MX_DMA_Init+0x68>)
 8002f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <MX_DMA_Init+0x68>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <MX_DMA_Init+0x68>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <MX_DMA_Init+0x68>)
 8002f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <MX_DMA_Init+0x68>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2100      	movs	r1, #0
 8002f86:	2010      	movs	r0, #16
 8002f88:	f000 fe1f 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f8c:	2010      	movs	r0, #16
 8002f8e:	f000 fe38 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	2046      	movs	r0, #70	; 0x46
 8002f98:	f000 fe17 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002f9c:	2046      	movs	r0, #70	; 0x46
 8002f9e:	f000 fe30 	bl	8003c02 <HAL_NVIC_EnableIRQ>

}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800

08002fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	4b32      	ldr	r3, [pc, #200]	; (8003094 <MX_GPIO_Init+0xe4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a31      	ldr	r2, [pc, #196]	; (8003094 <MX_GPIO_Init+0xe4>)
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <MX_GPIO_Init+0xe4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <MX_GPIO_Init+0xe4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <MX_GPIO_Init+0xe4>)
 8002fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <MX_GPIO_Init+0xe4>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <MX_GPIO_Init+0xe4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a23      	ldr	r2, [pc, #140]	; (8003094 <MX_GPIO_Init+0xe4>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b21      	ldr	r3, [pc, #132]	; (8003094 <MX_GPIO_Init+0xe4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <MX_GPIO_Init+0xe4>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <MX_GPIO_Init+0xe4>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <MX_GPIO_Init+0xe4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8003036:	2200      	movs	r2, #0
 8003038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800303c:	4816      	ldr	r0, [pc, #88]	; (8003098 <MX_GPIO_Init+0xe8>)
 800303e:	f001 faef 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003042:	2200      	movs	r2, #0
 8003044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003048:	4814      	ldr	r0, [pc, #80]	; (800309c <MX_GPIO_Init+0xec>)
 800304a:	f001 fae9 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 800304e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003054:	2301      	movs	r3, #1
 8003056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2300      	movs	r3, #0
 800305e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	4619      	mov	r1, r3
 8003066:	480c      	ldr	r0, [pc, #48]	; (8003098 <MX_GPIO_Init+0xe8>)
 8003068:	f001 f956 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800306c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003072:	2301      	movs	r3, #1
 8003074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307a:	2300      	movs	r3, #0
 800307c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	4619      	mov	r1, r3
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <MX_GPIO_Init+0xec>)
 8003086:	f001 f947 	bl	8004318 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800308a:	bf00      	nop
 800308c:	3728      	adds	r7, #40	; 0x28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	40020800 	.word	0x40020800
 800309c:	40020000 	.word	0x40020000

080030a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030a4:	b672      	cpsid	i
}
 80030a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030a8:	e7fe      	b.n	80030a8 <Error_Handler+0x8>
	...

080030ac <buffer_Clear>:
	int i = 0;
	while (*buff++ != '\0') i++;
	return i;
}
//clear buffer
void buffer_Clear (char *buff) {
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 1024; i++) {
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e007      	b.n	80030ca <buffer_Clear+0x1e>
		buffer[i] = '\0';
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <buffer_Clear+0x34>)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++) {
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3301      	adds	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	dbf3      	blt.n	80030ba <buffer_Clear+0xe>
	}
}
 80030d2:	bf00      	nop
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	20002a54 	.word	0x20002a54

080030e4 <cdc_Transmit>:
void cdc_Transmit(char *buff) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) buff, strlen(buff));
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7fd f8c7 	bl	8000280 <strlen>
 80030f2:	4603      	mov	r3, r0
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f00c f9ed 	bl	800f4d8 <CDC_Transmit_FS>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <sd_Start_Up>:

void sd_Start_Up() {
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "", 1);
 800310c:	2201      	movs	r2, #1
 800310e:	493b      	ldr	r1, [pc, #236]	; (80031fc <sd_Start_Up+0xf4>)
 8003110:	483b      	ldr	r0, [pc, #236]	; (8003200 <sd_Start_Up+0xf8>)
 8003112:	f00b fa63 	bl	800e5dc <f_mount>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	4b3a      	ldr	r3, [pc, #232]	; (8003204 <sd_Start_Up+0xfc>)
 800311c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NOT_READY) {
 800311e:	4b39      	ldr	r3, [pc, #228]	; (8003204 <sd_Start_Up+0xfc>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d103      	bne.n	800312e <sd_Start_Up+0x26>
		cdc_Transmit("SD card failed to mount!\r\n");
 8003126:	4838      	ldr	r0, [pc, #224]	; (8003208 <sd_Start_Up+0x100>)
 8003128:	f7ff ffdc 	bl	80030e4 <cdc_Transmit>
 800312c:	e002      	b.n	8003134 <sd_Start_Up+0x2c>
	} else {
		cdc_Transmit("SD card mounting successful!\r\n");
 800312e:	4837      	ldr	r0, [pc, #220]	; (800320c <sd_Start_Up+0x104>)
 8003130:	f7ff ffd8 	bl	80030e4 <cdc_Transmit>
	}
	//cdc_Transmit("fresult stuck");
	fresult = f_getfree("", &fre_clust, &pfs);
 8003134:	4a36      	ldr	r2, [pc, #216]	; (8003210 <sd_Start_Up+0x108>)
 8003136:	4937      	ldr	r1, [pc, #220]	; (8003214 <sd_Start_Up+0x10c>)
 8003138:	4830      	ldr	r0, [pc, #192]	; (80031fc <sd_Start_Up+0xf4>)
 800313a:	f00b fe9d 	bl	800ee78 <f_getfree>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <sd_Start_Up+0xfc>)
 8003144:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <sd_Start_Up+0xfc>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <sd_Start_Up+0x4e>
		cdc_Transmit("FR_NOT_READY Error!\r\n");
 800314e:	4832      	ldr	r0, [pc, #200]	; (8003218 <sd_Start_Up+0x110>)
 8003150:	f7ff ffc8 	bl	80030e4 <cdc_Transmit>
		free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
		sprintf(buffer, "SD CARD Free Space: %lu\r\n", free_space);
		cdc_Transmit(buffer);
		buffer_Clear(buffer);
	}
}
 8003154:	e04f      	b.n	80031f6 <sd_Start_Up+0xee>
		cdc_Transmit("f_getfree is OK!\r\n");
 8003156:	4831      	ldr	r0, [pc, #196]	; (800321c <sd_Start_Up+0x114>)
 8003158:	f7ff ffc4 	bl	80030e4 <cdc_Transmit>
		total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800315c:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <sd_Start_Up+0x108>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	3b02      	subs	r3, #2
 8003164:	4a2a      	ldr	r2, [pc, #168]	; (8003210 <sd_Start_Up+0x108>)
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	8952      	ldrh	r2, [r2, #10]
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f9d0 	bl	8000514 <__aeabi_ui2d>
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	4b29      	ldr	r3, [pc, #164]	; (8003220 <sd_Start_Up+0x118>)
 800317a:	f7fd fa45 	bl	8000608 <__aeabi_dmul>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	f7fd fd17 	bl	8000bb8 <__aeabi_d2uiz>
 800318a:	4603      	mov	r3, r0
 800318c:	4a25      	ldr	r2, [pc, #148]	; (8003224 <sd_Start_Up+0x11c>)
 800318e:	6013      	str	r3, [r2, #0]
		sprintf(buffer, "SD CARD Total Size: %lu\r\n", total);
 8003190:	4b24      	ldr	r3, [pc, #144]	; (8003224 <sd_Start_Up+0x11c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	4924      	ldr	r1, [pc, #144]	; (8003228 <sd_Start_Up+0x120>)
 8003198:	4824      	ldr	r0, [pc, #144]	; (800322c <sd_Start_Up+0x124>)
 800319a:	f00d fde3 	bl	8010d64 <siprintf>
		cdc_Transmit(buffer);
 800319e:	4823      	ldr	r0, [pc, #140]	; (800322c <sd_Start_Up+0x124>)
 80031a0:	f7ff ffa0 	bl	80030e4 <cdc_Transmit>
		buffer_Clear(buffer);
 80031a4:	4821      	ldr	r0, [pc, #132]	; (800322c <sd_Start_Up+0x124>)
 80031a6:	f7ff ff81 	bl	80030ac <buffer_Clear>
		free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <sd_Start_Up+0x108>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	895b      	ldrh	r3, [r3, #10]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <sd_Start_Up+0x10c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f9aa 	bl	8000514 <__aeabi_ui2d>
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <sd_Start_Up+0x118>)
 80031c6:	f7fd fa1f 	bl	8000608 <__aeabi_dmul>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fd fcf1 	bl	8000bb8 <__aeabi_d2uiz>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4a15      	ldr	r2, [pc, #84]	; (8003230 <sd_Start_Up+0x128>)
 80031da:	6013      	str	r3, [r2, #0]
		sprintf(buffer, "SD CARD Free Space: %lu\r\n", free_space);
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <sd_Start_Up+0x128>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4914      	ldr	r1, [pc, #80]	; (8003234 <sd_Start_Up+0x12c>)
 80031e4:	4811      	ldr	r0, [pc, #68]	; (800322c <sd_Start_Up+0x124>)
 80031e6:	f00d fdbd 	bl	8010d64 <siprintf>
		cdc_Transmit(buffer);
 80031ea:	4810      	ldr	r0, [pc, #64]	; (800322c <sd_Start_Up+0x124>)
 80031ec:	f7ff ff7a 	bl	80030e4 <cdc_Transmit>
		buffer_Clear(buffer);
 80031f0:	480e      	ldr	r0, [pc, #56]	; (800322c <sd_Start_Up+0x124>)
 80031f2:	f7ff ff5b 	bl	80030ac <buffer_Clear>
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	08015dac 	.word	0x08015dac
 8003200:	200009e8 	.word	0x200009e8
 8003204:	20002a50 	.word	0x20002a50
 8003208:	08015db0 	.word	0x08015db0
 800320c:	08015dcc 	.word	0x08015dcc
 8003210:	20002e54 	.word	0x20002e54
 8003214:	20002e58 	.word	0x20002e58
 8003218:	08015dec 	.word	0x08015dec
 800321c:	08015e04 	.word	0x08015e04
 8003220:	3fe00000 	.word	0x3fe00000
 8003224:	20002e60 	.word	0x20002e60
 8003228:	08015e18 	.word	0x08015e18
 800322c:	20002a54 	.word	0x20002a54
 8003230:	20002e5c 	.word	0x20002e5c
 8003234:	08015e34 	.word	0x08015e34

08003238 <sd_write>:

void sd_write(char* input) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	//temp fix, saving flight temp to different file
	fresult = FR_OK;
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <sd_write+0x64>)
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
	if (input[0] == 'T') {
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b54      	cmp	r3, #84	; 0x54
 800324c:	d109      	bne.n	8003262 <sd_write+0x2a>
		fresult = f_open(&fil, "flight_log_time.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND);
 800324e:	2232      	movs	r2, #50	; 0x32
 8003250:	4913      	ldr	r1, [pc, #76]	; (80032a0 <sd_write+0x68>)
 8003252:	4814      	ldr	r0, [pc, #80]	; (80032a4 <sd_write+0x6c>)
 8003254:	f00b fa08 	bl	800e668 <f_open>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <sd_write+0x64>)
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e008      	b.n	8003274 <sd_write+0x3c>
	} else {
		fresult = f_open(&fil, "flight_log_gps.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND);
 8003262:	2232      	movs	r2, #50	; 0x32
 8003264:	4910      	ldr	r1, [pc, #64]	; (80032a8 <sd_write+0x70>)
 8003266:	480f      	ldr	r0, [pc, #60]	; (80032a4 <sd_write+0x6c>)
 8003268:	f00b f9fe 	bl	800e668 <f_open>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <sd_write+0x64>)
 8003272:	701a      	strb	r2, [r3, #0]

	}
	fresult = f_puts(input, &fil);
 8003274:	490b      	ldr	r1, [pc, #44]	; (80032a4 <sd_write+0x6c>)
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f00b ff2a 	bl	800f0d0 <f_puts>
 800327c:	4603      	mov	r3, r0
 800327e:	b2da      	uxtb	r2, r3
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <sd_write+0x64>)
 8003282:	701a      	strb	r2, [r3, #0]
	//cdc_Transmit("flight_log1.txt created and data written\r\n");
	fresult = f_close(&fil);
 8003284:	4807      	ldr	r0, [pc, #28]	; (80032a4 <sd_write+0x6c>)
 8003286:	f00b fdcd 	bl	800ee24 <f_close>
 800328a:	4603      	mov	r3, r0
 800328c:	461a      	mov	r2, r3
 800328e:	4b03      	ldr	r3, [pc, #12]	; (800329c <sd_write+0x64>)
 8003290:	701a      	strb	r2, [r3, #0]
	//sd_read(input);
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20002a50 	.word	0x20002a50
 80032a0:	08015e50 	.word	0x08015e50
 80032a4:	20001a20 	.word	0x20001a20
 80032a8:	08015e64 	.word	0x08015e64

080032ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <HAL_MspInit+0x4c>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <HAL_MspInit+0x4c>)
 80032bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c0:	6453      	str	r3, [r2, #68]	; 0x44
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <HAL_MspInit+0x4c>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_MspInit+0x4c>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <HAL_MspInit+0x4c>)
 80032d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032dc:	6413      	str	r3, [r2, #64]	; 0x40
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_MspInit+0x4c>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800

080032fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a19      	ldr	r2, [pc, #100]	; (8003380 <HAL_I2C_MspInit+0x84>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d12c      	bne.n	8003378 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	4b18      	ldr	r3, [pc, #96]	; (8003384 <HAL_I2C_MspInit+0x88>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4a17      	ldr	r2, [pc, #92]	; (8003384 <HAL_I2C_MspInit+0x88>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <HAL_I2C_MspInit+0x88>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800333a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800333e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003340:	2312      	movs	r3, #18
 8003342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003348:	2303      	movs	r3, #3
 800334a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800334c:	2304      	movs	r3, #4
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	4619      	mov	r1, r3
 8003356:	480c      	ldr	r0, [pc, #48]	; (8003388 <HAL_I2C_MspInit+0x8c>)
 8003358:	f000 ffde 	bl	8004318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_I2C_MspInit+0x88>)
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	4a07      	ldr	r2, [pc, #28]	; (8003384 <HAL_I2C_MspInit+0x88>)
 8003366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800336a:	6413      	str	r3, [r2, #64]	; 0x40
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_I2C_MspInit+0x88>)
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003378:	bf00      	nop
 800337a:	3728      	adds	r7, #40	; 0x28
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40005400 	.word	0x40005400
 8003384:	40023800 	.word	0x40023800
 8003388:	40020400 	.word	0x40020400

0800338c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	; 0x28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a19      	ldr	r2, [pc, #100]	; (8003410 <HAL_SPI_MspInit+0x84>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d12b      	bne.n	8003406 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	4b18      	ldr	r3, [pc, #96]	; (8003414 <HAL_SPI_MspInit+0x88>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a17      	ldr	r2, [pc, #92]	; (8003414 <HAL_SPI_MspInit+0x88>)
 80033b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <HAL_SPI_MspInit+0x88>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_SPI_MspInit+0x88>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <HAL_SPI_MspInit+0x88>)
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_SPI_MspInit+0x88>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80033e6:	2338      	movs	r3, #56	; 0x38
 80033e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f2:	2303      	movs	r3, #3
 80033f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033f6:	2306      	movs	r3, #6
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4619      	mov	r1, r3
 8003400:	4805      	ldr	r0, [pc, #20]	; (8003418 <HAL_SPI_MspInit+0x8c>)
 8003402:	f000 ff89 	bl	8004318 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003406:	bf00      	nop
 8003408:	3728      	adds	r7, #40	; 0x28
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40003c00 	.word	0x40003c00
 8003414:	40023800 	.word	0x40023800
 8003418:	40020400 	.word	0x40020400

0800341c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08c      	sub	sp, #48	; 0x30
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003424:	f107 031c 	add.w	r3, r7, #28
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a61      	ldr	r2, [pc, #388]	; (80035c0 <HAL_UART_MspInit+0x1a4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d15b      	bne.n	80034f6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	4b60      	ldr	r3, [pc, #384]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	4a5f      	ldr	r2, [pc, #380]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 8003448:	f043 0310 	orr.w	r3, r3, #16
 800344c:	6453      	str	r3, [r2, #68]	; 0x44
 800344e:	4b5d      	ldr	r3, [pc, #372]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003476:	23c0      	movs	r3, #192	; 0xc0
 8003478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003482:	2303      	movs	r3, #3
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003486:	2307      	movs	r3, #7
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	f107 031c 	add.w	r3, r7, #28
 800348e:	4619      	mov	r1, r3
 8003490:	484d      	ldr	r0, [pc, #308]	; (80035c8 <HAL_UART_MspInit+0x1ac>)
 8003492:	f000 ff41 	bl	8004318 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003496:	4b4d      	ldr	r3, [pc, #308]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 8003498:	4a4d      	ldr	r2, [pc, #308]	; (80035d0 <HAL_UART_MspInit+0x1b4>)
 800349a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800349c:	4b4b      	ldr	r3, [pc, #300]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 800349e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034a4:	4b49      	ldr	r3, [pc, #292]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034a6:	2240      	movs	r2, #64	; 0x40
 80034a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034aa:	4b48      	ldr	r3, [pc, #288]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034b0:	4b46      	ldr	r3, [pc, #280]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034b8:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034be:	4b43      	ldr	r3, [pc, #268]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80034c4:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ca:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034cc:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034d2:	4b3e      	ldr	r3, [pc, #248]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034d8:	483c      	ldr	r0, [pc, #240]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034da:	f000 fbad 	bl	8003c38 <HAL_DMA_Init>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80034e4:	f7ff fddc 	bl	80030a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a38      	ldr	r2, [pc, #224]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034ec:	639a      	str	r2, [r3, #56]	; 0x38
 80034ee:	4a37      	ldr	r2, [pc, #220]	; (80035cc <HAL_UART_MspInit+0x1b0>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034f4:	e05f      	b.n	80035b6 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a36      	ldr	r2, [pc, #216]	; (80035d4 <HAL_UART_MspInit+0x1b8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d15a      	bne.n	80035b6 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	4a2e      	ldr	r2, [pc, #184]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 800350a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350e:	6413      	str	r3, [r2, #64]	; 0x40
 8003510:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	4a27      	ldr	r2, [pc, #156]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6313      	str	r3, [r2, #48]	; 0x30
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_UART_MspInit+0x1a8>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003538:	230c      	movs	r3, #12
 800353a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353c:	2302      	movs	r3, #2
 800353e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003544:	2303      	movs	r3, #3
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003548:	2307      	movs	r3, #7
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	4619      	mov	r1, r3
 8003552:	4821      	ldr	r0, [pc, #132]	; (80035d8 <HAL_UART_MspInit+0x1bc>)
 8003554:	f000 fee0 	bl	8004318 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003558:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 800355a:	4a21      	ldr	r2, [pc, #132]	; (80035e0 <HAL_UART_MspInit+0x1c4>)
 800355c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 8003560:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003564:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 800356e:	2200      	movs	r2, #0
 8003570:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 8003574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003578:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 800357c:	2200      	movs	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003580:	4b16      	ldr	r3, [pc, #88]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 8003582:	2200      	movs	r2, #0
 8003584:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 8003588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800358c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 8003590:	2200      	movs	r2, #0
 8003592:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 8003596:	2200      	movs	r2, #0
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800359a:	4810      	ldr	r0, [pc, #64]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 800359c:	f000 fb4c 	bl	8003c38 <HAL_DMA_Init>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80035a6:	f7ff fd7b 	bl	80030a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 80035ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_UART_MspInit+0x1c0>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80035b6:	bf00      	nop
 80035b8:	3730      	adds	r7, #48	; 0x30
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40011000 	.word	0x40011000
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40020400 	.word	0x40020400
 80035cc:	200008e4 	.word	0x200008e4
 80035d0:	400264b8 	.word	0x400264b8
 80035d4:	40004400 	.word	0x40004400
 80035d8:	40020000 	.word	0x40020000
 80035dc:	20000944 	.word	0x20000944
 80035e0:	40026088 	.word	0x40026088

080035e4 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void) {
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
	if (Timer1 > 0) {
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <SDTimer_Handler+0x40>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <SDTimer_Handler+0x1c>
		Timer1--;
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <SDTimer_Handler+0x40>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <SDTimer_Handler+0x40>)
 80035fe:	701a      	strb	r2, [r3, #0]
	}
	if (Timer2 > 0) {
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <SDTimer_Handler+0x44>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <SDTimer_Handler+0x34>
		Timer2--;
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <SDTimer_Handler+0x44>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <SDTimer_Handler+0x44>)
 8003616:	701a      	strb	r2, [r3, #0]
	}
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20002e65 	.word	0x20002e65
 8003628:	20002e66 	.word	0x20002e66

0800362c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003630:	e7fe      	b.n	8003630 <NMI_Handler+0x4>

08003632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003636:	e7fe      	b.n	8003636 <HardFault_Handler+0x4>

08003638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800363c:	e7fe      	b.n	800363c <MemManage_Handler+0x4>

0800363e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003642:	e7fe      	b.n	8003642 <BusFault_Handler+0x4>

08003644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003648:	e7fe      	b.n	8003648 <UsageFault_Handler+0x4>

0800364a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800364a:	b480      	push	{r7}
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <SysTick_Handler+0x30>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3301      	adds	r3, #1
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <SysTick_Handler+0x30>)
 8003684:	701a      	strb	r2, [r3, #0]
  if (FatFsCnt >= 10) {
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <SysTick_Handler+0x30>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b09      	cmp	r3, #9
 800368e:	d904      	bls.n	800369a <SysTick_Handler+0x26>
	  FatFsCnt = 0;
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <SysTick_Handler+0x30>)
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8003696:	f7ff ffa5 	bl	80035e4 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800369a:	f000 f977 	bl	800398c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20002e64 	.word	0x20002e64

080036a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <DMA1_Stream5_IRQHandler+0x10>)
 80036ae:	f000 fbc9 	bl	8003e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000944 	.word	0x20000944

080036bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <OTG_FS_IRQHandler+0x10>)
 80036c2:	f002 f949 	bl	8005958 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	2000458c 	.word	0x2000458c

080036d0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80036d4:	4802      	ldr	r0, [pc, #8]	; (80036e0 <DMA2_Stream7_IRQHandler+0x10>)
 80036d6:	f000 fbb5 	bl	8003e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200008e4 	.word	0x200008e4

080036e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return 1;
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <_kill>:

int _kill(int pid, int sig)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036fe:	f00d fc5b 	bl	8010fb8 <__errno>
 8003702:	4603      	mov	r3, r0
 8003704:	2216      	movs	r2, #22
 8003706:	601a      	str	r2, [r3, #0]
  return -1;
 8003708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <_exit>:

void _exit (int status)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800371c:	f04f 31ff 	mov.w	r1, #4294967295
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ffe7 	bl	80036f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003726:	e7fe      	b.n	8003726 <_exit+0x12>

08003728 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e00a      	b.n	8003750 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800373a:	f3af 8000 	nop.w
 800373e:	4601      	mov	r1, r0
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	60ba      	str	r2, [r7, #8]
 8003746:	b2ca      	uxtb	r2, r1
 8003748:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3301      	adds	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	dbf0      	blt.n	800373a <_read+0x12>
  }

  return len;
 8003758:	687b      	ldr	r3, [r7, #4]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e009      	b.n	8003788 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	60ba      	str	r2, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	3301      	adds	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	dbf1      	blt.n	8003774 <_write+0x12>
  }
  return len;
 8003790:	687b      	ldr	r3, [r7, #4]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <_close>:

int _close(int file)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037c2:	605a      	str	r2, [r3, #4]
  return 0;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <_isatty>:

int _isatty(int file)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037da:	2301      	movs	r3, #1
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <_sbrk+0x5c>)
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <_sbrk+0x60>)
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <_sbrk+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <_sbrk+0x64>)
 8003822:	4a12      	ldr	r2, [pc, #72]	; (800386c <_sbrk+0x68>)
 8003824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <_sbrk+0x64>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	429a      	cmp	r2, r3
 8003832:	d207      	bcs.n	8003844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003834:	f00d fbc0 	bl	8010fb8 <__errno>
 8003838:	4603      	mov	r3, r0
 800383a:	220c      	movs	r2, #12
 800383c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
 8003842:	e009      	b.n	8003858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <_sbrk+0x64>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800384a:	4b07      	ldr	r3, [pc, #28]	; (8003868 <_sbrk+0x64>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	4a05      	ldr	r2, [pc, #20]	; (8003868 <_sbrk+0x64>)
 8003854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20020000 	.word	0x20020000
 8003864:	00000400 	.word	0x00000400
 8003868:	20002e68 	.word	0x20002e68
 800386c:	20004de0 	.word	0x20004de0

08003870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <SystemInit+0x20>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	4a05      	ldr	r2, [pc, #20]	; (8003890 <SystemInit+0x20>)
 800387c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003898:	f7ff ffea 	bl	8003870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800389c:	480c      	ldr	r0, [pc, #48]	; (80038d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800389e:	490d      	ldr	r1, [pc, #52]	; (80038d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038a0:	4a0d      	ldr	r2, [pc, #52]	; (80038d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038a4:	e002      	b.n	80038ac <LoopCopyDataInit>

080038a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038aa:	3304      	adds	r3, #4

080038ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038b0:	d3f9      	bcc.n	80038a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038b4:	4c0a      	ldr	r4, [pc, #40]	; (80038e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038b8:	e001      	b.n	80038be <LoopFillZerobss>

080038ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038bc:	3204      	adds	r2, #4

080038be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038c0:	d3fb      	bcc.n	80038ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038c2:	f00d fb7f 	bl	8010fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038c6:	f7ff f9b7 	bl	8002c38 <main>
  bx  lr    
 80038ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80038cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d4:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 80038d8:	08016810 	.word	0x08016810
  ldr r2, =_sbss
 80038dc:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 80038e0:	20004ddc 	.word	0x20004ddc

080038e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038e4:	e7fe      	b.n	80038e4 <ADC_IRQHandler>
	...

080038e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_Init+0x40>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <HAL_Init+0x40>)
 80038f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_Init+0x40>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <HAL_Init+0x40>)
 80038fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_Init+0x40>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a07      	ldr	r2, [pc, #28]	; (8003928 <HAL_Init+0x40>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003910:	2003      	movs	r0, #3
 8003912:	f000 f94f 	bl	8003bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003916:	200f      	movs	r0, #15
 8003918:	f000 f808 	bl	800392c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800391c:	f7ff fcc6 	bl	80032ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023c00 	.word	0x40023c00

0800392c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_InitTick+0x54>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_InitTick+0x58>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	4619      	mov	r1, r3
 800393e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003942:	fbb3 f3f1 	udiv	r3, r3, r1
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f967 	bl	8003c1e <HAL_SYSTICK_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e00e      	b.n	8003978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b0f      	cmp	r3, #15
 800395e:	d80a      	bhi.n	8003976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003960:	2200      	movs	r2, #0
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	f000 f92f 	bl	8003bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800396c:	4a06      	ldr	r2, [pc, #24]	; (8003988 <HAL_InitTick+0x5c>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000004 	.word	0x20000004
 8003984:	2000000c 	.word	0x2000000c
 8003988:	20000008 	.word	0x20000008

0800398c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_IncTick+0x20>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_IncTick+0x24>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4413      	add	r3, r2
 800399c:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <HAL_IncTick+0x24>)
 800399e:	6013      	str	r3, [r2, #0]
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	2000000c 	.word	0x2000000c
 80039b0:	20002e6c 	.word	0x20002e6c

080039b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return uwTick;
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <HAL_GetTick+0x14>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20002e6c 	.word	0x20002e6c

080039cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7ff ffee 	bl	80039b4 <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d005      	beq.n	80039f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_Delay+0x44>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039f2:	bf00      	nop
 80039f4:	f7ff ffde 	bl	80039b4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d8f7      	bhi.n	80039f4 <HAL_Delay+0x28>
  {
  }
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	2000000c 	.word	0x2000000c

08003a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__NVIC_GetPriorityGrouping+0x18>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 0307 	and.w	r3, r3, #7
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	db0b      	blt.n	8003aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4907      	ldr	r1, [pc, #28]	; (8003ab0 <__NVIC_EnableIRQ+0x38>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2001      	movs	r0, #1
 8003a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e100 	.word	0xe000e100

08003ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	db0a      	blt.n	8003ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	490c      	ldr	r1, [pc, #48]	; (8003b00 <__NVIC_SetPriority+0x4c>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	0112      	lsls	r2, r2, #4
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003adc:	e00a      	b.n	8003af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4908      	ldr	r1, [pc, #32]	; (8003b04 <__NVIC_SetPriority+0x50>)
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	3b04      	subs	r3, #4
 8003aec:	0112      	lsls	r2, r2, #4
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	440b      	add	r3, r1
 8003af2:	761a      	strb	r2, [r3, #24]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000e100 	.word	0xe000e100
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b089      	sub	sp, #36	; 0x24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f1c3 0307 	rsb	r3, r3, #7
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	bf28      	it	cs
 8003b26:	2304      	movcs	r3, #4
 8003b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d902      	bls.n	8003b38 <NVIC_EncodePriority+0x30>
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3b03      	subs	r3, #3
 8003b36:	e000      	b.n	8003b3a <NVIC_EncodePriority+0x32>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43da      	mvns	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b50:	f04f 31ff 	mov.w	r1, #4294967295
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43d9      	mvns	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	4313      	orrs	r3, r2
         );
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b80:	d301      	bcc.n	8003b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00f      	b.n	8003ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <SysTick_Config+0x40>)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b8e:	210f      	movs	r1, #15
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f7ff ff8e 	bl	8003ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <SysTick_Config+0x40>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b9e:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <SysTick_Config+0x40>)
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	e000e010 	.word	0xe000e010

08003bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff29 	bl	8003a14 <__NVIC_SetPriorityGrouping>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bdc:	f7ff ff3e 	bl	8003a5c <__NVIC_GetPriorityGrouping>
 8003be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f7ff ff8e 	bl	8003b08 <NVIC_EncodePriority>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff5d 	bl	8003ab4 <__NVIC_SetPriority>
}
 8003bfa:	bf00      	nop
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ff31 	bl	8003a78 <__NVIC_EnableIRQ>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ffa2 	bl	8003b70 <SysTick_Config>
 8003c2c:	4603      	mov	r3, r0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c44:	f7ff feb6 	bl	80039b4 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e099      	b.n	8003d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c74:	e00f      	b.n	8003c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c76:	f7ff fe9d 	bl	80039b4 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d908      	bls.n	8003c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e078      	b.n	8003d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e8      	bne.n	8003c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4b38      	ldr	r3, [pc, #224]	; (8003d90 <HAL_DMA_Init+0x158>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d107      	bne.n	8003d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0307 	bic.w	r3, r3, #7
 8003d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d117      	bne.n	8003d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fa6f 	bl	8004220 <DMA_CheckFifoParam>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2240      	movs	r2, #64	; 0x40
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d56:	2301      	movs	r3, #1
 8003d58:	e016      	b.n	8003d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa26 	bl	80041b4 <DMA_CalcBaseAndBitshift>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	223f      	movs	r2, #63	; 0x3f
 8003d72:	409a      	lsls	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	f010803f 	.word	0xf010803f

08003d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_DMA_Start_IT+0x26>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e040      	b.n	8003e3c <HAL_DMA_Start_IT+0xa8>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d12f      	bne.n	8003e2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f9b8 	bl	8004158 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	223f      	movs	r2, #63	; 0x3f
 8003dee:	409a      	lsls	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0216 	orr.w	r2, r2, #22
 8003e02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0208 	orr.w	r2, r2, #8
 8003e1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e005      	b.n	8003e3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
 8003e38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e50:	4b8e      	ldr	r3, [pc, #568]	; (800408c <HAL_DMA_IRQHandler+0x248>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a8e      	ldr	r2, [pc, #568]	; (8004090 <HAL_DMA_IRQHandler+0x24c>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	0a9b      	lsrs	r3, r3, #10
 8003e5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	2208      	movs	r2, #8
 8003e70:	409a      	lsls	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01a      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	f043 0201 	orr.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d012      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	f043 0202 	orr.w	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	2204      	movs	r2, #4
 8003eec:	409a      	lsls	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d012      	beq.n	8003f1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	2204      	movs	r2, #4
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	f043 0204 	orr.w	r2, r3, #4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	2210      	movs	r2, #16
 8003f22:	409a      	lsls	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d043      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d03c      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	2210      	movs	r2, #16
 8003f40:	409a      	lsls	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d018      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d108      	bne.n	8003f74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d024      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
 8003f72:	e01f      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01b      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
 8003f84:	e016      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d107      	bne.n	8003fa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0208 	bic.w	r2, r2, #8
 8003fa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	2220      	movs	r2, #32
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 808f 	beq.w	80040e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8087 	beq.w	80040e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	2220      	movs	r2, #32
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d136      	bne.n	800405c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0216 	bic.w	r2, r2, #22
 8003ffc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800400c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d103      	bne.n	800401e <HAL_DMA_IRQHandler+0x1da>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0208 	bic.w	r2, r2, #8
 800402c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	223f      	movs	r2, #63	; 0x3f
 8004034:	409a      	lsls	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404e:	2b00      	cmp	r3, #0
 8004050:	d07e      	beq.n	8004150 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
        }
        return;
 800405a:	e079      	b.n	8004150 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01d      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10d      	bne.n	8004094 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	2b00      	cmp	r3, #0
 800407e:	d031      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
 8004088:	e02c      	b.n	80040e4 <HAL_DMA_IRQHandler+0x2a0>
 800408a:	bf00      	nop
 800408c:	20000004 	.word	0x20000004
 8004090:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d023      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
 80040a4:	e01e      	b.n	80040e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10f      	bne.n	80040d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0210 	bic.w	r2, r2, #16
 80040c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d032      	beq.n	8004152 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d022      	beq.n	800413e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2205      	movs	r2, #5
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	3301      	adds	r3, #1
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	429a      	cmp	r2, r3
 800411a:	d307      	bcc.n	800412c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f2      	bne.n	8004110 <HAL_DMA_IRQHandler+0x2cc>
 800412a:	e000      	b.n	800412e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800412c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	4798      	blx	r3
 800414e:	e000      	b.n	8004152 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004150:	bf00      	nop
    }
  }
}
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004174:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d108      	bne.n	8004198 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004196:	e007      	b.n	80041a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3b10      	subs	r3, #16
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <DMA_CalcBaseAndBitshift+0x64>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ce:	4a13      	ldr	r2, [pc, #76]	; (800421c <DMA_CalcBaseAndBitshift+0x68>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d909      	bls.n	80041f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	659a      	str	r2, [r3, #88]	; 0x58
 80041f4:	e007      	b.n	8004206 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	aaaaaaab 	.word	0xaaaaaaab
 800421c:	08015f40 	.word	0x08015f40

08004220 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d11f      	bne.n	800427a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d856      	bhi.n	80042ee <DMA_CheckFifoParam+0xce>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <DMA_CheckFifoParam+0x28>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004259 	.word	0x08004259
 800424c:	0800426b 	.word	0x0800426b
 8004250:	08004259 	.word	0x08004259
 8004254:	080042ef 	.word	0x080042ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d046      	beq.n	80042f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e043      	b.n	80042f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004272:	d140      	bne.n	80042f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004278:	e03d      	b.n	80042f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	d121      	bne.n	80042c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b03      	cmp	r3, #3
 8004288:	d837      	bhi.n	80042fa <DMA_CheckFifoParam+0xda>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <DMA_CheckFifoParam+0x70>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042a7 	.word	0x080042a7
 8004298:	080042a1 	.word	0x080042a1
 800429c:	080042b9 	.word	0x080042b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      break;
 80042a4:	e030      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d025      	beq.n	80042fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b6:	e022      	b.n	80042fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c0:	d11f      	bne.n	8004302 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042c6:	e01c      	b.n	8004302 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d903      	bls.n	80042d6 <DMA_CheckFifoParam+0xb6>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d003      	beq.n	80042dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042d4:	e018      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
      break;
 80042da:	e015      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      break;
 80042ec:	e00b      	b.n	8004306 <DMA_CheckFifoParam+0xe6>
      break;
 80042ee:	bf00      	nop
 80042f0:	e00a      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
 80042f4:	e008      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
 80042f8:	e006      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042fa:	bf00      	nop
 80042fc:	e004      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042fe:	bf00      	nop
 8004300:	e002      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;   
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 8004306:	bf00      	nop
    }
  } 
  
  return status; 
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop

08004318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e159      	b.n	80045e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004334:	2201      	movs	r2, #1
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	f040 8148 	bne.w	80045e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d005      	beq.n	800436a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004366:	2b02      	cmp	r3, #2
 8004368:	d130      	bne.n	80043cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a0:	2201      	movs	r2, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 0201 	and.w	r2, r3, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d017      	beq.n	8004408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	2203      	movs	r2, #3
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d123      	bne.n	800445c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	220f      	movs	r2, #15
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	08da      	lsrs	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3208      	adds	r2, #8
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	2203      	movs	r2, #3
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80a2 	beq.w	80045e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b57      	ldr	r3, [pc, #348]	; (8004600 <HAL_GPIO_Init+0x2e8>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	4a56      	ldr	r2, [pc, #344]	; (8004600 <HAL_GPIO_Init+0x2e8>)
 80044a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ac:	6453      	str	r3, [r2, #68]	; 0x44
 80044ae:	4b54      	ldr	r3, [pc, #336]	; (8004600 <HAL_GPIO_Init+0x2e8>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ba:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_GPIO_Init+0x2ec>)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	3302      	adds	r3, #2
 80044c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	220f      	movs	r2, #15
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a49      	ldr	r2, [pc, #292]	; (8004608 <HAL_GPIO_Init+0x2f0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d019      	beq.n	800451a <HAL_GPIO_Init+0x202>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a48      	ldr	r2, [pc, #288]	; (800460c <HAL_GPIO_Init+0x2f4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_GPIO_Init+0x1fe>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a47      	ldr	r2, [pc, #284]	; (8004610 <HAL_GPIO_Init+0x2f8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00d      	beq.n	8004512 <HAL_GPIO_Init+0x1fa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a46      	ldr	r2, [pc, #280]	; (8004614 <HAL_GPIO_Init+0x2fc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <HAL_GPIO_Init+0x1f6>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a45      	ldr	r2, [pc, #276]	; (8004618 <HAL_GPIO_Init+0x300>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_GPIO_Init+0x1f2>
 8004506:	2304      	movs	r3, #4
 8004508:	e008      	b.n	800451c <HAL_GPIO_Init+0x204>
 800450a:	2307      	movs	r3, #7
 800450c:	e006      	b.n	800451c <HAL_GPIO_Init+0x204>
 800450e:	2303      	movs	r3, #3
 8004510:	e004      	b.n	800451c <HAL_GPIO_Init+0x204>
 8004512:	2302      	movs	r3, #2
 8004514:	e002      	b.n	800451c <HAL_GPIO_Init+0x204>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_GPIO_Init+0x204>
 800451a:	2300      	movs	r3, #0
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f002 0203 	and.w	r2, r2, #3
 8004522:	0092      	lsls	r2, r2, #2
 8004524:	4093      	lsls	r3, r2
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800452c:	4935      	ldr	r1, [pc, #212]	; (8004604 <HAL_GPIO_Init+0x2ec>)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	3302      	adds	r3, #2
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800453a:	4b38      	ldr	r3, [pc, #224]	; (800461c <HAL_GPIO_Init+0x304>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800455e:	4a2f      	ldr	r2, [pc, #188]	; (800461c <HAL_GPIO_Init+0x304>)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004564:	4b2d      	ldr	r3, [pc, #180]	; (800461c <HAL_GPIO_Init+0x304>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004588:	4a24      	ldr	r2, [pc, #144]	; (800461c <HAL_GPIO_Init+0x304>)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800458e:	4b23      	ldr	r3, [pc, #140]	; (800461c <HAL_GPIO_Init+0x304>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045b2:	4a1a      	ldr	r2, [pc, #104]	; (800461c <HAL_GPIO_Init+0x304>)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <HAL_GPIO_Init+0x304>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045dc:	4a0f      	ldr	r2, [pc, #60]	; (800461c <HAL_GPIO_Init+0x304>)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3301      	adds	r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	f67f aea2 	bls.w	8004334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3724      	adds	r7, #36	; 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40013800 	.word	0x40013800
 8004608:	40020000 	.word	0x40020000
 800460c:	40020400 	.word	0x40020400
 8004610:	40020800 	.word	0x40020800
 8004614:	40020c00 	.word	0x40020c00
 8004618:	40021000 	.word	0x40021000
 800461c:	40013c00 	.word	0x40013c00

08004620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
 800462c:	4613      	mov	r3, r2
 800462e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004630:	787b      	ldrb	r3, [r7, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800463c:	e003      	b.n	8004646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800463e:	887b      	ldrh	r3, [r7, #2]
 8004640:	041a      	lsls	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	619a      	str	r2, [r3, #24]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	460b      	mov	r3, r1
 800465c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4013      	ands	r3, r2
 800466a:	041a      	lsls	r2, r3, #16
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	43d9      	mvns	r1, r3
 8004670:	887b      	ldrh	r3, [r7, #2]
 8004672:	400b      	ands	r3, r1
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	619a      	str	r2, [r3, #24]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e12b      	b.n	80048f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fe fe24 	bl	80032fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046ec:	f002 fe70 	bl	80073d0 <HAL_RCC_GetPCLK1Freq>
 80046f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4a81      	ldr	r2, [pc, #516]	; (80048fc <HAL_I2C_Init+0x274>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d807      	bhi.n	800470c <HAL_I2C_Init+0x84>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a80      	ldr	r2, [pc, #512]	; (8004900 <HAL_I2C_Init+0x278>)
 8004700:	4293      	cmp	r3, r2
 8004702:	bf94      	ite	ls
 8004704:	2301      	movls	r3, #1
 8004706:	2300      	movhi	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e006      	b.n	800471a <HAL_I2C_Init+0x92>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a7d      	ldr	r2, [pc, #500]	; (8004904 <HAL_I2C_Init+0x27c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	bf94      	ite	ls
 8004714:	2301      	movls	r3, #1
 8004716:	2300      	movhi	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0e7      	b.n	80048f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a78      	ldr	r2, [pc, #480]	; (8004908 <HAL_I2C_Init+0x280>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	0c9b      	lsrs	r3, r3, #18
 800472c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4a6a      	ldr	r2, [pc, #424]	; (80048fc <HAL_I2C_Init+0x274>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d802      	bhi.n	800475c <HAL_I2C_Init+0xd4>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	3301      	adds	r3, #1
 800475a:	e009      	b.n	8004770 <HAL_I2C_Init+0xe8>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	4a69      	ldr	r2, [pc, #420]	; (800490c <HAL_I2C_Init+0x284>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	099b      	lsrs	r3, r3, #6
 800476e:	3301      	adds	r3, #1
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	430b      	orrs	r3, r1
 8004776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	495c      	ldr	r1, [pc, #368]	; (80048fc <HAL_I2C_Init+0x274>)
 800478c:	428b      	cmp	r3, r1
 800478e:	d819      	bhi.n	80047c4 <HAL_I2C_Init+0x13c>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e59      	subs	r1, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	fbb1 f3f3 	udiv	r3, r1, r3
 800479e:	1c59      	adds	r1, r3, #1
 80047a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047a4:	400b      	ands	r3, r1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_I2C_Init+0x138>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1e59      	subs	r1, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047be:	e051      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 80047c0:	2304      	movs	r3, #4
 80047c2:	e04f      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d111      	bne.n	80047f0 <HAL_I2C_Init+0x168>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1e58      	subs	r0, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	440b      	add	r3, r1
 80047da:	fbb0 f3f3 	udiv	r3, r0, r3
 80047de:	3301      	adds	r3, #1
 80047e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e012      	b.n	8004816 <HAL_I2C_Init+0x18e>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1e58      	subs	r0, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	0099      	lsls	r1, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	fbb0 f3f3 	udiv	r3, r0, r3
 8004806:	3301      	adds	r3, #1
 8004808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_Init+0x196>
 800481a:	2301      	movs	r3, #1
 800481c:	e022      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10e      	bne.n	8004844 <HAL_I2C_Init+0x1bc>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1e58      	subs	r0, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	440b      	add	r3, r1
 8004834:	fbb0 f3f3 	udiv	r3, r0, r3
 8004838:	3301      	adds	r3, #1
 800483a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004842:	e00f      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e58      	subs	r0, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	0099      	lsls	r1, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	fbb0 f3f3 	udiv	r3, r0, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	6809      	ldr	r1, [r1, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6911      	ldr	r1, [r2, #16]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68d2      	ldr	r2, [r2, #12]
 800489e:	4311      	orrs	r1, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	000186a0 	.word	0x000186a0
 8004900:	001e847f 	.word	0x001e847f
 8004904:	003d08ff 	.word	0x003d08ff
 8004908:	431bde83 	.word	0x431bde83
 800490c:	10624dd3 	.word	0x10624dd3

08004910 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	4608      	mov	r0, r1
 800491a:	4611      	mov	r1, r2
 800491c:	461a      	mov	r2, r3
 800491e:	4603      	mov	r3, r0
 8004920:	817b      	strh	r3, [r7, #10]
 8004922:	460b      	mov	r3, r1
 8004924:	813b      	strh	r3, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800492a:	f7ff f843 	bl	80039b4 <HAL_GetTick>
 800492e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b20      	cmp	r3, #32
 800493a:	f040 80d9 	bne.w	8004af0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2319      	movs	r3, #25
 8004944:	2201      	movs	r2, #1
 8004946:	496d      	ldr	r1, [pc, #436]	; (8004afc <HAL_I2C_Mem_Write+0x1ec>)
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fc8b 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004954:	2302      	movs	r3, #2
 8004956:	e0cc      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_I2C_Mem_Write+0x56>
 8004962:	2302      	movs	r3, #2
 8004964:	e0c5      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b01      	cmp	r3, #1
 800497a:	d007      	beq.n	800498c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2221      	movs	r2, #33	; 0x21
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2240      	movs	r2, #64	; 0x40
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a3a      	ldr	r2, [r7, #32]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a4d      	ldr	r2, [pc, #308]	; (8004b00 <HAL_I2C_Mem_Write+0x1f0>)
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ce:	88f8      	ldrh	r0, [r7, #6]
 80049d0:	893a      	ldrh	r2, [r7, #8]
 80049d2:	8979      	ldrh	r1, [r7, #10]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	4603      	mov	r3, r0
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 fac2 	bl	8004f68 <I2C_RequestMemoryWrite>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d052      	beq.n	8004a90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e081      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fd50 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d107      	bne.n	8004a16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e06b      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	781a      	ldrb	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d11b      	bne.n	8004a90 <HAL_I2C_Mem_Write+0x180>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d017      	beq.n	8004a90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	781a      	ldrb	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1aa      	bne.n	80049ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fd43 	bl	8005528 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d107      	bne.n	8004ac0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e016      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	00100002 	.word	0x00100002
 8004b00:	ffff0000 	.word	0xffff0000

08004b04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	; 0x30
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	461a      	mov	r2, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	817b      	strh	r3, [r7, #10]
 8004b16:	460b      	mov	r3, r1
 8004b18:	813b      	strh	r3, [r7, #8]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b1e:	f7fe ff49 	bl	80039b4 <HAL_GetTick>
 8004b22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	f040 8214 	bne.w	8004f5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2319      	movs	r3, #25
 8004b38:	2201      	movs	r2, #1
 8004b3a:	497b      	ldr	r1, [pc, #492]	; (8004d28 <HAL_I2C_Mem_Read+0x224>)
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fb91 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e207      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_I2C_Mem_Read+0x56>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e200      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d007      	beq.n	8004b80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2222      	movs	r2, #34	; 0x22
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2240      	movs	r2, #64	; 0x40
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4a5b      	ldr	r2, [pc, #364]	; (8004d2c <HAL_I2C_Mem_Read+0x228>)
 8004bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bc2:	88f8      	ldrh	r0, [r7, #6]
 8004bc4:	893a      	ldrh	r2, [r7, #8]
 8004bc6:	8979      	ldrh	r1, [r7, #10]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 fa5e 	bl	8005094 <I2C_RequestMemoryRead>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e1bc      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d113      	bne.n	8004c12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bea:	2300      	movs	r3, #0
 8004bec:	623b      	str	r3, [r7, #32]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	623b      	str	r3, [r7, #32]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	623b      	str	r3, [r7, #32]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e190      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d11b      	bne.n	8004c52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e170      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d11b      	bne.n	8004c92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	e150      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ca8:	e144      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	f200 80f1 	bhi.w	8004e96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d123      	bne.n	8004d04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fc79 	bl	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e145      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d02:	e117      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d14e      	bne.n	8004daa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	2200      	movs	r2, #0
 8004d14:	4906      	ldr	r1, [pc, #24]	; (8004d30 <HAL_I2C_Mem_Read+0x22c>)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 faa4 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e11a      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
 8004d26:	bf00      	nop
 8004d28:	00100002 	.word	0x00100002
 8004d2c:	ffff0000 	.word	0xffff0000
 8004d30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004da8:	e0c4      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	2200      	movs	r2, #0
 8004db2:	496c      	ldr	r1, [pc, #432]	; (8004f64 <HAL_I2C_Mem_Read+0x460>)
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fa55 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0cb      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4955      	ldr	r1, [pc, #340]	; (8004f64 <HAL_I2C_Mem_Read+0x460>)
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fa27 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e09d      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e94:	e04e      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fb8c 	bl	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e058      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d124      	bne.n	8004f34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d107      	bne.n	8004f02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f47f aeb6 	bne.w	8004caa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3728      	adds	r7, #40	; 0x28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	00010004 	.word	0x00010004

08004f68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	4608      	mov	r0, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	461a      	mov	r2, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	817b      	strh	r3, [r7, #10]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	813b      	strh	r3, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f960 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00d      	beq.n	8004fc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb8:	d103      	bne.n	8004fc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e05f      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fc6:	897b      	ldrh	r3, [r7, #10]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	492d      	ldr	r1, [pc, #180]	; (8005090 <I2C_RequestMemoryWrite+0x128>)
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f9bb 	bl	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e04c      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	6a39      	ldr	r1, [r7, #32]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa46 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b04      	cmp	r3, #4
 8005018:	d107      	bne.n	800502a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005028:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e02b      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d105      	bne.n	8005040 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005034:	893b      	ldrh	r3, [r7, #8]
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]
 800503e:	e021      	b.n	8005084 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005040:	893b      	ldrh	r3, [r7, #8]
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	b29b      	uxth	r3, r3
 8005046:	b2da      	uxtb	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005050:	6a39      	ldr	r1, [r7, #32]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fa20 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b04      	cmp	r3, #4
 8005064:	d107      	bne.n	8005076 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e005      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800507a:	893b      	ldrh	r3, [r7, #8]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	00010002 	.word	0x00010002

08005094 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	461a      	mov	r2, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	817b      	strh	r3, [r7, #10]
 80050a6:	460b      	mov	r3, r1
 80050a8:	813b      	strh	r3, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f8c2 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f4:	d103      	bne.n	80050fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e0aa      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	4952      	ldr	r1, [pc, #328]	; (8005260 <I2C_RequestMemoryRead+0x1cc>)
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f91d 	bl	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e097      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005140:	6a39      	ldr	r1, [r7, #32]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f9a8 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	2b04      	cmp	r3, #4
 8005154:	d107      	bne.n	8005166 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e076      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d105      	bne.n	800517c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005170:	893b      	ldrh	r3, [r7, #8]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	611a      	str	r2, [r3, #16]
 800517a:	e021      	b.n	80051c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800517c:	893b      	ldrh	r3, [r7, #8]
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	b29b      	uxth	r3, r3
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	6a39      	ldr	r1, [r7, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f982 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00d      	beq.n	80051b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d107      	bne.n	80051b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e050      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b6:	893b      	ldrh	r3, [r7, #8]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	6a39      	ldr	r1, [r7, #32]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f967 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00d      	beq.n	80051ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d107      	bne.n	80051e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e035      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2200      	movs	r2, #0
 8005204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f82b 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005222:	d103      	bne.n	800522c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e013      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005230:	897b      	ldrh	r3, [r7, #10]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	4906      	ldr	r1, [pc, #24]	; (8005260 <I2C_RequestMemoryRead+0x1cc>)
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f886 	bl	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	00010002 	.word	0x00010002

08005264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005274:	e048      	b.n	8005308 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d044      	beq.n	8005308 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527e:	f7fe fb99 	bl	80039b4 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d139      	bne.n	8005308 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d10d      	bne.n	80052ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	43da      	mvns	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	e00c      	b.n	80052d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	43da      	mvns	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d116      	bne.n	8005308 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e023      	b.n	8005350 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d10d      	bne.n	800532e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	43da      	mvns	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf0c      	ite	eq
 8005324:	2301      	moveq	r3, #1
 8005326:	2300      	movne	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	e00c      	b.n	8005348 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	43da      	mvns	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4013      	ands	r3, r2
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	429a      	cmp	r2, r3
 800534c:	d093      	beq.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005366:	e071      	b.n	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d123      	bne.n	80053c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005386:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005390:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	f043 0204 	orr.w	r2, r3, #4
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e067      	b.n	8005490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d041      	beq.n	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c8:	f7fe faf4 	bl	80039b4 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d302      	bcc.n	80053de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d136      	bne.n	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d10c      	bne.n	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bf14      	ite	ne
 80053fa:	2301      	movne	r3, #1
 80053fc:	2300      	moveq	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	e00b      	b.n	800541a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	43da      	mvns	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4013      	ands	r3, r2
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf14      	ite	ne
 8005414:	2301      	movne	r3, #1
 8005416:	2300      	moveq	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d016      	beq.n	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e021      	b.n	8005490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	0c1b      	lsrs	r3, r3, #16
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d10c      	bne.n	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	43da      	mvns	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	bf14      	ite	ne
 8005468:	2301      	movne	r3, #1
 800546a:	2300      	moveq	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e00b      	b.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	43da      	mvns	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4013      	ands	r3, r2
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	bf14      	ite	ne
 8005482:	2301      	movne	r3, #1
 8005484:	2300      	moveq	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	f47f af6d 	bne.w	8005368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054a4:	e034      	b.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f8e3 	bl	8005672 <I2C_IsAcknowledgeFailed>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e034      	b.n	8005520 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d028      	beq.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054be:	f7fe fa79 	bl	80039b4 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d302      	bcc.n	80054d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d11d      	bne.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b80      	cmp	r3, #128	; 0x80
 80054e0:	d016      	beq.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e007      	b.n	8005520 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551a:	2b80      	cmp	r3, #128	; 0x80
 800551c:	d1c3      	bne.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005534:	e034      	b.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f89b 	bl	8005672 <I2C_IsAcknowledgeFailed>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e034      	b.n	80055b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d028      	beq.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554e:	f7fe fa31 	bl	80039b4 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11d      	bne.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b04      	cmp	r3, #4
 8005570:	d016      	beq.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f043 0220 	orr.w	r2, r3, #32
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e007      	b.n	80055b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d1c3      	bne.n	8005536 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055c4:	e049      	b.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d119      	bne.n	8005608 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0210 	mvn.w	r2, #16
 80055dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e030      	b.n	800566a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005608:	f7fe f9d4 	bl	80039b4 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	d302      	bcc.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d11d      	bne.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d016      	beq.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e007      	b.n	800566a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d1ae      	bne.n	80055c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005688:	d11b      	bne.n	80056c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005692:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0204 	orr.w	r2, r3, #4
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e101      	b.n	80058e6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f00a f833 	bl	800f768 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2203      	movs	r2, #3
 8005706:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005710:	d102      	bne.n	8005718 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f003 fb1c 	bl	8008d5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	7c1a      	ldrb	r2, [r3, #16]
 800572a:	f88d 2000 	strb.w	r2, [sp]
 800572e:	3304      	adds	r3, #4
 8005730:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005732:	f003 f9fb 	bl	8008b2c <USB_CoreInit>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e0ce      	b.n	80058e6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2100      	movs	r1, #0
 800574e:	4618      	mov	r0, r3
 8005750:	f003 fb14 	bl	8008d7c <USB_SetCurrentMode>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e0bf      	b.n	80058e6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
 800576a:	e04a      	b.n	8005802 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800576c:	7bfa      	ldrb	r2, [r7, #15]
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	3315      	adds	r3, #21
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005780:	7bfa      	ldrb	r2, [r7, #15]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	3314      	adds	r3, #20
 8005790:	7bfa      	ldrb	r2, [r7, #15]
 8005792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005794:	7bfa      	ldrb	r2, [r7, #15]
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	b298      	uxth	r0, r3
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	332e      	adds	r3, #46	; 0x2e
 80057a8:	4602      	mov	r2, r0
 80057aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057ac:	7bfa      	ldrb	r2, [r7, #15]
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	4613      	mov	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	3318      	adds	r3, #24
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057c0:	7bfa      	ldrb	r2, [r7, #15]
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	4613      	mov	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	331c      	adds	r3, #28
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057d4:	7bfa      	ldrb	r2, [r7, #15]
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	3320      	adds	r3, #32
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057e8:	7bfa      	ldrb	r2, [r7, #15]
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	4613      	mov	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	3324      	adds	r3, #36	; 0x24
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	3301      	adds	r3, #1
 8005800:	73fb      	strb	r3, [r7, #15]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	791b      	ldrb	r3, [r3, #4]
 8005806:	7bfa      	ldrb	r2, [r7, #15]
 8005808:	429a      	cmp	r2, r3
 800580a:	d3af      	bcc.n	800576c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]
 8005810:	e044      	b.n	800589c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005812:	7bfa      	ldrb	r2, [r7, #15]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005828:	7bfa      	ldrb	r2, [r7, #15]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800583a:	7bfa      	ldrb	r2, [r7, #15]
 800583c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800583e:	7bfa      	ldrb	r2, [r7, #15]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005854:	7bfa      	ldrb	r2, [r7, #15]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800586a:	7bfa      	ldrb	r2, [r7, #15]
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005880:	7bfa      	ldrb	r2, [r7, #15]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	3301      	adds	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	791b      	ldrb	r3, [r3, #4]
 80058a0:	7bfa      	ldrb	r2, [r7, #15]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d3b5      	bcc.n	8005812 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	7c1a      	ldrb	r2, [r3, #16]
 80058ae:	f88d 2000 	strb.w	r2, [sp]
 80058b2:	3304      	adds	r3, #4
 80058b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058b6:	f003 faad 	bl	8008e14 <USB_DevInit>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e00c      	b.n	80058e6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f004 faf1 	bl	8009ec6 <USB_DevDisconnect>

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <HAL_PCD_Start+0x1c>
 8005906:	2302      	movs	r3, #2
 8005908:	e022      	b.n	8005950 <HAL_PCD_Start+0x62>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005922:	2b01      	cmp	r3, #1
 8005924:	d105      	bne.n	8005932 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f003 f9fe 	bl	8008d38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f004 fa9f 	bl	8009e84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005958:	b590      	push	{r4, r7, lr}
 800595a:	b08d      	sub	sp, #52	; 0x34
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f004 fb5d 	bl	800a02e <USB_GetMode>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 848c 	bne.w	8006294 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f004 fac1 	bl	8009f08 <USB_ReadInterrupts>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8482 	beq.w	8006292 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f004 faae 	bl	8009f08 <USB_ReadInterrupts>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d107      	bne.n	80059c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f002 0202 	and.w	r2, r2, #2
 80059c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f004 fa9c 	bl	8009f08 <USB_ReadInterrupts>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b10      	cmp	r3, #16
 80059d8:	d161      	bne.n	8005a9e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699a      	ldr	r2, [r3, #24]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0210 	bic.w	r2, r2, #16
 80059e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f003 020f 	and.w	r2, r3, #15
 80059f6:	4613      	mov	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	4413      	add	r3, r2
 8005a06:	3304      	adds	r3, #4
 8005a08:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	0c5b      	lsrs	r3, r3, #17
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d124      	bne.n	8005a60 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d035      	beq.n	8005a8e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	6a38      	ldr	r0, [r7, #32]
 8005a36:	f004 f8d3 	bl	8009be0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a46:	441a      	add	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	091b      	lsrs	r3, r3, #4
 8005a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a58:	441a      	add	r2, r3
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	615a      	str	r2, [r3, #20]
 8005a5e:	e016      	b.n	8005a8e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	0c5b      	lsrs	r3, r3, #17
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	2b06      	cmp	r3, #6
 8005a6a:	d110      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005a72:	2208      	movs	r2, #8
 8005a74:	4619      	mov	r1, r3
 8005a76:	6a38      	ldr	r0, [r7, #32]
 8005a78:	f004 f8b2 	bl	8009be0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a88:	441a      	add	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699a      	ldr	r2, [r3, #24]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0210 	orr.w	r2, r2, #16
 8005a9c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f004 fa30 	bl	8009f08 <USB_ReadInterrupts>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ab2:	f040 80a7 	bne.w	8005c04 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f004 fa35 	bl	8009f2e <USB_ReadDevAllOutEpInterrupt>
 8005ac4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005ac6:	e099      	b.n	8005bfc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 808e 	beq.w	8005bf0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	4611      	mov	r1, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f004 fa59 	bl	8009f96 <USB_ReadDevOutEPInterrupt>
 8005ae4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00c      	beq.n	8005b0a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	461a      	mov	r2, r3
 8005afe:	2301      	movs	r3, #1
 8005b00:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fea1 	bl	800684c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00c      	beq.n	8005b2e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	461a      	mov	r2, r3
 8005b22:	2308      	movs	r3, #8
 8005b24:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 ff77 	bl	8006a1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b44:	461a      	mov	r2, r3
 8005b46:	2310      	movs	r3, #16
 8005b48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d030      	beq.n	8005bb6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5c:	2b80      	cmp	r3, #128	; 0x80
 8005b5e:	d109      	bne.n	8005b74 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b72:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4413      	add	r3, r2
 8005b86:	3304      	adds	r3, #4
 8005b88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	78db      	ldrb	r3, [r3, #3]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d108      	bne.n	8005ba4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f009 fede 	bl	800f960 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2320      	movs	r3, #32
 8005bd0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	461a      	mov	r2, r3
 8005bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f47f af62 	bne.w	8005ac8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f004 f97d 	bl	8009f08 <USB_ReadInterrupts>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c18:	f040 80db 	bne.w	8005dd2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f004 f99e 	bl	8009f62 <USB_ReadDevAllInEpInterrupt>
 8005c26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005c2c:	e0cd      	b.n	8005dca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80c2 	beq.w	8005dbe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	4611      	mov	r1, r2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f004 f9c4 	bl	8009fd2 <USB_ReadDevInEPInterrupt>
 8005c4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d057      	beq.n	8005d06 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	69f9      	ldr	r1, [r7, #28]
 8005c72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c76:	4013      	ands	r3, r2
 8005c78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	461a      	mov	r2, r3
 8005c88:	2301      	movs	r3, #1
 8005c8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	799b      	ldrb	r3, [r3, #6]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d132      	bne.n	8005cfa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c98:	4613      	mov	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	3320      	adds	r3, #32
 8005ca4:	6819      	ldr	r1, [r3, #0]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005caa:	4613      	mov	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4403      	add	r3, r0
 8005cb4:	331c      	adds	r3, #28
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4419      	add	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4403      	add	r3, r0
 8005cc8:	3320      	adds	r3, #32
 8005cca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d113      	bne.n	8005cfa <HAL_PCD_IRQHandler+0x3a2>
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	3324      	adds	r3, #36	; 0x24
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d108      	bne.n	8005cfa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	f004 f9cb 	bl	800a090 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f009 fdb2 	bl	800f86a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2308      	movs	r3, #8
 8005d20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	461a      	mov	r2, r3
 8005d3a:	2310      	movs	r3, #16
 8005d3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d008      	beq.n	8005d5a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	461a      	mov	r2, r3
 8005d56:	2340      	movs	r3, #64	; 0x40
 8005d58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d023      	beq.n	8005dac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d66:	6a38      	ldr	r0, [r7, #32]
 8005d68:	f003 f9b8 	bl	80090dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	4613      	mov	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	3310      	adds	r3, #16
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	78db      	ldrb	r3, [r3, #3]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d108      	bne.n	8005d9a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f009 fdf5 	bl	800f984 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da6:	461a      	mov	r2, r3
 8005da8:	2302      	movs	r3, #2
 8005daa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fcbb 	bl	8006734 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f47f af2e 	bne.w	8005c2e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f004 f896 	bl	8009f08 <USB_ReadInterrupts>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de6:	d122      	bne.n	8005e2e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d108      	bne.n	8005e18 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e0e:	2100      	movs	r1, #0
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fea1 	bl	8006b58 <HAL_PCDEx_LPM_Callback>
 8005e16:	e002      	b.n	8005e1e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f009 fd93 	bl	800f944 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f004 f868 	bl	8009f08 <USB_ReadInterrupts>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e42:	d112      	bne.n	8005e6a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d102      	bne.n	8005e5a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f009 fd4f 	bl	800f8f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005e68:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f004 f84a 	bl	8009f08 <USB_ReadInterrupts>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	f040 80b7 	bne.w	8005ff0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2110      	movs	r1, #16
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f003 f91d 	bl	80090dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ea6:	e046      	b.n	8005f36 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	3301      	adds	r3, #1
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	791b      	ldrb	r3, [r3, #4]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d3b2      	bcc.n	8005ea8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f50:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005f54:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	7bdb      	ldrb	r3, [r3, #15]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d016      	beq.n	8005f8c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f6e:	f043 030b 	orr.w	r3, r3, #11
 8005f72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f84:	f043 030b 	orr.w	r3, r3, #11
 8005f88:	6453      	str	r3, [r2, #68]	; 0x44
 8005f8a:	e015      	b.n	8005fb8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f9e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005fa2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb2:	f043 030b 	orr.w	r3, r3, #11
 8005fb6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f004 f858 	bl	800a090 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f003 ff87 	bl	8009f08 <USB_ReadInterrupts>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006004:	d123      	bne.n	800604e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f004 f81d 	bl	800a04a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f003 f8da 	bl	80091ce <USB_GetDevSpeed>
 800601a:	4603      	mov	r3, r0
 800601c:	461a      	mov	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681c      	ldr	r4, [r3, #0]
 8006026:	f001 f9c7 	bl	80073b8 <HAL_RCC_GetHCLKFreq>
 800602a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006030:	461a      	mov	r2, r3
 8006032:	4620      	mov	r0, r4
 8006034:	f002 fdde 	bl	8008bf4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f009 fc3e 	bl	800f8ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695a      	ldr	r2, [r3, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800604c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f003 ff58 	bl	8009f08 <USB_ReadInterrupts>
 8006058:	4603      	mov	r3, r0
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b08      	cmp	r3, #8
 8006060:	d10a      	bne.n	8006078 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f009 fc1b 	bl	800f89e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f002 0208 	and.w	r2, r2, #8
 8006076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f003 ff43 	bl	8009f08 <USB_ReadInterrupts>
 8006082:	4603      	mov	r3, r0
 8006084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006088:	2b80      	cmp	r3, #128	; 0x80
 800608a:	d123      	bne.n	80060d4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006098:	2301      	movs	r3, #1
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
 800609c:	e014      	b.n	80060c8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	f203 2357 	addw	r3, r3, #599	; 0x257
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d105      	bne.n	80060c2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fb08 	bl	80066d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	3301      	adds	r3, #1
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	791b      	ldrb	r3, [r3, #4]
 80060cc:	461a      	mov	r2, r3
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d3e4      	bcc.n	800609e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f003 ff15 	bl	8009f08 <USB_ReadInterrupts>
 80060de:	4603      	mov	r3, r0
 80060e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060e8:	d13c      	bne.n	8006164 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060ea:	2301      	movs	r3, #1
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
 80060ee:	e02b      	b.n	8006148 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006104:	4613      	mov	r3, r2
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	3318      	adds	r3, #24
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d115      	bne.n	8006142 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006116:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006118:	2b00      	cmp	r3, #0
 800611a:	da12      	bge.n	8006142 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006120:	4613      	mov	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	3317      	adds	r3, #23
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006138:	b2db      	uxtb	r3, r3
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fac8 	bl	80066d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	3301      	adds	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	791b      	ldrb	r3, [r3, #4]
 800614c:	461a      	mov	r2, r3
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	4293      	cmp	r3, r2
 8006152:	d3cd      	bcc.n	80060f0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695a      	ldr	r2, [r3, #20]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006162:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f003 fecd 	bl	8009f08 <USB_ReadInterrupts>
 800616e:	4603      	mov	r3, r0
 8006170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006178:	d156      	bne.n	8006228 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800617a:	2301      	movs	r3, #1
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
 800617e:	e045      	b.n	800620c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006194:	4613      	mov	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d12e      	bne.n	8006206 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	da2b      	bge.n	8006206 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80061ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061be:	429a      	cmp	r2, r3
 80061c0:	d121      	bne.n	8006206 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c6:	4613      	mov	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80061d4:	2201      	movs	r2, #1
 80061d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006202:	6053      	str	r3, [r2, #4]
            break;
 8006204:	e008      	b.n	8006218 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	3301      	adds	r3, #1
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	791b      	ldrb	r3, [r3, #4]
 8006210:	461a      	mov	r2, r3
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	4293      	cmp	r3, r2
 8006216:	d3b3      	bcc.n	8006180 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4618      	mov	r0, r3
 800622e:	f003 fe6b 	bl	8009f08 <USB_ReadInterrupts>
 8006232:	4603      	mov	r3, r0
 8006234:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623c:	d10a      	bne.n	8006254 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f009 fbb2 	bl	800f9a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f003 fe55 	bl	8009f08 <USB_ReadInterrupts>
 800625e:	4603      	mov	r3, r0
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b04      	cmp	r3, #4
 8006266:	d115      	bne.n	8006294 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f009 fba2 	bl	800f9c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6859      	ldr	r1, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]
 8006290:	e000      	b.n	8006294 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006292:	bf00      	nop
    }
  }
}
 8006294:	3734      	adds	r7, #52	; 0x34
 8006296:	46bd      	mov	sp, r7
 8006298:	bd90      	pop	{r4, r7, pc}

0800629a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_PCD_SetAddress+0x1a>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e012      	b.n	80062da <HAL_PCD_SetAddress+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	4611      	mov	r1, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f003 fdb4 	bl	8009e38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	4608      	mov	r0, r1
 80062ec:	4611      	mov	r1, r2
 80062ee:	461a      	mov	r2, r3
 80062f0:	4603      	mov	r3, r0
 80062f2:	70fb      	strb	r3, [r7, #3]
 80062f4:	460b      	mov	r3, r1
 80062f6:	803b      	strh	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006304:	2b00      	cmp	r3, #0
 8006306:	da0f      	bge.n	8006328 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	f003 020f 	and.w	r2, r3, #15
 800630e:	4613      	mov	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	3310      	adds	r3, #16
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4413      	add	r3, r2
 800631c:	3304      	adds	r3, #4
 800631e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	705a      	strb	r2, [r3, #1]
 8006326:	e00f      	b.n	8006348 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	4613      	mov	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4413      	add	r3, r2
 800633e:	3304      	adds	r3, #4
 8006340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006354:	883a      	ldrh	r2, [r7, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	78ba      	ldrb	r2, [r7, #2]
 800635e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006372:	78bb      	ldrb	r3, [r7, #2]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d102      	bne.n	800637e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_PCD_EP_Open+0xaa>
 8006388:	2302      	movs	r3, #2
 800638a:	e00e      	b.n	80063aa <HAL_PCD_EP_Open+0xc8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68f9      	ldr	r1, [r7, #12]
 800639a:	4618      	mov	r0, r3
 800639c:	f002 ff3c 	bl	8009218 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80063a8:	7afb      	ldrb	r3, [r7, #11]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	da0f      	bge.n	80063e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	f003 020f 	and.w	r2, r3, #15
 80063cc:	4613      	mov	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	3310      	adds	r3, #16
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	4413      	add	r3, r2
 80063da:	3304      	adds	r3, #4
 80063dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	705a      	strb	r2, [r3, #1]
 80063e4:	e00f      	b.n	8006406 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	f003 020f 	and.w	r2, r3, #15
 80063ec:	4613      	mov	r3, r2
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	4413      	add	r3, r2
 80063fc:	3304      	adds	r3, #4
 80063fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	f003 030f 	and.w	r3, r3, #15
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_PCD_EP_Close+0x6e>
 800641c:	2302      	movs	r3, #2
 800641e:	e00e      	b.n	800643e <HAL_PCD_EP_Close+0x8c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68f9      	ldr	r1, [r7, #12]
 800642e:	4618      	mov	r0, r3
 8006430:	f002 ff7a 	bl	8009328 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b086      	sub	sp, #24
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	460b      	mov	r3, r1
 8006454:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006456:	7afb      	ldrb	r3, [r7, #11]
 8006458:	f003 020f 	and.w	r2, r3, #15
 800645c:	4613      	mov	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	3304      	adds	r3, #4
 800646e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2200      	movs	r2, #0
 8006480:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2200      	movs	r2, #0
 8006486:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	b2da      	uxtb	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	799b      	ldrb	r3, [r3, #6]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d102      	bne.n	80064a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	799b      	ldrb	r3, [r3, #6]
 80064aa:	461a      	mov	r2, r3
 80064ac:	6979      	ldr	r1, [r7, #20]
 80064ae:	f003 f817 	bl	80094e0 <USB_EPStartXfer>

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	f003 020f 	and.w	r2, r3, #15
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	4613      	mov	r3, r2
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80064de:	681b      	ldr	r3, [r3, #0]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	460b      	mov	r3, r1
 80064fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	f003 020f 	and.w	r2, r3, #15
 8006502:	4613      	mov	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	3310      	adds	r3, #16
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	3304      	adds	r3, #4
 8006512:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2200      	movs	r2, #0
 8006524:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2201      	movs	r2, #1
 800652a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	b2da      	uxtb	r2, r3
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	799b      	ldrb	r3, [r3, #6]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d102      	bne.n	8006546 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	799b      	ldrb	r3, [r3, #6]
 800654e:	461a      	mov	r2, r3
 8006550:	6979      	ldr	r1, [r7, #20]
 8006552:	f002 ffc5 	bl	80094e0 <USB_EPStartXfer>

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	7912      	ldrb	r2, [r2, #4]
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e04f      	b.n	800661e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800657e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006582:	2b00      	cmp	r3, #0
 8006584:	da0f      	bge.n	80065a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	f003 020f 	and.w	r2, r3, #15
 800658c:	4613      	mov	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	3310      	adds	r3, #16
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	3304      	adds	r3, #4
 800659c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	705a      	strb	r2, [r3, #1]
 80065a4:	e00d      	b.n	80065c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	4613      	mov	r3, r2
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4413      	add	r3, r2
 80065b8:	3304      	adds	r3, #4
 80065ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_PCD_EP_SetStall+0x82>
 80065de:	2302      	movs	r3, #2
 80065e0:	e01d      	b.n	800661e <HAL_PCD_EP_SetStall+0xbe>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f003 fb4d 	bl	8009c90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	7999      	ldrb	r1, [r3, #6]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800660e:	461a      	mov	r2, r3
 8006610:	f003 fd3e 	bl	800a090 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	7912      	ldrb	r2, [r2, #4]
 800663c:	4293      	cmp	r3, r2
 800663e:	d901      	bls.n	8006644 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e042      	b.n	80066ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006648:	2b00      	cmp	r3, #0
 800664a:	da0f      	bge.n	800666c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	f003 020f 	and.w	r2, r3, #15
 8006652:	4613      	mov	r3, r2
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	3310      	adds	r3, #16
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	3304      	adds	r3, #4
 8006662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	705a      	strb	r2, [r3, #1]
 800666a:	e00f      	b.n	800668c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	f003 020f 	and.w	r2, r3, #15
 8006672:	4613      	mov	r3, r2
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	4413      	add	r3, r2
 8006682:	3304      	adds	r3, #4
 8006684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	b2da      	uxtb	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_PCD_EP_ClrStall+0x86>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e00e      	b.n	80066ca <HAL_PCD_EP_ClrStall+0xa4>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68f9      	ldr	r1, [r7, #12]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f003 fb56 	bl	8009d6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80066de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	da0c      	bge.n	8006700 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	4613      	mov	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	3310      	adds	r3, #16
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4413      	add	r3, r2
 80066fa:	3304      	adds	r3, #4
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	e00c      	b.n	800671a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	f003 020f 	and.w	r2, r3, #15
 8006706:	4613      	mov	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	4413      	add	r3, r2
 8006716:	3304      	adds	r3, #4
 8006718:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68f9      	ldr	r1, [r7, #12]
 8006720:	4618      	mov	r0, r3
 8006722:	f003 f975 	bl	8009a10 <USB_EPStopXfer>
 8006726:	4603      	mov	r3, r0
 8006728:	72fb      	strb	r3, [r7, #11]

  return ret;
 800672a:	7afb      	ldrb	r3, [r7, #11]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	; 0x28
 8006738:	af02      	add	r7, sp, #8
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	4613      	mov	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	3310      	adds	r3, #16
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	4413      	add	r3, r2
 8006758:	3304      	adds	r3, #4
 800675a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	695a      	ldr	r2, [r3, #20]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	429a      	cmp	r2, r3
 8006766:	d901      	bls.n	800676c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e06b      	b.n	8006844 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	691a      	ldr	r2, [r3, #16]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	429a      	cmp	r2, r3
 8006780:	d902      	bls.n	8006788 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	3303      	adds	r3, #3
 800678c:	089b      	lsrs	r3, r3, #2
 800678e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006790:	e02a      	b.n	80067e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691a      	ldr	r2, [r3, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d902      	bls.n	80067ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	3303      	adds	r3, #3
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	68d9      	ldr	r1, [r3, #12]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	4603      	mov	r3, r0
 80067ca:	6978      	ldr	r0, [r7, #20]
 80067cc:	f003 f9ca 	bl	8009b64 <USB_WritePacket>

    ep->xfer_buff  += len;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	441a      	add	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	695a      	ldr	r2, [r3, #20]
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	441a      	add	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d809      	bhi.n	8006812 <PCD_WriteEmptyTxFifo+0xde>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006806:	429a      	cmp	r2, r3
 8006808:	d203      	bcs.n	8006812 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1bf      	bne.n	8006792 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	429a      	cmp	r2, r3
 800681c:	d811      	bhi.n	8006842 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	2201      	movs	r2, #1
 8006826:	fa02 f303 	lsl.w	r3, r2, r3
 800682a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	43db      	mvns	r3, r3
 8006838:	6939      	ldr	r1, [r7, #16]
 800683a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800683e:	4013      	ands	r3, r2
 8006840:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	333c      	adds	r3, #60	; 0x3c
 8006864:	3304      	adds	r3, #4
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	799b      	ldrb	r3, [r3, #6]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d17b      	bne.n	800697a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d015      	beq.n	80068b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	4a61      	ldr	r2, [pc, #388]	; (8006a14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	f240 80b9 	bls.w	8006a08 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 80b3 	beq.w	8006a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ae:	461a      	mov	r2, r3
 80068b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b4:	6093      	str	r3, [r2, #8]
 80068b6:	e0a7      	b.n	8006a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d009      	beq.n	80068d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ce:	461a      	mov	r2, r3
 80068d0:	2320      	movs	r3, #32
 80068d2:	6093      	str	r3, [r2, #8]
 80068d4:	e098      	b.n	8006a08 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f040 8093 	bne.w	8006a08 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	4a4b      	ldr	r2, [pc, #300]	; (8006a14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d90f      	bls.n	800690a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	461a      	mov	r2, r3
 8006902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006906:	6093      	str	r3, [r2, #8]
 8006908:	e07e      	b.n	8006a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	4413      	add	r3, r2
 800691c:	3304      	adds	r3, #4
 800691e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	0159      	lsls	r1, r3, #5
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	440b      	add	r3, r1
 800692c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d114      	bne.n	800696c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006954:	461a      	mov	r2, r3
 8006956:	2101      	movs	r1, #1
 8006958:	f003 fb9a 	bl	800a090 <USB_EP0_OutStart>
 800695c:	e006      	b.n	800696c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	441a      	add	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f008 ff5e 	bl	800f834 <HAL_PCD_DataOutStageCallback>
 8006978:	e046      	b.n	8006a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4a26      	ldr	r2, [pc, #152]	; (8006a18 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d124      	bne.n	80069cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006998:	461a      	mov	r2, r3
 800699a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800699e:	6093      	str	r3, [r2, #8]
 80069a0:	e032      	b.n	8006a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	461a      	mov	r2, r3
 80069ba:	2320      	movs	r3, #32
 80069bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f008 ff35 	bl	800f834 <HAL_PCD_DataOutStageCallback>
 80069ca:	e01d      	b.n	8006a08 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d114      	bne.n	80069fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	4613      	mov	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d108      	bne.n	80069fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80069f4:	461a      	mov	r2, r3
 80069f6:	2100      	movs	r1, #0
 80069f8:	f003 fb4a 	bl	800a090 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f008 ff16 	bl	800f834 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	4f54300a 	.word	0x4f54300a
 8006a18:	4f54310a 	.word	0x4f54310a

08006a1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	333c      	adds	r3, #60	; 0x3c
 8006a34:	3304      	adds	r3, #4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4a15      	ldr	r2, [pc, #84]	; (8006aa4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d90e      	bls.n	8006a70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f008 fecd 	bl	800f810 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4a0a      	ldr	r2, [pc, #40]	; (8006aa4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d90c      	bls.n	8006a98 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	799b      	ldrb	r3, [r3, #6]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d108      	bne.n	8006a98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006a90:	461a      	mov	r2, r3
 8006a92:	2101      	movs	r1, #1
 8006a94:	f003 fafc 	bl	800a090 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	4f54300a 	.word	0x4f54300a

08006aa8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d107      	bne.n	8006ad6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006ac6:	883b      	ldrh	r3, [r7, #0]
 8006ac8:	0419      	lsls	r1, r3, #16
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ad4:	e028      	b.n	8006b28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	0c1b      	lsrs	r3, r3, #16
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73fb      	strb	r3, [r7, #15]
 8006ae8:	e00d      	b.n	8006b06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	3340      	adds	r3, #64	; 0x40
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	0c1b      	lsrs	r3, r3, #16
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	4413      	add	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	3301      	adds	r3, #1
 8006b04:	73fb      	strb	r3, [r7, #15]
 8006b06:	7bfa      	ldrb	r2, [r7, #15]
 8006b08:	78fb      	ldrb	r3, [r7, #3]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d3ec      	bcc.n	8006aea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006b10:	883b      	ldrh	r3, [r7, #0]
 8006b12:	0418      	lsls	r0, r3, #16
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6819      	ldr	r1, [r3, #0]
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	4302      	orrs	r2, r0
 8006b20:	3340      	adds	r3, #64	; 0x40
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	887a      	ldrh	r2, [r7, #2]
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e267      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d075      	beq.n	8006c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b8e:	4b88      	ldr	r3, [pc, #544]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 030c 	and.w	r3, r3, #12
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d00c      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b9a:	4b85      	ldr	r3, [pc, #532]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d112      	bne.n	8006bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ba6:	4b82      	ldr	r3, [pc, #520]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb2:	d10b      	bne.n	8006bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb4:	4b7e      	ldr	r3, [pc, #504]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d05b      	beq.n	8006c78 <HAL_RCC_OscConfig+0x108>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d157      	bne.n	8006c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e242      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd4:	d106      	bne.n	8006be4 <HAL_RCC_OscConfig+0x74>
 8006bd6:	4b76      	ldr	r3, [pc, #472]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a75      	ldr	r2, [pc, #468]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	e01d      	b.n	8006c20 <HAL_RCC_OscConfig+0xb0>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bec:	d10c      	bne.n	8006c08 <HAL_RCC_OscConfig+0x98>
 8006bee:	4b70      	ldr	r3, [pc, #448]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a6f      	ldr	r2, [pc, #444]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	4b6d      	ldr	r3, [pc, #436]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a6c      	ldr	r2, [pc, #432]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	e00b      	b.n	8006c20 <HAL_RCC_OscConfig+0xb0>
 8006c08:	4b69      	ldr	r3, [pc, #420]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a68      	ldr	r2, [pc, #416]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	4b66      	ldr	r3, [pc, #408]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a65      	ldr	r2, [pc, #404]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d013      	beq.n	8006c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c28:	f7fc fec4 	bl	80039b4 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c30:	f7fc fec0 	bl	80039b4 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b64      	cmp	r3, #100	; 0x64
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e207      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c42:	4b5b      	ldr	r3, [pc, #364]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0f0      	beq.n	8006c30 <HAL_RCC_OscConfig+0xc0>
 8006c4e:	e014      	b.n	8006c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c50:	f7fc feb0 	bl	80039b4 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c58:	f7fc feac 	bl	80039b4 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b64      	cmp	r3, #100	; 0x64
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e1f3      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c6a:	4b51      	ldr	r3, [pc, #324]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0xe8>
 8006c76:	e000      	b.n	8006c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d063      	beq.n	8006d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c86:	4b4a      	ldr	r3, [pc, #296]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 030c 	and.w	r3, r3, #12
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00b      	beq.n	8006caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c92:	4b47      	ldr	r3, [pc, #284]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d11c      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c9e:	4b44      	ldr	r3, [pc, #272]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d116      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006caa:	4b41      	ldr	r3, [pc, #260]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x152>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d001      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e1c7      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc2:	4b3b      	ldr	r3, [pc, #236]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	4937      	ldr	r1, [pc, #220]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cd6:	e03a      	b.n	8006d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d020      	beq.n	8006d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ce0:	4b34      	ldr	r3, [pc, #208]	; (8006db4 <HAL_RCC_OscConfig+0x244>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce6:	f7fc fe65 	bl	80039b4 <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cec:	e008      	b.n	8006d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cee:	f7fc fe61 	bl	80039b4 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e1a8      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d00:	4b2b      	ldr	r3, [pc, #172]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0f0      	beq.n	8006cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d0c:	4b28      	ldr	r3, [pc, #160]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	4925      	ldr	r1, [pc, #148]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	600b      	str	r3, [r1, #0]
 8006d20:	e015      	b.n	8006d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d22:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <HAL_RCC_OscConfig+0x244>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7fc fe44 	bl	80039b4 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d30:	f7fc fe40 	bl	80039b4 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e187      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d42:	4b1b      	ldr	r3, [pc, #108]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f0      	bne.n	8006d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0308 	and.w	r3, r3, #8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d036      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d62:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <HAL_RCC_OscConfig+0x248>)
 8006d64:	2201      	movs	r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d68:	f7fc fe24 	bl	80039b4 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d70:	f7fc fe20 	bl	80039b4 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e167      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d82:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <HAL_RCC_OscConfig+0x240>)
 8006d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0x200>
 8006d8e:	e01b      	b.n	8006dc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d90:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <HAL_RCC_OscConfig+0x248>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d96:	f7fc fe0d 	bl	80039b4 <HAL_GetTick>
 8006d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d9c:	e00e      	b.n	8006dbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d9e:	f7fc fe09 	bl	80039b4 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d907      	bls.n	8006dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e150      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
 8006db0:	40023800 	.word	0x40023800
 8006db4:	42470000 	.word	0x42470000
 8006db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dbc:	4b88      	ldr	r3, [pc, #544]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1ea      	bne.n	8006d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8097 	beq.w	8006f04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dda:	4b81      	ldr	r3, [pc, #516]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10f      	bne.n	8006e06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006de6:	2300      	movs	r3, #0
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	4b7d      	ldr	r3, [pc, #500]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	4a7c      	ldr	r2, [pc, #496]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df4:	6413      	str	r3, [r2, #64]	; 0x40
 8006df6:	4b7a      	ldr	r3, [pc, #488]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfe:	60bb      	str	r3, [r7, #8]
 8006e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e06:	4b77      	ldr	r3, [pc, #476]	; (8006fe4 <HAL_RCC_OscConfig+0x474>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d118      	bne.n	8006e44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e12:	4b74      	ldr	r3, [pc, #464]	; (8006fe4 <HAL_RCC_OscConfig+0x474>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a73      	ldr	r2, [pc, #460]	; (8006fe4 <HAL_RCC_OscConfig+0x474>)
 8006e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e1e:	f7fc fdc9 	bl	80039b4 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e26:	f7fc fdc5 	bl	80039b4 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e10c      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e38:	4b6a      	ldr	r3, [pc, #424]	; (8006fe4 <HAL_RCC_OscConfig+0x474>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0f0      	beq.n	8006e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d106      	bne.n	8006e5a <HAL_RCC_OscConfig+0x2ea>
 8006e4c:	4b64      	ldr	r3, [pc, #400]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e50:	4a63      	ldr	r2, [pc, #396]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	6713      	str	r3, [r2, #112]	; 0x70
 8006e58:	e01c      	b.n	8006e94 <HAL_RCC_OscConfig+0x324>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	2b05      	cmp	r3, #5
 8006e60:	d10c      	bne.n	8006e7c <HAL_RCC_OscConfig+0x30c>
 8006e62:	4b5f      	ldr	r3, [pc, #380]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	4a5e      	ldr	r2, [pc, #376]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006e68:	f043 0304 	orr.w	r3, r3, #4
 8006e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6e:	4b5c      	ldr	r3, [pc, #368]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e72:	4a5b      	ldr	r2, [pc, #364]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7a:	e00b      	b.n	8006e94 <HAL_RCC_OscConfig+0x324>
 8006e7c:	4b58      	ldr	r3, [pc, #352]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e80:	4a57      	ldr	r2, [pc, #348]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006e82:	f023 0301 	bic.w	r3, r3, #1
 8006e86:	6713      	str	r3, [r2, #112]	; 0x70
 8006e88:	4b55      	ldr	r3, [pc, #340]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	4a54      	ldr	r2, [pc, #336]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006e8e:	f023 0304 	bic.w	r3, r3, #4
 8006e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d015      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e9c:	f7fc fd8a 	bl	80039b4 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea2:	e00a      	b.n	8006eba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ea4:	f7fc fd86 	bl	80039b4 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e0cb      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eba:	4b49      	ldr	r3, [pc, #292]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0ee      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x334>
 8006ec6:	e014      	b.n	8006ef2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ec8:	f7fc fd74 	bl	80039b4 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ece:	e00a      	b.n	8006ee6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ed0:	f7fc fd70 	bl	80039b4 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e0b5      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ee6:	4b3e      	ldr	r3, [pc, #248]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1ee      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d105      	bne.n	8006f04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ef8:	4b39      	ldr	r3, [pc, #228]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	4a38      	ldr	r2, [pc, #224]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 80a1 	beq.w	8007050 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f0e:	4b34      	ldr	r3, [pc, #208]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 030c 	and.w	r3, r3, #12
 8006f16:	2b08      	cmp	r3, #8
 8006f18:	d05c      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d141      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f22:	4b31      	ldr	r3, [pc, #196]	; (8006fe8 <HAL_RCC_OscConfig+0x478>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f28:	f7fc fd44 	bl	80039b4 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f30:	f7fc fd40 	bl	80039b4 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e087      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f42:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1f0      	bne.n	8006f30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69da      	ldr	r2, [r3, #28]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	019b      	lsls	r3, r3, #6
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	3b01      	subs	r3, #1
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	061b      	lsls	r3, r3, #24
 8006f72:	491b      	ldr	r1, [pc, #108]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f78:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <HAL_RCC_OscConfig+0x478>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7e:	f7fc fd19 	bl	80039b4 <HAL_GetTick>
 8006f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f84:	e008      	b.n	8006f98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f86:	f7fc fd15 	bl	80039b4 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d901      	bls.n	8006f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e05c      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f98:	4b11      	ldr	r3, [pc, #68]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0f0      	beq.n	8006f86 <HAL_RCC_OscConfig+0x416>
 8006fa4:	e054      	b.n	8007050 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa6:	4b10      	ldr	r3, [pc, #64]	; (8006fe8 <HAL_RCC_OscConfig+0x478>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fac:	f7fc fd02 	bl	80039b4 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb4:	f7fc fcfe 	bl	80039b4 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e045      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fc6:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <HAL_RCC_OscConfig+0x470>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f0      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x444>
 8006fd2:	e03d      	b.n	8007050 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d107      	bne.n	8006fec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e038      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	40007000 	.word	0x40007000
 8006fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fec:	4b1b      	ldr	r3, [pc, #108]	; (800705c <HAL_RCC_OscConfig+0x4ec>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d028      	beq.n	800704c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007004:	429a      	cmp	r2, r3
 8007006:	d121      	bne.n	800704c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007012:	429a      	cmp	r2, r3
 8007014:	d11a      	bne.n	800704c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800701c:	4013      	ands	r3, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007024:	4293      	cmp	r3, r2
 8007026:	d111      	bne.n	800704c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	3b01      	subs	r3, #1
 8007036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007038:	429a      	cmp	r2, r3
 800703a:	d107      	bne.n	800704c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007048:	429a      	cmp	r2, r3
 800704a:	d001      	beq.n	8007050 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e000      	b.n	8007052 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	40023800 	.word	0x40023800

08007060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e0cc      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007074:	4b68      	ldr	r3, [pc, #416]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d90c      	bls.n	800709c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007082:	4b65      	ldr	r3, [pc, #404]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708a:	4b63      	ldr	r3, [pc, #396]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d001      	beq.n	800709c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e0b8      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d020      	beq.n	80070ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070b4:	4b59      	ldr	r3, [pc, #356]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	4a58      	ldr	r2, [pc, #352]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070cc:	4b53      	ldr	r3, [pc, #332]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	4a52      	ldr	r2, [pc, #328]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070d8:	4b50      	ldr	r3, [pc, #320]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	494d      	ldr	r1, [pc, #308]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d044      	beq.n	8007180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d107      	bne.n	800710e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fe:	4b47      	ldr	r3, [pc, #284]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d119      	bne.n	800713e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e07f      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d003      	beq.n	800711e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800711a:	2b03      	cmp	r3, #3
 800711c:	d107      	bne.n	800712e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800711e:	4b3f      	ldr	r3, [pc, #252]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e06f      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712e:	4b3b      	ldr	r3, [pc, #236]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e067      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800713e:	4b37      	ldr	r3, [pc, #220]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f023 0203 	bic.w	r2, r3, #3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	4934      	ldr	r1, [pc, #208]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 800714c:	4313      	orrs	r3, r2
 800714e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007150:	f7fc fc30 	bl	80039b4 <HAL_GetTick>
 8007154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007156:	e00a      	b.n	800716e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007158:	f7fc fc2c 	bl	80039b4 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	f241 3288 	movw	r2, #5000	; 0x1388
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e04f      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716e:	4b2b      	ldr	r3, [pc, #172]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 020c 	and.w	r2, r3, #12
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	429a      	cmp	r2, r3
 800717e:	d1eb      	bne.n	8007158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007180:	4b25      	ldr	r3, [pc, #148]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d20c      	bcs.n	80071a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718e:	4b22      	ldr	r3, [pc, #136]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007196:	4b20      	ldr	r3, [pc, #128]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d001      	beq.n	80071a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e032      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d008      	beq.n	80071c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b4:	4b19      	ldr	r3, [pc, #100]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	4916      	ldr	r1, [pc, #88]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071d2:	4b12      	ldr	r3, [pc, #72]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	490e      	ldr	r1, [pc, #56]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071e6:	f000 f821 	bl	800722c <HAL_RCC_GetSysClockFreq>
 80071ea:	4602      	mov	r2, r0
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	091b      	lsrs	r3, r3, #4
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	490a      	ldr	r1, [pc, #40]	; (8007220 <HAL_RCC_ClockConfig+0x1c0>)
 80071f8:	5ccb      	ldrb	r3, [r1, r3]
 80071fa:	fa22 f303 	lsr.w	r3, r2, r3
 80071fe:	4a09      	ldr	r2, [pc, #36]	; (8007224 <HAL_RCC_ClockConfig+0x1c4>)
 8007200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007202:	4b09      	ldr	r3, [pc, #36]	; (8007228 <HAL_RCC_ClockConfig+0x1c8>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f7fc fb90 	bl	800392c <HAL_InitTick>

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40023c00 	.word	0x40023c00
 800721c:	40023800 	.word	0x40023800
 8007220:	08015f28 	.word	0x08015f28
 8007224:	20000004 	.word	0x20000004
 8007228:	20000008 	.word	0x20000008

0800722c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800722c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007230:	b090      	sub	sp, #64	; 0x40
 8007232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	637b      	str	r3, [r7, #52]	; 0x34
 8007238:	2300      	movs	r3, #0
 800723a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800723c:	2300      	movs	r3, #0
 800723e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007244:	4b59      	ldr	r3, [pc, #356]	; (80073ac <HAL_RCC_GetSysClockFreq+0x180>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f003 030c 	and.w	r3, r3, #12
 800724c:	2b08      	cmp	r3, #8
 800724e:	d00d      	beq.n	800726c <HAL_RCC_GetSysClockFreq+0x40>
 8007250:	2b08      	cmp	r3, #8
 8007252:	f200 80a1 	bhi.w	8007398 <HAL_RCC_GetSysClockFreq+0x16c>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_RCC_GetSysClockFreq+0x34>
 800725a:	2b04      	cmp	r3, #4
 800725c:	d003      	beq.n	8007266 <HAL_RCC_GetSysClockFreq+0x3a>
 800725e:	e09b      	b.n	8007398 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007260:	4b53      	ldr	r3, [pc, #332]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007262:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007264:	e09b      	b.n	800739e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007266:	4b53      	ldr	r3, [pc, #332]	; (80073b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007268:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800726a:	e098      	b.n	800739e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800726c:	4b4f      	ldr	r3, [pc, #316]	; (80073ac <HAL_RCC_GetSysClockFreq+0x180>)
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007276:	4b4d      	ldr	r3, [pc, #308]	; (80073ac <HAL_RCC_GetSysClockFreq+0x180>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d028      	beq.n	80072d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007282:	4b4a      	ldr	r3, [pc, #296]	; (80073ac <HAL_RCC_GetSysClockFreq+0x180>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	099b      	lsrs	r3, r3, #6
 8007288:	2200      	movs	r2, #0
 800728a:	623b      	str	r3, [r7, #32]
 800728c:	627a      	str	r2, [r7, #36]	; 0x24
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007294:	2100      	movs	r1, #0
 8007296:	4b47      	ldr	r3, [pc, #284]	; (80073b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007298:	fb03 f201 	mul.w	r2, r3, r1
 800729c:	2300      	movs	r3, #0
 800729e:	fb00 f303 	mul.w	r3, r0, r3
 80072a2:	4413      	add	r3, r2
 80072a4:	4a43      	ldr	r2, [pc, #268]	; (80073b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80072a6:	fba0 1202 	umull	r1, r2, r0, r2
 80072aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072ac:	460a      	mov	r2, r1
 80072ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80072b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b2:	4413      	add	r3, r2
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b8:	2200      	movs	r2, #0
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	61fa      	str	r2, [r7, #28]
 80072be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072c6:	f7f9 fd37 	bl	8000d38 <__aeabi_uldivmod>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4613      	mov	r3, r2
 80072d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072d2:	e053      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072d4:	4b35      	ldr	r3, [pc, #212]	; (80073ac <HAL_RCC_GetSysClockFreq+0x180>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	099b      	lsrs	r3, r3, #6
 80072da:	2200      	movs	r2, #0
 80072dc:	613b      	str	r3, [r7, #16]
 80072de:	617a      	str	r2, [r7, #20]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80072e6:	f04f 0b00 	mov.w	fp, #0
 80072ea:	4652      	mov	r2, sl
 80072ec:	465b      	mov	r3, fp
 80072ee:	f04f 0000 	mov.w	r0, #0
 80072f2:	f04f 0100 	mov.w	r1, #0
 80072f6:	0159      	lsls	r1, r3, #5
 80072f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072fc:	0150      	lsls	r0, r2, #5
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	ebb2 080a 	subs.w	r8, r2, sl
 8007306:	eb63 090b 	sbc.w	r9, r3, fp
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	f04f 0300 	mov.w	r3, #0
 8007312:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007316:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800731a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800731e:	ebb2 0408 	subs.w	r4, r2, r8
 8007322:	eb63 0509 	sbc.w	r5, r3, r9
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	00eb      	lsls	r3, r5, #3
 8007330:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007334:	00e2      	lsls	r2, r4, #3
 8007336:	4614      	mov	r4, r2
 8007338:	461d      	mov	r5, r3
 800733a:	eb14 030a 	adds.w	r3, r4, sl
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	eb45 030b 	adc.w	r3, r5, fp
 8007344:	607b      	str	r3, [r7, #4]
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007352:	4629      	mov	r1, r5
 8007354:	028b      	lsls	r3, r1, #10
 8007356:	4621      	mov	r1, r4
 8007358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800735c:	4621      	mov	r1, r4
 800735e:	028a      	lsls	r2, r1, #10
 8007360:	4610      	mov	r0, r2
 8007362:	4619      	mov	r1, r3
 8007364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007366:	2200      	movs	r2, #0
 8007368:	60bb      	str	r3, [r7, #8]
 800736a:	60fa      	str	r2, [r7, #12]
 800736c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007370:	f7f9 fce2 	bl	8000d38 <__aeabi_uldivmod>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4613      	mov	r3, r2
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800737c:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <HAL_RCC_GetSysClockFreq+0x180>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	0c1b      	lsrs	r3, r3, #16
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	3301      	adds	r3, #1
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800738c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	fbb2 f3f3 	udiv	r3, r2, r3
 8007394:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007396:	e002      	b.n	800739e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800739a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800739c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3740      	adds	r7, #64	; 0x40
 80073a4:	46bd      	mov	sp, r7
 80073a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073aa:	bf00      	nop
 80073ac:	40023800 	.word	0x40023800
 80073b0:	00f42400 	.word	0x00f42400
 80073b4:	017d7840 	.word	0x017d7840

080073b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073bc:	4b03      	ldr	r3, [pc, #12]	; (80073cc <HAL_RCC_GetHCLKFreq+0x14>)
 80073be:	681b      	ldr	r3, [r3, #0]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20000004 	.word	0x20000004

080073d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073d4:	f7ff fff0 	bl	80073b8 <HAL_RCC_GetHCLKFreq>
 80073d8:	4602      	mov	r2, r0
 80073da:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	0a9b      	lsrs	r3, r3, #10
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	4903      	ldr	r1, [pc, #12]	; (80073f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073e6:	5ccb      	ldrb	r3, [r1, r3]
 80073e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40023800 	.word	0x40023800
 80073f4:	08015f38 	.word	0x08015f38

080073f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073fc:	f7ff ffdc 	bl	80073b8 <HAL_RCC_GetHCLKFreq>
 8007400:	4602      	mov	r2, r0
 8007402:	4b05      	ldr	r3, [pc, #20]	; (8007418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	0b5b      	lsrs	r3, r3, #13
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	4903      	ldr	r1, [pc, #12]	; (800741c <HAL_RCC_GetPCLK2Freq+0x24>)
 800740e:	5ccb      	ldrb	r3, [r1, r3]
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007414:	4618      	mov	r0, r3
 8007416:	bd80      	pop	{r7, pc}
 8007418:	40023800 	.word	0x40023800
 800741c:	08015f38 	.word	0x08015f38

08007420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e07b      	b.n	800752a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d108      	bne.n	800744c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007442:	d009      	beq.n	8007458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	61da      	str	r2, [r3, #28]
 800744a:	e005      	b.n	8007458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fb ff8a 	bl	800338c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074dc:	ea42 0103 	orr.w	r1, r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	0c1b      	lsrs	r3, r3, #16
 80074f6:	f003 0104 	and.w	r1, r3, #4
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	f003 0210 	and.w	r2, r3, #16
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b088      	sub	sp, #32
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_SPI_Transmit+0x22>
 8007550:	2302      	movs	r3, #2
 8007552:	e12d      	b.n	80077b0 <HAL_SPI_Transmit+0x27e>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800755c:	f7fc fa2a 	bl	80039b4 <HAL_GetTick>
 8007560:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b01      	cmp	r3, #1
 8007570:	d002      	beq.n	8007578 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007572:	2302      	movs	r3, #2
 8007574:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007576:	e116      	b.n	80077a6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_SPI_Transmit+0x52>
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007588:	e10d      	b.n	80077a6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2203      	movs	r2, #3
 800758e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	88fa      	ldrh	r2, [r7, #6]
 80075a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d0:	d10f      	bne.n	80075f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	d007      	beq.n	8007610 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800760e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007618:	d14f      	bne.n	80076ba <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <HAL_SPI_Transmit+0xf6>
 8007622:	8afb      	ldrh	r3, [r7, #22]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d142      	bne.n	80076ae <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762c:	881a      	ldrh	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	1c9a      	adds	r2, r3, #2
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800764c:	e02f      	b.n	80076ae <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b02      	cmp	r3, #2
 800765a:	d112      	bne.n	8007682 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007660:	881a      	ldrh	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766c:	1c9a      	adds	r2, r3, #2
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007676:	b29b      	uxth	r3, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007680:	e015      	b.n	80076ae <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007682:	f7fc f997 	bl	80039b4 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d803      	bhi.n	800769a <HAL_SPI_Transmit+0x168>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d102      	bne.n	80076a0 <HAL_SPI_Transmit+0x16e>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80076ac:	e07b      	b.n	80077a6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1ca      	bne.n	800764e <HAL_SPI_Transmit+0x11c>
 80076b8:	e050      	b.n	800775c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_SPI_Transmit+0x196>
 80076c2:	8afb      	ldrh	r3, [r7, #22]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d144      	bne.n	8007752 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	330c      	adds	r3, #12
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076ee:	e030      	b.n	8007752 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d113      	bne.n	8007726 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	330c      	adds	r3, #12
 8007708:	7812      	ldrb	r2, [r2, #0]
 800770a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	86da      	strh	r2, [r3, #54]	; 0x36
 8007724:	e015      	b.n	8007752 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007726:	f7fc f945 	bl	80039b4 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	429a      	cmp	r2, r3
 8007734:	d803      	bhi.n	800773e <HAL_SPI_Transmit+0x20c>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773c:	d102      	bne.n	8007744 <HAL_SPI_Transmit+0x212>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d106      	bne.n	8007752 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007750:	e029      	b.n	80077a6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007756:	b29b      	uxth	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1c9      	bne.n	80076f0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fa61 	bl	8007c28 <SPI_EndRxTxTransaction>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2220      	movs	r2, #32
 8007770:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10a      	bne.n	8007790 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800777a:	2300      	movs	r3, #0
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	77fb      	strb	r3, [r7, #31]
 800779c:	e003      	b.n	80077a6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3720      	adds	r7, #32
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08c      	sub	sp, #48	; 0x30
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077c6:	2301      	movs	r3, #1
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d101      	bne.n	80077de <HAL_SPI_TransmitReceive+0x26>
 80077da:	2302      	movs	r3, #2
 80077dc:	e198      	b.n	8007b10 <HAL_SPI_TransmitReceive+0x358>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077e6:	f7fc f8e5 	bl	80039b4 <HAL_GetTick>
 80077ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077fc:	887b      	ldrh	r3, [r7, #2]
 80077fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007804:	2b01      	cmp	r3, #1
 8007806:	d00f      	beq.n	8007828 <HAL_SPI_TransmitReceive+0x70>
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800780e:	d107      	bne.n	8007820 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d103      	bne.n	8007820 <HAL_SPI_TransmitReceive+0x68>
 8007818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800781c:	2b04      	cmp	r3, #4
 800781e:	d003      	beq.n	8007828 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007820:	2302      	movs	r3, #2
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007826:	e16d      	b.n	8007b04 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d005      	beq.n	800783a <HAL_SPI_TransmitReceive+0x82>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <HAL_SPI_TransmitReceive+0x82>
 8007834:	887b      	ldrh	r3, [r7, #2]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d103      	bne.n	8007842 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007840:	e160      	b.n	8007b04 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b04      	cmp	r3, #4
 800784c:	d003      	beq.n	8007856 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2205      	movs	r2, #5
 8007852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	887a      	ldrh	r2, [r7, #2]
 8007866:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	887a      	ldrh	r2, [r7, #2]
 800786c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	887a      	ldrh	r2, [r7, #2]
 8007878:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	887a      	ldrh	r2, [r7, #2]
 800787e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d007      	beq.n	80078aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078b2:	d17c      	bne.n	80079ae <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <HAL_SPI_TransmitReceive+0x10a>
 80078bc:	8b7b      	ldrh	r3, [r7, #26]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d16a      	bne.n	8007998 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	881a      	ldrh	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	1c9a      	adds	r2, r3, #2
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078e6:	e057      	b.n	8007998 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d11b      	bne.n	800792e <HAL_SPI_TransmitReceive+0x176>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d016      	beq.n	800792e <HAL_SPI_TransmitReceive+0x176>
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	2b01      	cmp	r3, #1
 8007904:	d113      	bne.n	800792e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790a:	881a      	ldrh	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007916:	1c9a      	adds	r2, r3, #2
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007920:	b29b      	uxth	r3, r3
 8007922:	3b01      	subs	r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b01      	cmp	r3, #1
 800793a:	d119      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x1b8>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d014      	beq.n	8007970 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	b292      	uxth	r2, r2
 8007952:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	1c9a      	adds	r2, r3, #2
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800796c:	2301      	movs	r3, #1
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007970:	f7fc f820 	bl	80039b4 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800797c:	429a      	cmp	r2, r3
 800797e:	d80b      	bhi.n	8007998 <HAL_SPI_TransmitReceive+0x1e0>
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007986:	d007      	beq.n	8007998 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007996:	e0b5      	b.n	8007b04 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1a2      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x130>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d19d      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x130>
 80079ac:	e080      	b.n	8007ab0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_SPI_TransmitReceive+0x204>
 80079b6:	8b7b      	ldrh	r3, [r7, #26]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d16f      	bne.n	8007a9c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	330c      	adds	r3, #12
 80079c6:	7812      	ldrb	r2, [r2, #0]
 80079c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079e2:	e05b      	b.n	8007a9c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d11c      	bne.n	8007a2c <HAL_SPI_TransmitReceive+0x274>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d017      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x274>
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d114      	bne.n	8007a2c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	330c      	adds	r3, #12
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d119      	bne.n	8007a6e <HAL_SPI_TransmitReceive+0x2b6>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d014      	beq.n	8007a6e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a6e:	f7fb ffa1 	bl	80039b4 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d803      	bhi.n	8007a86 <HAL_SPI_TransmitReceive+0x2ce>
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a84:	d102      	bne.n	8007a8c <HAL_SPI_TransmitReceive+0x2d4>
 8007a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d107      	bne.n	8007a9c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007a9a:	e033      	b.n	8007b04 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d19e      	bne.n	80079e4 <HAL_SPI_TransmitReceive+0x22c>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d199      	bne.n	80079e4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 f8b7 	bl	8007c28 <SPI_EndRxTxTransaction>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d006      	beq.n	8007ace <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007acc:	e01a      	b.n	8007b04 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	617b      	str	r3, [r7, #20]
 8007aea:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afa:	e003      	b.n	8007b04 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3730      	adds	r7, #48	; 0x30
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b28:	f7fb ff44 	bl	80039b4 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	1a9b      	subs	r3, r3, r2
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4413      	add	r3, r2
 8007b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b38:	f7fb ff3c 	bl	80039b4 <HAL_GetTick>
 8007b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b3e:	4b39      	ldr	r3, [pc, #228]	; (8007c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	015b      	lsls	r3, r3, #5
 8007b44:	0d1b      	lsrs	r3, r3, #20
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	fb02 f303 	mul.w	r3, r2, r3
 8007b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b4e:	e054      	b.n	8007bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b56:	d050      	beq.n	8007bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b58:	f7fb ff2c 	bl	80039b4 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	69fa      	ldr	r2, [r7, #28]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d902      	bls.n	8007b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d13d      	bne.n	8007bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b86:	d111      	bne.n	8007bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b90:	d004      	beq.n	8007b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9a:	d107      	bne.n	8007bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bb4:	d10f      	bne.n	8007bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e017      	b.n	8007c1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4013      	ands	r3, r2
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	bf0c      	ite	eq
 8007c0a:	2301      	moveq	r3, #1
 8007c0c:	2300      	movne	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d19b      	bne.n	8007b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000004 	.word	0x20000004

08007c28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	2102      	movs	r1, #2
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff ff6a 	bl	8007b18 <SPI_WaitFlagStateUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4e:	f043 0220 	orr.w	r2, r3, #32
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e032      	b.n	8007cc0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <SPI_EndRxTxTransaction+0xa0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a1b      	ldr	r2, [pc, #108]	; (8007ccc <SPI_EndRxTxTransaction+0xa4>)
 8007c60:	fba2 2303 	umull	r2, r3, r2, r3
 8007c64:	0d5b      	lsrs	r3, r3, #21
 8007c66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c6a:	fb02 f303 	mul.w	r3, r2, r3
 8007c6e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c78:	d112      	bne.n	8007ca0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	2180      	movs	r1, #128	; 0x80
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f7ff ff47 	bl	8007b18 <SPI_WaitFlagStateUntilTimeout>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d016      	beq.n	8007cbe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c94:	f043 0220 	orr.w	r2, r3, #32
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e00f      	b.n	8007cc0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb6:	2b80      	cmp	r3, #128	; 0x80
 8007cb8:	d0f2      	beq.n	8007ca0 <SPI_EndRxTxTransaction+0x78>
 8007cba:	e000      	b.n	8007cbe <SPI_EndRxTxTransaction+0x96>
        break;
 8007cbc:	bf00      	nop
  }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000004 	.word	0x20000004
 8007ccc:	165e9f81 	.word	0x165e9f81

08007cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e042      	b.n	8007d68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d106      	bne.n	8007cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fb fb90 	bl	800341c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2224      	movs	r2, #36	; 0x24
 8007d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fc95 	bl	8008644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	695a      	ldr	r2, [r3, #20]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08c      	sub	sp, #48	; 0x30
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d156      	bne.n	8007e38 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <HAL_UART_Transmit_DMA+0x26>
 8007d90:	88fb      	ldrh	r3, [r7, #6]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e04f      	b.n	8007e3a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	88fa      	ldrh	r2, [r7, #6]
 8007da4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	88fa      	ldrh	r2, [r7, #6]
 8007daa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2221      	movs	r2, #33	; 0x21
 8007db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <HAL_UART_Transmit_DMA+0xd4>)
 8007dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	4a20      	ldr	r2, [pc, #128]	; (8007e48 <HAL_UART_Transmit_DMA+0xd8>)
 8007dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <HAL_UART_Transmit_DMA+0xdc>)
 8007dd0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007dda:	f107 0308 	add.w	r3, r7, #8
 8007dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	6819      	ldr	r1, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3304      	adds	r3, #4
 8007dee:	461a      	mov	r2, r3
 8007df0:	88fb      	ldrh	r3, [r7, #6]
 8007df2:	f7fb ffcf 	bl	8003d94 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dfe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3314      	adds	r3, #20
 8007e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	617b      	str	r3, [r7, #20]
   return(result);
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3314      	adds	r3, #20
 8007e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e20:	627a      	str	r2, [r7, #36]	; 0x24
 8007e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	6a39      	ldr	r1, [r7, #32]
 8007e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e5      	bne.n	8007e00 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3730      	adds	r7, #48	; 0x30
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	08008145 	.word	0x08008145
 8007e48:	080081df 	.word	0x080081df
 8007e4c:	08008363 	.word	0x08008363

08007e50 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d112      	bne.n	8007e90 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <HAL_UART_Receive_DMA+0x26>
 8007e70:	88fb      	ldrh	r3, [r7, #6]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e00b      	b.n	8007e92 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e80:	88fb      	ldrh	r3, [r7, #6]
 8007e82:	461a      	mov	r2, r3
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 fab6 	bl	80083f8 <UART_Start_Receive_DMA>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	e000      	b.n	8007e92 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007e90:	2302      	movs	r3, #2
  }
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b09d      	sub	sp, #116	; 0x74
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	66fb      	str	r3, [r7, #108]	; 0x6c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb0:	2b80      	cmp	r3, #128	; 0x80
 8007eb2:	bf0c      	ite	eq
 8007eb4:	2301      	moveq	r3, #1
 8007eb6:	2300      	movne	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b21      	cmp	r3, #33	; 0x21
 8007ec6:	d11c      	bne.n	8007f02 <HAL_UART_DMAPause+0x68>
 8007ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d019      	beq.n	8007f02 <HAL_UART_DMAPause+0x68>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3314      	adds	r3, #20
 8007ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3314      	adds	r3, #20
 8007eec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007eee:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ef0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e5      	bne.n	8007ece <HAL_UART_DMAPause+0x34>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b40      	cmp	r3, #64	; 0x40
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b22      	cmp	r3, #34	; 0x22
 8007f22:	d150      	bne.n	8007fc6 <HAL_UART_DMAPause+0x12c>
 8007f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d04d      	beq.n	8007fc6 <HAL_UART_DMAPause+0x12c>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	330c      	adds	r3, #12
 8007f30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f40:	667b      	str	r3, [r7, #100]	; 0x64
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	330c      	adds	r3, #12
 8007f48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f4a:	647a      	str	r2, [r7, #68]	; 0x44
 8007f4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e5      	bne.n	8007f2a <HAL_UART_DMAPause+0x90>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3314      	adds	r3, #20
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	f023 0301 	bic.w	r3, r3, #1
 8007f74:	663b      	str	r3, [r7, #96]	; 0x60
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3314      	adds	r3, #20
 8007f7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f7e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e5      	bne.n	8007f5e <HAL_UART_DMAPause+0xc4>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3314      	adds	r3, #20
 8007f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3314      	adds	r3, #20
 8007fb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fb2:	61fa      	str	r2, [r7, #28]
 8007fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb6:	69b9      	ldr	r1, [r7, #24]
 8007fb8:	69fa      	ldr	r2, [r7, #28]
 8007fba:	e841 2300 	strex	r3, r2, [r1]
 8007fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1e5      	bne.n	8007f92 <HAL_UART_DMAPause+0xf8>
  }

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3774      	adds	r7, #116	; 0x74
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b09d      	sub	sp, #116	; 0x74
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b21      	cmp	r3, #33	; 0x21
 8007fe6:	d119      	bne.n	800801c <HAL_UART_DMAResume+0x48>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3314      	adds	r3, #20
 8007fee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3314      	adds	r3, #20
 8008006:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008008:	65fa      	str	r2, [r7, #92]	; 0x5c
 800800a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800800e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e5      	bne.n	8007fe8 <HAL_UART_DMAResume+0x14>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b22      	cmp	r3, #34	; 0x22
 8008026:	d15c      	bne.n	80080e2 <HAL_UART_DMAResume+0x10e>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008028:	2300      	movs	r3, #0
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d019      	beq.n	800807a <HAL_UART_DMAResume+0xa6>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	330c      	adds	r3, #12
 800804c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800805c:	66bb      	str	r3, [r7, #104]	; 0x68
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008066:	64ba      	str	r2, [r7, #72]	; 0x48
 8008068:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800806c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3314      	adds	r3, #20
 8008080:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	f043 0301 	orr.w	r3, r3, #1
 8008090:	667b      	str	r3, [r7, #100]	; 0x64
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3314      	adds	r3, #20
 8008098:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800809a:	637a      	str	r2, [r7, #52]	; 0x34
 800809c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e5      	bne.n	800807a <HAL_UART_DMAResume+0xa6>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3314      	adds	r3, #20
 80080b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	613b      	str	r3, [r7, #16]
   return(result);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c4:	663b      	str	r3, [r7, #96]	; 0x60
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3314      	adds	r3, #20
 80080cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080ce:	623a      	str	r2, [r7, #32]
 80080d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	69f9      	ldr	r1, [r7, #28]
 80080d4:	6a3a      	ldr	r2, [r7, #32]
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	61bb      	str	r3, [r7, #24]
   return(result);
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e5      	bne.n	80080ae <HAL_UART_DMAResume+0xda>
  }

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3774      	adds	r7, #116	; 0x74
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b090      	sub	sp, #64	; 0x40
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815c:	2b00      	cmp	r3, #0
 800815e:	d137      	bne.n	80081d0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008162:	2200      	movs	r2, #0
 8008164:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3314      	adds	r3, #20
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	623b      	str	r3, [r7, #32]
   return(result);
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800817c:	63bb      	str	r3, [r7, #56]	; 0x38
 800817e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3314      	adds	r3, #20
 8008184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008186:	633a      	str	r2, [r7, #48]	; 0x30
 8008188:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800818c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e5      	bne.n	8008166 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800819a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	330c      	adds	r3, #12
 80081a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
 80081b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	330c      	adds	r3, #12
 80081b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ba:	61fa      	str	r2, [r7, #28]
 80081bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	69b9      	ldr	r1, [r7, #24]
 80081c0:	69fa      	ldr	r2, [r7, #28]
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	617b      	str	r3, [r7, #20]
   return(result);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e5      	bne.n	800819a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081ce:	e002      	b.n	80081d6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80081d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80081d2:	f7fa fd1b 	bl	8002c0c <HAL_UART_TxCpltCallback>
}
 80081d6:	bf00      	nop
 80081d8:	3740      	adds	r7, #64	; 0x40
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff ff7f 	bl	80080f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b09c      	sub	sp, #112	; 0x70
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008206:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008212:	2b00      	cmp	r3, #0
 8008214:	d172      	bne.n	80082fc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008218:	2200      	movs	r2, #0
 800821a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800821c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	330c      	adds	r3, #12
 8008222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800822c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800822e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008232:	66bb      	str	r3, [r7, #104]	; 0x68
 8008234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	330c      	adds	r3, #12
 800823a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800823c:	65ba      	str	r2, [r7, #88]	; 0x58
 800823e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800824a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e5      	bne.n	800821c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3314      	adds	r3, #20
 8008256:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	667b      	str	r3, [r7, #100]	; 0x64
 8008268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3314      	adds	r3, #20
 800826e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008270:	647a      	str	r2, [r7, #68]	; 0x44
 8008272:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800827e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e5      	bne.n	8008250 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3314      	adds	r3, #20
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	623b      	str	r3, [r7, #32]
   return(result);
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800829a:	663b      	str	r3, [r7, #96]	; 0x60
 800829c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3314      	adds	r3, #20
 80082a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082a4:	633a      	str	r2, [r7, #48]	; 0x30
 80082a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e5      	bne.n	8008284 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ba:	2220      	movs	r2, #32
 80082bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d119      	bne.n	80082fc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	330c      	adds	r3, #12
 80082ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f023 0310 	bic.w	r3, r3, #16
 80082de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082e8:	61fa      	str	r2, [r7, #28]
 80082ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	69b9      	ldr	r1, [r7, #24]
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	617b      	str	r3, [r7, #20]
   return(result);
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e5      	bne.n	80082c8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fe:	2200      	movs	r2, #0
 8008300:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	2b01      	cmp	r3, #1
 8008308:	d106      	bne.n	8008318 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800830a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800830e:	4619      	mov	r1, r3
 8008310:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008312:	f7ff ff0b 	bl	800812c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008316:	e002      	b.n	800831e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008318:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800831a:	f7fa fa87 	bl	800282c <HAL_UART_RxCpltCallback>
}
 800831e:	bf00      	nop
 8008320:	3770      	adds	r7, #112	; 0x70
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008332:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2201      	movs	r2, #1
 8008338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833e:	2b01      	cmp	r3, #1
 8008340:	d108      	bne.n	8008354 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008346:	085b      	lsrs	r3, r3, #1
 8008348:	b29b      	uxth	r3, r3
 800834a:	4619      	mov	r1, r3
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff feed 	bl	800812c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008352:	e002      	b.n	800835a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f7ff fed5 	bl	8008104 <HAL_UART_RxHalfCpltCallback>
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008372:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837e:	2b80      	cmp	r3, #128	; 0x80
 8008380:	bf0c      	ite	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	2300      	movne	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b21      	cmp	r3, #33	; 0x21
 8008394:	d108      	bne.n	80083a8 <UART_DMAError+0x46>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2200      	movs	r2, #0
 80083a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80083a2:	68b8      	ldr	r0, [r7, #8]
 80083a4:	f000 f8c2 	bl	800852c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	bf0c      	ite	eq
 80083b6:	2301      	moveq	r3, #1
 80083b8:	2300      	movne	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b22      	cmp	r3, #34	; 0x22
 80083c8:	d108      	bne.n	80083dc <UART_DMAError+0x7a>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80083d6:	68b8      	ldr	r0, [r7, #8]
 80083d8:	f000 f8d0 	bl	800857c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e0:	f043 0210 	orr.w	r2, r3, #16
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083e8:	68b8      	ldr	r0, [r7, #8]
 80083ea:	f7ff fe95 	bl	8008118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ee:	bf00      	nop
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b098      	sub	sp, #96	; 0x60
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	88fa      	ldrh	r2, [r7, #6]
 8008410:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2222      	movs	r2, #34	; 0x22
 800841c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008424:	4a3e      	ldr	r2, [pc, #248]	; (8008520 <UART_Start_Receive_DMA+0x128>)
 8008426:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842c:	4a3d      	ldr	r2, [pc, #244]	; (8008524 <UART_Start_Receive_DMA+0x12c>)
 800842e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008434:	4a3c      	ldr	r2, [pc, #240]	; (8008528 <UART_Start_Receive_DMA+0x130>)
 8008436:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843c:	2200      	movs	r2, #0
 800843e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008440:	f107 0308 	add.w	r3, r7, #8
 8008444:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3304      	adds	r3, #4
 8008450:	4619      	mov	r1, r3
 8008452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	88fb      	ldrh	r3, [r7, #6]
 8008458:	f7fb fc9c 	bl	8003d94 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800845c:	2300      	movs	r3, #0
 800845e:	613b      	str	r3, [r7, #16]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	613b      	str	r3, [r7, #16]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	613b      	str	r3, [r7, #16]
 8008470:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d019      	beq.n	80084ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	330c      	adds	r3, #12
 8008480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800848a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008490:	65bb      	str	r3, [r7, #88]	; 0x58
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	330c      	adds	r3, #12
 8008498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800849a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800849c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80084a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80084a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e5      	bne.n	800847a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3314      	adds	r3, #20
 80084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	f043 0301 	orr.w	r3, r3, #1
 80084c4:	657b      	str	r3, [r7, #84]	; 0x54
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3314      	adds	r3, #20
 80084cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80084d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80084d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e5      	bne.n	80084ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3314      	adds	r3, #20
 80084e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	617b      	str	r3, [r7, #20]
   return(result);
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f8:	653b      	str	r3, [r7, #80]	; 0x50
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3314      	adds	r3, #20
 8008500:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008502:	627a      	str	r2, [r7, #36]	; 0x24
 8008504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008506:	6a39      	ldr	r1, [r7, #32]
 8008508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e5      	bne.n	80084e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3760      	adds	r7, #96	; 0x60
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	080081fb 	.word	0x080081fb
 8008524:	08008327 	.word	0x08008327
 8008528:	08008363 	.word	0x08008363

0800852c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800852c:	b480      	push	{r7}
 800852e:	b089      	sub	sp, #36	; 0x24
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	330c      	adds	r3, #12
 800853a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	60bb      	str	r3, [r7, #8]
   return(result);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800854a:	61fb      	str	r3, [r7, #28]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	61ba      	str	r2, [r7, #24]
 8008556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	6979      	ldr	r1, [r7, #20]
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	613b      	str	r3, [r7, #16]
   return(result);
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e5      	bne.n	8008534 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2220      	movs	r2, #32
 800856c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008570:	bf00      	nop
 8008572:	3724      	adds	r7, #36	; 0x24
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b095      	sub	sp, #84	; 0x54
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	330c      	adds	r3, #12
 800858a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800859a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330c      	adds	r3, #12
 80085a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085a4:	643a      	str	r2, [r7, #64]	; 0x40
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e5      	bne.n	8008584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3314      	adds	r3, #20
 80085be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f023 0301 	bic.w	r3, r3, #1
 80085ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3314      	adds	r3, #20
 80085d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e0:	e841 2300 	strex	r3, r2, [r1]
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e5      	bne.n	80085b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d119      	bne.n	8008628 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	330c      	adds	r3, #12
 80085fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	60bb      	str	r3, [r7, #8]
   return(result);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f023 0310 	bic.w	r3, r3, #16
 800860a:	647b      	str	r3, [r7, #68]	; 0x44
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	330c      	adds	r3, #12
 8008612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008614:	61ba      	str	r2, [r7, #24]
 8008616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	6979      	ldr	r1, [r7, #20]
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	613b      	str	r3, [r7, #16]
   return(result);
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e5      	bne.n	80085f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008636:	bf00      	nop
 8008638:	3754      	adds	r7, #84	; 0x54
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
	...

08008644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008648:	b0c0      	sub	sp, #256	; 0x100
 800864a:	af00      	add	r7, sp, #0
 800864c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800865c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008660:	68d9      	ldr	r1, [r3, #12]
 8008662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	ea40 0301 	orr.w	r3, r0, r1
 800866c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800866e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	431a      	orrs	r2, r3
 800867c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	431a      	orrs	r2, r3
 8008684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	4313      	orrs	r3, r2
 800868c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800869c:	f021 010c 	bic.w	r1, r1, #12
 80086a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086aa:	430b      	orrs	r3, r1
 80086ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086be:	6999      	ldr	r1, [r3, #24]
 80086c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	ea40 0301 	orr.w	r3, r0, r1
 80086ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4b8f      	ldr	r3, [pc, #572]	; (8008910 <UART_SetConfig+0x2cc>)
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d005      	beq.n	80086e4 <UART_SetConfig+0xa0>
 80086d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	4b8d      	ldr	r3, [pc, #564]	; (8008914 <UART_SetConfig+0x2d0>)
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d104      	bne.n	80086ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086e4:	f7fe fe88 	bl	80073f8 <HAL_RCC_GetPCLK2Freq>
 80086e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80086ec:	e003      	b.n	80086f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086ee:	f7fe fe6f 	bl	80073d0 <HAL_RCC_GetPCLK1Freq>
 80086f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008700:	f040 810c 	bne.w	800891c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008708:	2200      	movs	r2, #0
 800870a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800870e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008712:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008716:	4622      	mov	r2, r4
 8008718:	462b      	mov	r3, r5
 800871a:	1891      	adds	r1, r2, r2
 800871c:	65b9      	str	r1, [r7, #88]	; 0x58
 800871e:	415b      	adcs	r3, r3
 8008720:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008722:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008726:	4621      	mov	r1, r4
 8008728:	eb12 0801 	adds.w	r8, r2, r1
 800872c:	4629      	mov	r1, r5
 800872e:	eb43 0901 	adc.w	r9, r3, r1
 8008732:	f04f 0200 	mov.w	r2, #0
 8008736:	f04f 0300 	mov.w	r3, #0
 800873a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800873e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008746:	4690      	mov	r8, r2
 8008748:	4699      	mov	r9, r3
 800874a:	4623      	mov	r3, r4
 800874c:	eb18 0303 	adds.w	r3, r8, r3
 8008750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008754:	462b      	mov	r3, r5
 8008756:	eb49 0303 	adc.w	r3, r9, r3
 800875a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800875e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800876a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800876e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008772:	460b      	mov	r3, r1
 8008774:	18db      	adds	r3, r3, r3
 8008776:	653b      	str	r3, [r7, #80]	; 0x50
 8008778:	4613      	mov	r3, r2
 800877a:	eb42 0303 	adc.w	r3, r2, r3
 800877e:	657b      	str	r3, [r7, #84]	; 0x54
 8008780:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008784:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008788:	f7f8 fad6 	bl	8000d38 <__aeabi_uldivmod>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4b61      	ldr	r3, [pc, #388]	; (8008918 <UART_SetConfig+0x2d4>)
 8008792:	fba3 2302 	umull	r2, r3, r3, r2
 8008796:	095b      	lsrs	r3, r3, #5
 8008798:	011c      	lsls	r4, r3, #4
 800879a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80087a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80087ac:	4642      	mov	r2, r8
 80087ae:	464b      	mov	r3, r9
 80087b0:	1891      	adds	r1, r2, r2
 80087b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80087b4:	415b      	adcs	r3, r3
 80087b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80087bc:	4641      	mov	r1, r8
 80087be:	eb12 0a01 	adds.w	sl, r2, r1
 80087c2:	4649      	mov	r1, r9
 80087c4:	eb43 0b01 	adc.w	fp, r3, r1
 80087c8:	f04f 0200 	mov.w	r2, #0
 80087cc:	f04f 0300 	mov.w	r3, #0
 80087d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087dc:	4692      	mov	sl, r2
 80087de:	469b      	mov	fp, r3
 80087e0:	4643      	mov	r3, r8
 80087e2:	eb1a 0303 	adds.w	r3, sl, r3
 80087e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087ea:	464b      	mov	r3, r9
 80087ec:	eb4b 0303 	adc.w	r3, fp, r3
 80087f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008800:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008804:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008808:	460b      	mov	r3, r1
 800880a:	18db      	adds	r3, r3, r3
 800880c:	643b      	str	r3, [r7, #64]	; 0x40
 800880e:	4613      	mov	r3, r2
 8008810:	eb42 0303 	adc.w	r3, r2, r3
 8008814:	647b      	str	r3, [r7, #68]	; 0x44
 8008816:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800881a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800881e:	f7f8 fa8b 	bl	8000d38 <__aeabi_uldivmod>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4611      	mov	r1, r2
 8008828:	4b3b      	ldr	r3, [pc, #236]	; (8008918 <UART_SetConfig+0x2d4>)
 800882a:	fba3 2301 	umull	r2, r3, r3, r1
 800882e:	095b      	lsrs	r3, r3, #5
 8008830:	2264      	movs	r2, #100	; 0x64
 8008832:	fb02 f303 	mul.w	r3, r2, r3
 8008836:	1acb      	subs	r3, r1, r3
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800883e:	4b36      	ldr	r3, [pc, #216]	; (8008918 <UART_SetConfig+0x2d4>)
 8008840:	fba3 2302 	umull	r2, r3, r3, r2
 8008844:	095b      	lsrs	r3, r3, #5
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800884c:	441c      	add	r4, r3
 800884e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008852:	2200      	movs	r2, #0
 8008854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008858:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800885c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008860:	4642      	mov	r2, r8
 8008862:	464b      	mov	r3, r9
 8008864:	1891      	adds	r1, r2, r2
 8008866:	63b9      	str	r1, [r7, #56]	; 0x38
 8008868:	415b      	adcs	r3, r3
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800886c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008870:	4641      	mov	r1, r8
 8008872:	1851      	adds	r1, r2, r1
 8008874:	6339      	str	r1, [r7, #48]	; 0x30
 8008876:	4649      	mov	r1, r9
 8008878:	414b      	adcs	r3, r1
 800887a:	637b      	str	r3, [r7, #52]	; 0x34
 800887c:	f04f 0200 	mov.w	r2, #0
 8008880:	f04f 0300 	mov.w	r3, #0
 8008884:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008888:	4659      	mov	r1, fp
 800888a:	00cb      	lsls	r3, r1, #3
 800888c:	4651      	mov	r1, sl
 800888e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008892:	4651      	mov	r1, sl
 8008894:	00ca      	lsls	r2, r1, #3
 8008896:	4610      	mov	r0, r2
 8008898:	4619      	mov	r1, r3
 800889a:	4603      	mov	r3, r0
 800889c:	4642      	mov	r2, r8
 800889e:	189b      	adds	r3, r3, r2
 80088a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088a4:	464b      	mov	r3, r9
 80088a6:	460a      	mov	r2, r1
 80088a8:	eb42 0303 	adc.w	r3, r2, r3
 80088ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80088c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80088c4:	460b      	mov	r3, r1
 80088c6:	18db      	adds	r3, r3, r3
 80088c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ca:	4613      	mov	r3, r2
 80088cc:	eb42 0303 	adc.w	r3, r2, r3
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80088da:	f7f8 fa2d 	bl	8000d38 <__aeabi_uldivmod>
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <UART_SetConfig+0x2d4>)
 80088e4:	fba3 1302 	umull	r1, r3, r3, r2
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	2164      	movs	r1, #100	; 0x64
 80088ec:	fb01 f303 	mul.w	r3, r1, r3
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	3332      	adds	r3, #50	; 0x32
 80088f6:	4a08      	ldr	r2, [pc, #32]	; (8008918 <UART_SetConfig+0x2d4>)
 80088f8:	fba2 2303 	umull	r2, r3, r2, r3
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	f003 0207 	and.w	r2, r3, #7
 8008902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4422      	add	r2, r4
 800890a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800890c:	e106      	b.n	8008b1c <UART_SetConfig+0x4d8>
 800890e:	bf00      	nop
 8008910:	40011000 	.word	0x40011000
 8008914:	40011400 	.word	0x40011400
 8008918:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800891c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008920:	2200      	movs	r2, #0
 8008922:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008926:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800892a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800892e:	4642      	mov	r2, r8
 8008930:	464b      	mov	r3, r9
 8008932:	1891      	adds	r1, r2, r2
 8008934:	6239      	str	r1, [r7, #32]
 8008936:	415b      	adcs	r3, r3
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
 800893a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800893e:	4641      	mov	r1, r8
 8008940:	1854      	adds	r4, r2, r1
 8008942:	4649      	mov	r1, r9
 8008944:	eb43 0501 	adc.w	r5, r3, r1
 8008948:	f04f 0200 	mov.w	r2, #0
 800894c:	f04f 0300 	mov.w	r3, #0
 8008950:	00eb      	lsls	r3, r5, #3
 8008952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008956:	00e2      	lsls	r2, r4, #3
 8008958:	4614      	mov	r4, r2
 800895a:	461d      	mov	r5, r3
 800895c:	4643      	mov	r3, r8
 800895e:	18e3      	adds	r3, r4, r3
 8008960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008964:	464b      	mov	r3, r9
 8008966:	eb45 0303 	adc.w	r3, r5, r3
 800896a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800896e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800897a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	f04f 0300 	mov.w	r3, #0
 8008986:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800898a:	4629      	mov	r1, r5
 800898c:	008b      	lsls	r3, r1, #2
 800898e:	4621      	mov	r1, r4
 8008990:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008994:	4621      	mov	r1, r4
 8008996:	008a      	lsls	r2, r1, #2
 8008998:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800899c:	f7f8 f9cc 	bl	8000d38 <__aeabi_uldivmod>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4b60      	ldr	r3, [pc, #384]	; (8008b28 <UART_SetConfig+0x4e4>)
 80089a6:	fba3 2302 	umull	r2, r3, r3, r2
 80089aa:	095b      	lsrs	r3, r3, #5
 80089ac:	011c      	lsls	r4, r3, #4
 80089ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089b2:	2200      	movs	r2, #0
 80089b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80089bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	1891      	adds	r1, r2, r2
 80089c6:	61b9      	str	r1, [r7, #24]
 80089c8:	415b      	adcs	r3, r3
 80089ca:	61fb      	str	r3, [r7, #28]
 80089cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089d0:	4641      	mov	r1, r8
 80089d2:	1851      	adds	r1, r2, r1
 80089d4:	6139      	str	r1, [r7, #16]
 80089d6:	4649      	mov	r1, r9
 80089d8:	414b      	adcs	r3, r1
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	f04f 0200 	mov.w	r2, #0
 80089e0:	f04f 0300 	mov.w	r3, #0
 80089e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089e8:	4659      	mov	r1, fp
 80089ea:	00cb      	lsls	r3, r1, #3
 80089ec:	4651      	mov	r1, sl
 80089ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089f2:	4651      	mov	r1, sl
 80089f4:	00ca      	lsls	r2, r1, #3
 80089f6:	4610      	mov	r0, r2
 80089f8:	4619      	mov	r1, r3
 80089fa:	4603      	mov	r3, r0
 80089fc:	4642      	mov	r2, r8
 80089fe:	189b      	adds	r3, r3, r2
 8008a00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a04:	464b      	mov	r3, r9
 8008a06:	460a      	mov	r2, r1
 8008a08:	eb42 0303 	adc.w	r3, r2, r3
 8008a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a28:	4649      	mov	r1, r9
 8008a2a:	008b      	lsls	r3, r1, #2
 8008a2c:	4641      	mov	r1, r8
 8008a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a32:	4641      	mov	r1, r8
 8008a34:	008a      	lsls	r2, r1, #2
 8008a36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a3a:	f7f8 f97d 	bl	8000d38 <__aeabi_uldivmod>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4611      	mov	r1, r2
 8008a44:	4b38      	ldr	r3, [pc, #224]	; (8008b28 <UART_SetConfig+0x4e4>)
 8008a46:	fba3 2301 	umull	r2, r3, r3, r1
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	2264      	movs	r2, #100	; 0x64
 8008a4e:	fb02 f303 	mul.w	r3, r2, r3
 8008a52:	1acb      	subs	r3, r1, r3
 8008a54:	011b      	lsls	r3, r3, #4
 8008a56:	3332      	adds	r3, #50	; 0x32
 8008a58:	4a33      	ldr	r2, [pc, #204]	; (8008b28 <UART_SetConfig+0x4e4>)
 8008a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a5e:	095b      	lsrs	r3, r3, #5
 8008a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a64:	441c      	add	r4, r3
 8008a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	673b      	str	r3, [r7, #112]	; 0x70
 8008a6e:	677a      	str	r2, [r7, #116]	; 0x74
 8008a70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a74:	4642      	mov	r2, r8
 8008a76:	464b      	mov	r3, r9
 8008a78:	1891      	adds	r1, r2, r2
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	415b      	adcs	r3, r3
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a84:	4641      	mov	r1, r8
 8008a86:	1851      	adds	r1, r2, r1
 8008a88:	6039      	str	r1, [r7, #0]
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	414b      	adcs	r3, r1
 8008a8e:	607b      	str	r3, [r7, #4]
 8008a90:	f04f 0200 	mov.w	r2, #0
 8008a94:	f04f 0300 	mov.w	r3, #0
 8008a98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	00cb      	lsls	r3, r1, #3
 8008aa0:	4651      	mov	r1, sl
 8008aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aa6:	4651      	mov	r1, sl
 8008aa8:	00ca      	lsls	r2, r1, #3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	4619      	mov	r1, r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	189b      	adds	r3, r3, r2
 8008ab4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ab6:	464b      	mov	r3, r9
 8008ab8:	460a      	mov	r2, r1
 8008aba:	eb42 0303 	adc.w	r3, r2, r3
 8008abe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	663b      	str	r3, [r7, #96]	; 0x60
 8008aca:	667a      	str	r2, [r7, #100]	; 0x64
 8008acc:	f04f 0200 	mov.w	r2, #0
 8008ad0:	f04f 0300 	mov.w	r3, #0
 8008ad4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008ad8:	4649      	mov	r1, r9
 8008ada:	008b      	lsls	r3, r1, #2
 8008adc:	4641      	mov	r1, r8
 8008ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ae2:	4641      	mov	r1, r8
 8008ae4:	008a      	lsls	r2, r1, #2
 8008ae6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008aea:	f7f8 f925 	bl	8000d38 <__aeabi_uldivmod>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4b0d      	ldr	r3, [pc, #52]	; (8008b28 <UART_SetConfig+0x4e4>)
 8008af4:	fba3 1302 	umull	r1, r3, r3, r2
 8008af8:	095b      	lsrs	r3, r3, #5
 8008afa:	2164      	movs	r1, #100	; 0x64
 8008afc:	fb01 f303 	mul.w	r3, r1, r3
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	3332      	adds	r3, #50	; 0x32
 8008b06:	4a08      	ldr	r2, [pc, #32]	; (8008b28 <UART_SetConfig+0x4e4>)
 8008b08:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0c:	095b      	lsrs	r3, r3, #5
 8008b0e:	f003 020f 	and.w	r2, r3, #15
 8008b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4422      	add	r2, r4
 8008b1a:	609a      	str	r2, [r3, #8]
}
 8008b1c:	bf00      	nop
 8008b1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b22:	46bd      	mov	sp, r7
 8008b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b28:	51eb851f 	.word	0x51eb851f

08008b2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	f107 001c 	add.w	r0, r7, #28
 8008b3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b3e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d123      	bne.n	8008b8e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d105      	bne.n	8008b82 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 fae2 	bl	800a14c <USB_CoreReset>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]
 8008b8c:	e01b      	b.n	8008bc6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 fad6 	bl	800a14c <USB_CoreReset>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ba4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d106      	bne.n	8008bba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	639a      	str	r2, [r3, #56]	; 0x38
 8008bb8:	e005      	b.n	8008bc6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008bc6:	7fbb      	ldrb	r3, [r7, #30]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d10b      	bne.n	8008be4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f043 0206 	orr.w	r2, r3, #6
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f043 0220 	orr.w	r2, r3, #32
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bf0:	b004      	add	sp, #16
 8008bf2:	4770      	bx	lr

08008bf4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d165      	bne.n	8008cd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4a41      	ldr	r2, [pc, #260]	; (8008d10 <USB_SetTurnaroundTime+0x11c>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d906      	bls.n	8008c1e <USB_SetTurnaroundTime+0x2a>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4a40      	ldr	r2, [pc, #256]	; (8008d14 <USB_SetTurnaroundTime+0x120>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d202      	bcs.n	8008c1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008c18:	230f      	movs	r3, #15
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e062      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	4a3c      	ldr	r2, [pc, #240]	; (8008d14 <USB_SetTurnaroundTime+0x120>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d306      	bcc.n	8008c34 <USB_SetTurnaroundTime+0x40>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	4a3b      	ldr	r2, [pc, #236]	; (8008d18 <USB_SetTurnaroundTime+0x124>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d202      	bcs.n	8008c34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008c2e:	230e      	movs	r3, #14
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	e057      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	4a38      	ldr	r2, [pc, #224]	; (8008d18 <USB_SetTurnaroundTime+0x124>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d306      	bcc.n	8008c4a <USB_SetTurnaroundTime+0x56>
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	4a37      	ldr	r2, [pc, #220]	; (8008d1c <USB_SetTurnaroundTime+0x128>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d202      	bcs.n	8008c4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008c44:	230d      	movs	r3, #13
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	e04c      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	4a33      	ldr	r2, [pc, #204]	; (8008d1c <USB_SetTurnaroundTime+0x128>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d306      	bcc.n	8008c60 <USB_SetTurnaroundTime+0x6c>
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4a32      	ldr	r2, [pc, #200]	; (8008d20 <USB_SetTurnaroundTime+0x12c>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d802      	bhi.n	8008c60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008c5a:	230c      	movs	r3, #12
 8008c5c:	617b      	str	r3, [r7, #20]
 8008c5e:	e041      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4a2f      	ldr	r2, [pc, #188]	; (8008d20 <USB_SetTurnaroundTime+0x12c>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d906      	bls.n	8008c76 <USB_SetTurnaroundTime+0x82>
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4a2e      	ldr	r2, [pc, #184]	; (8008d24 <USB_SetTurnaroundTime+0x130>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d802      	bhi.n	8008c76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008c70:	230b      	movs	r3, #11
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	e036      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	4a2a      	ldr	r2, [pc, #168]	; (8008d24 <USB_SetTurnaroundTime+0x130>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d906      	bls.n	8008c8c <USB_SetTurnaroundTime+0x98>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	4a29      	ldr	r2, [pc, #164]	; (8008d28 <USB_SetTurnaroundTime+0x134>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d802      	bhi.n	8008c8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008c86:	230a      	movs	r3, #10
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	e02b      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4a26      	ldr	r2, [pc, #152]	; (8008d28 <USB_SetTurnaroundTime+0x134>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d906      	bls.n	8008ca2 <USB_SetTurnaroundTime+0xae>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4a25      	ldr	r2, [pc, #148]	; (8008d2c <USB_SetTurnaroundTime+0x138>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d202      	bcs.n	8008ca2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008c9c:	2309      	movs	r3, #9
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	e020      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4a21      	ldr	r2, [pc, #132]	; (8008d2c <USB_SetTurnaroundTime+0x138>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d306      	bcc.n	8008cb8 <USB_SetTurnaroundTime+0xc4>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	4a20      	ldr	r2, [pc, #128]	; (8008d30 <USB_SetTurnaroundTime+0x13c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d802      	bhi.n	8008cb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	e015      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	4a1d      	ldr	r2, [pc, #116]	; (8008d30 <USB_SetTurnaroundTime+0x13c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d906      	bls.n	8008cce <USB_SetTurnaroundTime+0xda>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4a1c      	ldr	r2, [pc, #112]	; (8008d34 <USB_SetTurnaroundTime+0x140>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d202      	bcs.n	8008cce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008cc8:	2307      	movs	r3, #7
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	e00a      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008cce:	2306      	movs	r3, #6
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	e007      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008cda:	2309      	movs	r3, #9
 8008cdc:	617b      	str	r3, [r7, #20]
 8008cde:	e001      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008ce0:	2309      	movs	r3, #9
 8008ce2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	68da      	ldr	r2, [r3, #12]
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	029b      	lsls	r3, r3, #10
 8008cf8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	00d8acbf 	.word	0x00d8acbf
 8008d14:	00e4e1c0 	.word	0x00e4e1c0
 8008d18:	00f42400 	.word	0x00f42400
 8008d1c:	01067380 	.word	0x01067380
 8008d20:	011a499f 	.word	0x011a499f
 8008d24:	01312cff 	.word	0x01312cff
 8008d28:	014ca43f 	.word	0x014ca43f
 8008d2c:	016e3600 	.word	0x016e3600
 8008d30:	01a6ab1f 	.word	0x01a6ab1f
 8008d34:	01e84800 	.word	0x01e84800

08008d38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	f043 0201 	orr.w	r2, r3, #1
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f023 0201 	bic.w	r2, r3, #1
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d115      	bne.n	8008dca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008daa:	200a      	movs	r0, #10
 8008dac:	f7fa fe0e 	bl	80039cc <HAL_Delay>
      ms += 10U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	330a      	adds	r3, #10
 8008db4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 f939 	bl	800a02e <USB_GetMode>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d01e      	beq.n	8008e00 <USB_SetCurrentMode+0x84>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2bc7      	cmp	r3, #199	; 0xc7
 8008dc6:	d9f0      	bls.n	8008daa <USB_SetCurrentMode+0x2e>
 8008dc8:	e01a      	b.n	8008e00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d115      	bne.n	8008dfc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ddc:	200a      	movs	r0, #10
 8008dde:	f7fa fdf5 	bl	80039cc <HAL_Delay>
      ms += 10U;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	330a      	adds	r3, #10
 8008de6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 f920 	bl	800a02e <USB_GetMode>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d005      	beq.n	8008e00 <USB_SetCurrentMode+0x84>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2bc7      	cmp	r3, #199	; 0xc7
 8008df8:	d9f0      	bls.n	8008ddc <USB_SetCurrentMode+0x60>
 8008dfa:	e001      	b.n	8008e00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e005      	b.n	8008e0c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2bc8      	cmp	r3, #200	; 0xc8
 8008e04:	d101      	bne.n	8008e0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e14:	b084      	sub	sp, #16
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b086      	sub	sp, #24
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e2e:	2300      	movs	r3, #0
 8008e30:	613b      	str	r3, [r7, #16]
 8008e32:	e009      	b.n	8008e48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	3340      	adds	r3, #64	; 0x40
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	2200      	movs	r2, #0
 8008e40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	3301      	adds	r3, #1
 8008e46:	613b      	str	r3, [r7, #16]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	2b0e      	cmp	r3, #14
 8008e4c:	d9f2      	bls.n	8008e34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d11c      	bne.n	8008e90 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e64:	f043 0302 	orr.w	r3, r3, #2
 8008e68:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e8e:	e00b      	b.n	8008ea8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008eae:	461a      	mov	r2, r3
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008eb4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d10d      	bne.n	8008ed8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d104      	bne.n	8008ece <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f968 	bl	800919c <USB_SetDevSpeed>
 8008ecc:	e008      	b.n	8008ee0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ece:	2101      	movs	r1, #1
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f963 	bl	800919c <USB_SetDevSpeed>
 8008ed6:	e003      	b.n	8008ee0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ed8:	2103      	movs	r1, #3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f95e 	bl	800919c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ee0:	2110      	movs	r1, #16
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f8fa 	bl	80090dc <USB_FlushTxFifo>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f924 	bl	8009140 <USB_FlushRxFifo>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f08:	461a      	mov	r2, r3
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f14:	461a      	mov	r2, r3
 8008f16:	2300      	movs	r3, #0
 8008f18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f20:	461a      	mov	r2, r3
 8008f22:	2300      	movs	r3, #0
 8008f24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f26:	2300      	movs	r3, #0
 8008f28:	613b      	str	r3, [r7, #16]
 8008f2a:	e043      	b.n	8008fb4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f42:	d118      	bne.n	8008f76 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f56:	461a      	mov	r2, r3
 8008f58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	e013      	b.n	8008f88 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	e008      	b.n	8008f88 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f82:	461a      	mov	r2, r3
 8008f84:	2300      	movs	r3, #0
 8008f86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f94:	461a      	mov	r2, r3
 8008f96:	2300      	movs	r3, #0
 8008f98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	613b      	str	r3, [r7, #16]
 8008fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008fb8:	461a      	mov	r2, r3
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d3b5      	bcc.n	8008f2c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	e043      	b.n	800904e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fdc:	d118      	bne.n	8009010 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	e013      	b.n	8009022 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009006:	461a      	mov	r2, r3
 8009008:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	e008      	b.n	8009022 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901c:	461a      	mov	r2, r3
 800901e:	2300      	movs	r3, #0
 8009020:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902e:	461a      	mov	r2, r3
 8009030:	2300      	movs	r3, #0
 8009032:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009040:	461a      	mov	r2, r3
 8009042:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009046:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	3301      	adds	r3, #1
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009052:	461a      	mov	r2, r3
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	4293      	cmp	r3, r2
 8009058:	d3b5      	bcc.n	8008fc6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800906c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800907a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800907c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009080:	2b00      	cmp	r3, #0
 8009082:	d105      	bne.n	8009090 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	f043 0210 	orr.w	r2, r3, #16
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699a      	ldr	r2, [r3, #24]
 8009094:	4b10      	ldr	r3, [pc, #64]	; (80090d8 <USB_DevInit+0x2c4>)
 8009096:	4313      	orrs	r3, r2
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800909c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	f043 0208 	orr.w	r2, r3, #8
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80090b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d107      	bne.n	80090c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090c0:	f043 0304 	orr.w	r3, r3, #4
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090d4:	b004      	add	sp, #16
 80090d6:	4770      	bx	lr
 80090d8:	803c3800 	.word	0x803c3800

080090dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3301      	adds	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80090f6:	d901      	bls.n	80090fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e01b      	b.n	8009134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	daf2      	bge.n	80090ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	019b      	lsls	r3, r3, #6
 800910c:	f043 0220 	orr.w	r2, r3, #32
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009120:	d901      	bls.n	8009126 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e006      	b.n	8009134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b20      	cmp	r3, #32
 8009130:	d0f0      	beq.n	8009114 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3301      	adds	r3, #1
 8009150:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009158:	d901      	bls.n	800915e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e018      	b.n	8009190 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	daf2      	bge.n	800914c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2210      	movs	r2, #16
 800916e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3301      	adds	r3, #1
 8009174:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800917c:	d901      	bls.n	8009182 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e006      	b.n	8009190 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0310 	and.w	r3, r3, #16
 800918a:	2b10      	cmp	r3, #16
 800918c:	d0f0      	beq.n	8009170 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	68f9      	ldr	r1, [r7, #12]
 80091b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091bc:	4313      	orrs	r3, r2
 80091be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b087      	sub	sp, #28
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f003 0306 	and.w	r3, r3, #6
 80091e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d102      	bne.n	80091f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80091ee:	2300      	movs	r3, #0
 80091f0:	75fb      	strb	r3, [r7, #23]
 80091f2:	e00a      	b.n	800920a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d002      	beq.n	8009200 <USB_GetDevSpeed+0x32>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b06      	cmp	r3, #6
 80091fe:	d102      	bne.n	8009206 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009200:	2302      	movs	r3, #2
 8009202:	75fb      	strb	r3, [r7, #23]
 8009204:	e001      	b.n	800920a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009206:	230f      	movs	r3, #15
 8009208:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
}
 800920c:	4618      	mov	r0, r3
 800920e:	371c      	adds	r7, #28
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	785b      	ldrb	r3, [r3, #1]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d13a      	bne.n	80092aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800923a:	69da      	ldr	r2, [r3, #28]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	f003 030f 	and.w	r3, r3, #15
 8009244:	2101      	movs	r1, #1
 8009246:	fa01 f303 	lsl.w	r3, r1, r3
 800924a:	b29b      	uxth	r3, r3
 800924c:	68f9      	ldr	r1, [r7, #12]
 800924e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009252:	4313      	orrs	r3, r2
 8009254:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d155      	bne.n	8009318 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	791b      	ldrb	r3, [r3, #4]
 8009286:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009288:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	059b      	lsls	r3, r3, #22
 800928e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009290:	4313      	orrs	r3, r2
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	0151      	lsls	r1, r2, #5
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	440a      	add	r2, r1
 800929a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800929e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	e036      	b.n	8009318 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b0:	69da      	ldr	r2, [r3, #28]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	f003 030f 	and.w	r3, r3, #15
 80092ba:	2101      	movs	r1, #1
 80092bc:	fa01 f303 	lsl.w	r3, r1, r3
 80092c0:	041b      	lsls	r3, r3, #16
 80092c2:	68f9      	ldr	r1, [r7, #12]
 80092c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092c8:	4313      	orrs	r3, r2
 80092ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d11a      	bne.n	8009318 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	791b      	ldrb	r3, [r3, #4]
 80092fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092fe:	430b      	orrs	r3, r1
 8009300:	4313      	orrs	r3, r2
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	0151      	lsls	r1, r2, #5
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	440a      	add	r2, r1
 800930a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800930e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009316:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3714      	adds	r7, #20
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
	...

08009328 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	785b      	ldrb	r3, [r3, #1]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d161      	bne.n	8009408 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800935a:	d11f      	bne.n	800939c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	0151      	lsls	r1, r2, #5
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	440a      	add	r2, r1
 8009372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009376:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800937a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	0151      	lsls	r1, r2, #5
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	440a      	add	r2, r1
 8009392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009396:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800939a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	f003 030f 	and.w	r3, r3, #15
 80093ac:	2101      	movs	r1, #1
 80093ae:	fa01 f303 	lsl.w	r3, r1, r3
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	43db      	mvns	r3, r3
 80093b6:	68f9      	ldr	r1, [r7, #12]
 80093b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093bc:	4013      	ands	r3, r2
 80093be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c6:	69da      	ldr	r2, [r3, #28]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	f003 030f 	and.w	r3, r3, #15
 80093d0:	2101      	movs	r1, #1
 80093d2:	fa01 f303 	lsl.w	r3, r1, r3
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	43db      	mvns	r3, r3
 80093da:	68f9      	ldr	r1, [r7, #12]
 80093dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093e0:	4013      	ands	r3, r2
 80093e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	015a      	lsls	r2, r3, #5
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	0159      	lsls	r1, r3, #5
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	440b      	add	r3, r1
 80093fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fe:	4619      	mov	r1, r3
 8009400:	4b35      	ldr	r3, [pc, #212]	; (80094d8 <USB_DeactivateEndpoint+0x1b0>)
 8009402:	4013      	ands	r3, r2
 8009404:	600b      	str	r3, [r1, #0]
 8009406:	e060      	b.n	80094ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800941a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800941e:	d11f      	bne.n	8009460 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4413      	add	r3, r2
 8009428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	0151      	lsls	r1, r2, #5
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	440a      	add	r2, r1
 8009436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800943a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800943e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	0151      	lsls	r1, r2, #5
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	440a      	add	r2, r1
 8009456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800945a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800945e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	f003 030f 	and.w	r3, r3, #15
 8009470:	2101      	movs	r1, #1
 8009472:	fa01 f303 	lsl.w	r3, r1, r3
 8009476:	041b      	lsls	r3, r3, #16
 8009478:	43db      	mvns	r3, r3
 800947a:	68f9      	ldr	r1, [r7, #12]
 800947c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009480:	4013      	ands	r3, r2
 8009482:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948a:	69da      	ldr	r2, [r3, #28]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 030f 	and.w	r3, r3, #15
 8009494:	2101      	movs	r1, #1
 8009496:	fa01 f303 	lsl.w	r3, r1, r3
 800949a:	041b      	lsls	r3, r3, #16
 800949c:	43db      	mvns	r3, r3
 800949e:	68f9      	ldr	r1, [r7, #12]
 80094a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094a4:	4013      	ands	r3, r2
 80094a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	0159      	lsls	r1, r3, #5
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	440b      	add	r3, r1
 80094be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c2:	4619      	mov	r1, r3
 80094c4:	4b05      	ldr	r3, [pc, #20]	; (80094dc <USB_DeactivateEndpoint+0x1b4>)
 80094c6:	4013      	ands	r3, r2
 80094c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	ec337800 	.word	0xec337800
 80094dc:	eff37800 	.word	0xeff37800

080094e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08a      	sub	sp, #40	; 0x28
 80094e4:	af02      	add	r7, sp, #8
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	4613      	mov	r3, r2
 80094ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	785b      	ldrb	r3, [r3, #1]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	f040 817a 	bne.w	80097f6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d132      	bne.n	8009570 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	0151      	lsls	r1, r2, #5
 800951c:	69fa      	ldr	r2, [r7, #28]
 800951e:	440a      	add	r2, r1
 8009520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009524:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009528:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800952c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	0151      	lsls	r1, r2, #5
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	440a      	add	r2, r1
 8009544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800954c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	69fa      	ldr	r2, [r7, #28]
 8009562:	440a      	add	r2, r1
 8009564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009568:	0cdb      	lsrs	r3, r3, #19
 800956a:	04db      	lsls	r3, r3, #19
 800956c:	6113      	str	r3, [r2, #16]
 800956e:	e092      	b.n	8009696 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	0151      	lsls	r1, r2, #5
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	440a      	add	r2, r1
 8009586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958a:	0cdb      	lsrs	r3, r3, #19
 800958c:	04db      	lsls	r3, r3, #19
 800958e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	4413      	add	r3, r2
 8009598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	0151      	lsls	r1, r2, #5
 80095a2:	69fa      	ldr	r2, [r7, #28]
 80095a4:	440a      	add	r2, r1
 80095a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095b2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d11a      	bne.n	80095f0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	691a      	ldr	r2, [r3, #16]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d903      	bls.n	80095ce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	689a      	ldr	r2, [r3, #8]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095ec:	6113      	str	r3, [r2, #16]
 80095ee:	e01b      	b.n	8009628 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	6919      	ldr	r1, [r3, #16]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	440b      	add	r3, r1
 8009608:	1e59      	subs	r1, r3, #1
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009612:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009614:	4ba2      	ldr	r3, [pc, #648]	; (80098a0 <USB_EPStartXfer+0x3c0>)
 8009616:	400b      	ands	r3, r1
 8009618:	69b9      	ldr	r1, [r7, #24]
 800961a:	0148      	lsls	r0, r1, #5
 800961c:	69f9      	ldr	r1, [r7, #28]
 800961e:	4401      	add	r1, r0
 8009620:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009624:	4313      	orrs	r3, r2
 8009626:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009634:	691a      	ldr	r2, [r3, #16]
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800963e:	69b9      	ldr	r1, [r7, #24]
 8009640:	0148      	lsls	r0, r1, #5
 8009642:	69f9      	ldr	r1, [r7, #28]
 8009644:	4401      	add	r1, r0
 8009646:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800964a:	4313      	orrs	r3, r2
 800964c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	791b      	ldrb	r3, [r3, #4]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d11f      	bne.n	8009696 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	69ba      	ldr	r2, [r7, #24]
 8009666:	0151      	lsls	r1, r2, #5
 8009668:	69fa      	ldr	r2, [r7, #28]
 800966a:	440a      	add	r2, r1
 800966c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009670:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009674:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	69ba      	ldr	r2, [r7, #24]
 8009686:	0151      	lsls	r1, r2, #5
 8009688:	69fa      	ldr	r2, [r7, #28]
 800968a:	440a      	add	r2, r1
 800968c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009690:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009694:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d14b      	bne.n	8009734 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d009      	beq.n	80096b8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b0:	461a      	mov	r2, r3
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	791b      	ldrb	r3, [r3, #4]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d128      	bne.n	8009712 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d110      	bne.n	80096f2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	0151      	lsls	r1, r2, #5
 80096e2:	69fa      	ldr	r2, [r7, #28]
 80096e4:	440a      	add	r2, r1
 80096e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	e00f      	b.n	8009712 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	0151      	lsls	r1, r2, #5
 8009704:	69fa      	ldr	r2, [r7, #28]
 8009706:	440a      	add	r2, r1
 8009708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800970c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009710:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	0151      	lsls	r1, r2, #5
 8009724:	69fa      	ldr	r2, [r7, #28]
 8009726:	440a      	add	r2, r1
 8009728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800972c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	e165      	b.n	8009a00 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	0151      	lsls	r1, r2, #5
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	440a      	add	r2, r1
 800974a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800974e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009752:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	791b      	ldrb	r3, [r3, #4]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d015      	beq.n	8009788 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	f000 814d 	beq.w	8009a00 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	2101      	movs	r1, #1
 8009778:	fa01 f303 	lsl.w	r3, r1, r3
 800977c:	69f9      	ldr	r1, [r7, #28]
 800977e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009782:	4313      	orrs	r3, r2
 8009784:	634b      	str	r3, [r1, #52]	; 0x34
 8009786:	e13b      	b.n	8009a00 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009794:	2b00      	cmp	r3, #0
 8009796:	d110      	bne.n	80097ba <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	e00f      	b.n	80097da <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	0151      	lsls	r1, r2, #5
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	440a      	add	r2, r1
 80097d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	68d9      	ldr	r1, [r3, #12]
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	781a      	ldrb	r2, [r3, #0]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	b298      	uxth	r0, r3
 80097e8:	79fb      	ldrb	r3, [r7, #7]
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	4603      	mov	r3, r0
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f000 f9b8 	bl	8009b64 <USB_WritePacket>
 80097f4:	e104      	b.n	8009a00 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	0151      	lsls	r1, r2, #5
 8009808:	69fa      	ldr	r2, [r7, #28]
 800980a:	440a      	add	r2, r1
 800980c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009810:	0cdb      	lsrs	r3, r3, #19
 8009812:	04db      	lsls	r3, r3, #19
 8009814:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	0151      	lsls	r1, r2, #5
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	440a      	add	r2, r1
 800982c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009838:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d131      	bne.n	80098a4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	689a      	ldr	r2, [r3, #8]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009864:	691a      	ldr	r2, [r3, #16]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800986e:	69b9      	ldr	r1, [r7, #24]
 8009870:	0148      	lsls	r0, r1, #5
 8009872:	69f9      	ldr	r1, [r7, #28]
 8009874:	4401      	add	r1, r0
 8009876:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800987a:	4313      	orrs	r3, r2
 800987c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	0151      	lsls	r1, r2, #5
 8009890:	69fa      	ldr	r2, [r7, #28]
 8009892:	440a      	add	r2, r1
 8009894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800989c:	6113      	str	r3, [r2, #16]
 800989e:	e061      	b.n	8009964 <USB_EPStartXfer+0x484>
 80098a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d123      	bne.n	80098f4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b8:	691a      	ldr	r2, [r3, #16]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098c2:	69b9      	ldr	r1, [r7, #24]
 80098c4:	0148      	lsls	r0, r1, #5
 80098c6:	69f9      	ldr	r1, [r7, #28]
 80098c8:	4401      	add	r1, r0
 80098ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098ce:	4313      	orrs	r3, r2
 80098d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	0151      	lsls	r1, r2, #5
 80098e4:	69fa      	ldr	r2, [r7, #28]
 80098e6:	440a      	add	r2, r1
 80098e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f0:	6113      	str	r3, [r2, #16]
 80098f2:	e037      	b.n	8009964 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	691a      	ldr	r2, [r3, #16]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	4413      	add	r3, r2
 80098fe:	1e5a      	subs	r2, r3, #1
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	fbb2 f3f3 	udiv	r3, r2, r3
 8009908:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	8afa      	ldrh	r2, [r7, #22]
 8009910:	fb03 f202 	mul.w	r2, r3, r2
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009924:	691a      	ldr	r2, [r3, #16]
 8009926:	8afb      	ldrh	r3, [r7, #22]
 8009928:	04d9      	lsls	r1, r3, #19
 800992a:	4b38      	ldr	r3, [pc, #224]	; (8009a0c <USB_EPStartXfer+0x52c>)
 800992c:	400b      	ands	r3, r1
 800992e:	69b9      	ldr	r1, [r7, #24]
 8009930:	0148      	lsls	r0, r1, #5
 8009932:	69f9      	ldr	r1, [r7, #28]
 8009934:	4401      	add	r1, r0
 8009936:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800993a:	4313      	orrs	r3, r2
 800993c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	691a      	ldr	r2, [r3, #16]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009954:	69b9      	ldr	r1, [r7, #24]
 8009956:	0148      	lsls	r0, r1, #5
 8009958:	69f9      	ldr	r1, [r7, #28]
 800995a:	4401      	add	r1, r0
 800995c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009960:	4313      	orrs	r3, r2
 8009962:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d10d      	bne.n	8009986 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d009      	beq.n	8009986 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	68d9      	ldr	r1, [r3, #12]
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009982:	460a      	mov	r2, r1
 8009984:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	791b      	ldrb	r3, [r3, #4]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d128      	bne.n	80099e0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800999a:	2b00      	cmp	r3, #0
 800999c:	d110      	bne.n	80099c0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	0151      	lsls	r1, r2, #5
 80099b0:	69fa      	ldr	r2, [r7, #28]
 80099b2:	440a      	add	r2, r1
 80099b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	e00f      	b.n	80099e0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69ba      	ldr	r2, [r7, #24]
 80099d0:	0151      	lsls	r1, r2, #5
 80099d2:	69fa      	ldr	r2, [r7, #28]
 80099d4:	440a      	add	r2, r1
 80099d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	0151      	lsls	r1, r2, #5
 80099f2:	69fa      	ldr	r2, [r7, #28]
 80099f4:	440a      	add	r2, r1
 80099f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	1ff80000 	.word	0x1ff80000

08009a10 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d14a      	bne.n	8009ac4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a46:	f040 8086 	bne.w	8009b56 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	7812      	ldrb	r2, [r2, #0]
 8009a5e:	0151      	lsls	r1, r2, #5
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	440a      	add	r2, r1
 8009a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a6c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	7812      	ldrb	r2, [r2, #0]
 8009a82:	0151      	lsls	r1, r2, #5
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	440a      	add	r2, r1
 8009a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3301      	adds	r3, #1
 8009a96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d902      	bls.n	8009aa8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8009aa6:	e056      	b.n	8009b56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ac0:	d0e7      	beq.n	8009a92 <USB_EPStopXfer+0x82>
 8009ac2:	e048      	b.n	8009b56 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009adc:	d13b      	bne.n	8009b56 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	7812      	ldrb	r2, [r2, #0]
 8009af2:	0151      	lsls	r1, r2, #5
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	440a      	add	r2, r1
 8009af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009afc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b00:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	7812      	ldrb	r2, [r2, #0]
 8009b16:	0151      	lsls	r1, r2, #5
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	440a      	add	r2, r1
 8009b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d902      	bls.n	8009b3c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	75fb      	strb	r3, [r7, #23]
          break;
 8009b3a:	e00c      	b.n	8009b56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b54:	d0e7      	beq.n	8009b26 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	371c      	adds	r7, #28
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b089      	sub	sp, #36	; 0x24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	4611      	mov	r1, r2
 8009b70:	461a      	mov	r2, r3
 8009b72:	460b      	mov	r3, r1
 8009b74:	71fb      	strb	r3, [r7, #7]
 8009b76:	4613      	mov	r3, r2
 8009b78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d123      	bne.n	8009bd2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b8a:	88bb      	ldrh	r3, [r7, #4]
 8009b8c:	3303      	adds	r3, #3
 8009b8e:	089b      	lsrs	r3, r3, #2
 8009b90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b92:	2300      	movs	r3, #0
 8009b94:	61bb      	str	r3, [r7, #24]
 8009b96:	e018      	b.n	8009bca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	031a      	lsls	r2, r3, #12
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	61bb      	str	r3, [r7, #24]
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d3e2      	bcc.n	8009b98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3724      	adds	r7, #36	; 0x24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b08b      	sub	sp, #44	; 0x2c
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	4613      	mov	r3, r2
 8009bec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009bf6:	88fb      	ldrh	r3, [r7, #6]
 8009bf8:	089b      	lsrs	r3, r3, #2
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009bfe:	88fb      	ldrh	r3, [r7, #6]
 8009c00:	f003 0303 	and.w	r3, r3, #3
 8009c04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009c06:	2300      	movs	r3, #0
 8009c08:	623b      	str	r3, [r7, #32]
 8009c0a:	e014      	b.n	8009c36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	3301      	adds	r3, #1
 8009c22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	3301      	adds	r3, #1
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	3301      	adds	r3, #1
 8009c34:	623b      	str	r3, [r7, #32]
 8009c36:	6a3a      	ldr	r2, [r7, #32]
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d3e6      	bcc.n	8009c0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009c3e:	8bfb      	ldrh	r3, [r7, #30]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01e      	beq.n	8009c82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009c44:	2300      	movs	r3, #0
 8009c46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4e:	461a      	mov	r2, r3
 8009c50:	f107 0310 	add.w	r3, r7, #16
 8009c54:	6812      	ldr	r2, [r2, #0]
 8009c56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	fa22 f303 	lsr.w	r3, r2, r3
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	701a      	strb	r2, [r3, #0]
      i++;
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	3301      	adds	r3, #1
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009c76:	8bfb      	ldrh	r3, [r7, #30]
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c7c:	8bfb      	ldrh	r3, [r7, #30]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1ea      	bne.n	8009c58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	372c      	adds	r7, #44	; 0x2c
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	785b      	ldrb	r3, [r3, #1]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d12c      	bne.n	8009d06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	db12      	blt.n	8009ce4 <USB_EPSetStall+0x54>
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00f      	beq.n	8009ce4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	0151      	lsls	r1, r2, #5
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	440a      	add	r2, r1
 8009cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ce2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	0151      	lsls	r1, r2, #5
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	440a      	add	r2, r1
 8009cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d02:	6013      	str	r3, [r2, #0]
 8009d04:	e02b      	b.n	8009d5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	015a      	lsls	r2, r3, #5
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	db12      	blt.n	8009d3e <USB_EPSetStall+0xae>
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00f      	beq.n	8009d3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	015a      	lsls	r2, r3, #5
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	4413      	add	r3, r2
 8009d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	0151      	lsls	r1, r2, #5
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	440a      	add	r2, r1
 8009d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	015a      	lsls	r2, r3, #5
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4413      	add	r3, r2
 8009d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	0151      	lsls	r1, r2, #5
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	440a      	add	r2, r1
 8009d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	785b      	ldrb	r3, [r3, #1]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d128      	bne.n	8009dda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009da2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009da6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	791b      	ldrb	r3, [r3, #4]
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d003      	beq.n	8009db8 <USB_EPClearStall+0x4c>
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	791b      	ldrb	r3, [r3, #4]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d138      	bne.n	8009e2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	0151      	lsls	r1, r2, #5
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	440a      	add	r2, r1
 8009dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	e027      	b.n	8009e2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	0151      	lsls	r1, r2, #5
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	440a      	add	r2, r1
 8009df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009df4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009df8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	791b      	ldrb	r3, [r3, #4]
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d003      	beq.n	8009e0a <USB_EPClearStall+0x9e>
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	791b      	ldrb	r3, [r3, #4]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d10f      	bne.n	8009e2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	0151      	lsls	r1, r2, #5
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	440a      	add	r2, r1
 8009e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009e6c:	68f9      	ldr	r1, [r7, #12]
 8009e6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e72:	4313      	orrs	r3, r2
 8009e74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e9e:	f023 0303 	bic.w	r3, r3, #3
 8009ea2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eb2:	f023 0302 	bic.w	r3, r3, #2
 8009eb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ee0:	f023 0303 	bic.w	r3, r3, #3
 8009ee4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ef4:	f043 0302 	orr.w	r3, r3, #2
 8009ef8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	695b      	ldr	r3, [r3, #20]
 8009f14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009f20:	68fb      	ldr	r3, [r7, #12]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b085      	sub	sp, #20
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	4013      	ands	r3, r2
 8009f50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	0c1b      	lsrs	r3, r3, #16
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b085      	sub	sp, #20
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	4013      	ands	r3, r2
 8009f84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	b29b      	uxth	r3, r3
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b085      	sub	sp, #20
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009fa6:	78fb      	ldrb	r3, [r7, #3]
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	4413      	add	r3, r2
 8009fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b087      	sub	sp, #28
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ff6:	78fb      	ldrb	r3, [r7, #3]
 8009ff8:	f003 030f 	and.w	r3, r3, #15
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	fa22 f303 	lsr.w	r3, r2, r3
 800a002:	01db      	lsls	r3, r3, #7
 800a004:	b2db      	uxtb	r3, r3
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	4313      	orrs	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4013      	ands	r3, r2
 800a01e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a020:	68bb      	ldr	r3, [r7, #8]
}
 800a022:	4618      	mov	r0, r3
 800a024:	371c      	adds	r7, #28
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	f003 0301 	and.w	r3, r3, #1
}
 800a03e:	4618      	mov	r0, r3
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b085      	sub	sp, #20
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a064:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a068:	f023 0307 	bic.w	r3, r3, #7
 800a06c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a07c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a080:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a090:	b480      	push	{r7}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	460b      	mov	r3, r1
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	333c      	adds	r3, #60	; 0x3c
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	4a26      	ldr	r2, [pc, #152]	; (800a148 <USB_EP0_OutStart+0xb8>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d90a      	bls.n	800a0ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0c4:	d101      	bne.n	800a0ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e037      	b.n	800a13a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0f8:	f043 0318 	orr.w	r3, r3, #24
 800a0fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a10c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a110:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a112:	7afb      	ldrb	r3, [r7, #11]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d10f      	bne.n	800a138 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11e:	461a      	mov	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a132:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a136:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	371c      	adds	r7, #28
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	4f54300a 	.word	0x4f54300a

0800a14c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a154:	2300      	movs	r3, #0
 800a156:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	3301      	adds	r3, #1
 800a15c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a164:	d901      	bls.n	800a16a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e01b      	b.n	800a1a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	daf2      	bge.n	800a158 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	f043 0201 	orr.w	r2, r3, #1
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	3301      	adds	r3, #1
 800a186:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a18e:	d901      	bls.n	800a194 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e006      	b.n	800a1a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d0f0      	beq.n	800a182 <USB_CoreReset+0x36>

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
	...

0800a1b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a1b4:	4904      	ldr	r1, [pc, #16]	; (800a1c8 <MX_FATFS_Init+0x18>)
 800a1b6:	4805      	ldr	r0, [pc, #20]	; (800a1cc <MX_FATFS_Init+0x1c>)
 800a1b8:	f004 fffa 	bl	800f1b0 <FATFS_LinkDriver>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4b03      	ldr	r3, [pc, #12]	; (800a1d0 <MX_FATFS_Init+0x20>)
 800a1c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a1c4:	bf00      	nop
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20002e74 	.word	0x20002e74
 800a1cc:	20000010 	.word	0x20000010
 800a1d0:	20002e70 	.word	0x20002e70

0800a1d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a1d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7f7 ffff 	bl	80021f4 <SD_disk_initialize>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	4603      	mov	r3, r0
 800a20a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800a20c:	79fb      	ldrb	r3, [r7, #7]
 800a20e:	4618      	mov	r0, r3
 800a210:	f7f8 f8dc 	bl	80023cc <SD_disk_status>
 800a214:	4603      	mov	r3, r0
 800a216:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	60b9      	str	r1, [r7, #8]
 800a228:	607a      	str	r2, [r7, #4]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	4603      	mov	r3, r0
 800a22e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800a230:	7bf8      	ldrb	r0, [r7, #15]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	68b9      	ldr	r1, [r7, #8]
 800a238:	f7f8 f8de 	bl	80023f8 <SD_disk_read>
 800a23c:	4603      	mov	r3, r0
 800a23e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60b9      	str	r1, [r7, #8]
 800a250:	607a      	str	r2, [r7, #4]
 800a252:	603b      	str	r3, [r7, #0]
 800a254:	4603      	mov	r3, r0
 800a256:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800a258:	7bf8      	ldrb	r0, [r7, #15]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	68b9      	ldr	r1, [r7, #8]
 800a260:	f7f8 f934 	bl	80024cc <SD_disk_write>
 800a264:	4603      	mov	r3, r0
 800a266:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	603a      	str	r2, [r7, #0]
 800a27a:	71fb      	strb	r3, [r7, #7]
 800a27c:	460b      	mov	r3, r1
 800a27e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	79b9      	ldrb	r1, [r7, #6]
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	4618      	mov	r0, r3
 800a288:	f7f8 f9a4 	bl	80025d4 <SD_disk_ioctl>
 800a28c:	4603      	mov	r3, r0
 800a28e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800a290:	4618      	mov	r0, r3
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a2a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a2a8:	f005 fd24 	bl	800fcf4 <USBD_static_malloc>
 800a2ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d109      	bne.n	800a2c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	32b0      	adds	r2, #176	; 0xb0
 800a2be:	2100      	movs	r1, #0
 800a2c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	e0d4      	b.n	800a472 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a2c8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f006 fdd9 	bl	8010e86 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	32b0      	adds	r2, #176	; 0xb0
 800a2de:	68f9      	ldr	r1, [r7, #12]
 800a2e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	32b0      	adds	r2, #176	; 0xb0
 800a2ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	7c1b      	ldrb	r3, [r3, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d138      	bne.n	800a372 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a300:	4b5e      	ldr	r3, [pc, #376]	; (800a47c <USBD_CDC_Init+0x1e4>)
 800a302:	7819      	ldrb	r1, [r3, #0]
 800a304:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a308:	2202      	movs	r2, #2
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f005 fbcf 	bl	800faae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a310:	4b5a      	ldr	r3, [pc, #360]	; (800a47c <USBD_CDC_Init+0x1e4>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	f003 020f 	and.w	r2, r3, #15
 800a318:	6879      	ldr	r1, [r7, #4]
 800a31a:	4613      	mov	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	440b      	add	r3, r1
 800a324:	3324      	adds	r3, #36	; 0x24
 800a326:	2201      	movs	r2, #1
 800a328:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a32a:	4b55      	ldr	r3, [pc, #340]	; (800a480 <USBD_CDC_Init+0x1e8>)
 800a32c:	7819      	ldrb	r1, [r3, #0]
 800a32e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a332:	2202      	movs	r2, #2
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f005 fbba 	bl	800faae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a33a:	4b51      	ldr	r3, [pc, #324]	; (800a480 <USBD_CDC_Init+0x1e8>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	f003 020f 	and.w	r2, r3, #15
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	4613      	mov	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	440b      	add	r3, r1
 800a34e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a352:	2201      	movs	r2, #1
 800a354:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a356:	4b4b      	ldr	r3, [pc, #300]	; (800a484 <USBD_CDC_Init+0x1ec>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	f003 020f 	and.w	r2, r3, #15
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	440b      	add	r3, r1
 800a36a:	3326      	adds	r3, #38	; 0x26
 800a36c:	2210      	movs	r2, #16
 800a36e:	801a      	strh	r2, [r3, #0]
 800a370:	e035      	b.n	800a3de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a372:	4b42      	ldr	r3, [pc, #264]	; (800a47c <USBD_CDC_Init+0x1e4>)
 800a374:	7819      	ldrb	r1, [r3, #0]
 800a376:	2340      	movs	r3, #64	; 0x40
 800a378:	2202      	movs	r2, #2
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f005 fb97 	bl	800faae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a380:	4b3e      	ldr	r3, [pc, #248]	; (800a47c <USBD_CDC_Init+0x1e4>)
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f003 020f 	and.w	r2, r3, #15
 800a388:	6879      	ldr	r1, [r7, #4]
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	440b      	add	r3, r1
 800a394:	3324      	adds	r3, #36	; 0x24
 800a396:	2201      	movs	r2, #1
 800a398:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a39a:	4b39      	ldr	r3, [pc, #228]	; (800a480 <USBD_CDC_Init+0x1e8>)
 800a39c:	7819      	ldrb	r1, [r3, #0]
 800a39e:	2340      	movs	r3, #64	; 0x40
 800a3a0:	2202      	movs	r2, #2
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f005 fb83 	bl	800faae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a3a8:	4b35      	ldr	r3, [pc, #212]	; (800a480 <USBD_CDC_Init+0x1e8>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	f003 020f 	and.w	r2, r3, #15
 800a3b0:	6879      	ldr	r1, [r7, #4]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	440b      	add	r3, r1
 800a3bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a3c4:	4b2f      	ldr	r3, [pc, #188]	; (800a484 <USBD_CDC_Init+0x1ec>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	f003 020f 	and.w	r2, r3, #15
 800a3cc:	6879      	ldr	r1, [r7, #4]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	440b      	add	r3, r1
 800a3d8:	3326      	adds	r3, #38	; 0x26
 800a3da:	2210      	movs	r2, #16
 800a3dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a3de:	4b29      	ldr	r3, [pc, #164]	; (800a484 <USBD_CDC_Init+0x1ec>)
 800a3e0:	7819      	ldrb	r1, [r3, #0]
 800a3e2:	2308      	movs	r3, #8
 800a3e4:	2203      	movs	r2, #3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f005 fb61 	bl	800faae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a3ec:	4b25      	ldr	r3, [pc, #148]	; (800a484 <USBD_CDC_Init+0x1ec>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	f003 020f 	and.w	r2, r3, #15
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	440b      	add	r3, r1
 800a400:	3324      	adds	r3, #36	; 0x24
 800a402:	2201      	movs	r2, #1
 800a404:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	33b0      	adds	r3, #176	; 0xb0
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a43c:	2302      	movs	r3, #2
 800a43e:	e018      	b.n	800a472 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	7c1b      	ldrb	r3, [r3, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10a      	bne.n	800a45e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a448:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <USBD_CDC_Init+0x1e8>)
 800a44a:	7819      	ldrb	r1, [r3, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a452:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f005 fc18 	bl	800fc8c <USBD_LL_PrepareReceive>
 800a45c:	e008      	b.n	800a470 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a45e:	4b08      	ldr	r3, [pc, #32]	; (800a480 <USBD_CDC_Init+0x1e8>)
 800a460:	7819      	ldrb	r1, [r3, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a468:	2340      	movs	r3, #64	; 0x40
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f005 fc0e 	bl	800fc8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	200000ab 	.word	0x200000ab
 800a480:	200000ac 	.word	0x200000ac
 800a484:	200000ad 	.word	0x200000ad

0800a488 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a494:	4b3a      	ldr	r3, [pc, #232]	; (800a580 <USBD_CDC_DeInit+0xf8>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	4619      	mov	r1, r3
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f005 fb2d 	bl	800fafa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a4a0:	4b37      	ldr	r3, [pc, #220]	; (800a580 <USBD_CDC_DeInit+0xf8>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	f003 020f 	and.w	r2, r3, #15
 800a4a8:	6879      	ldr	r1, [r7, #4]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4413      	add	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	440b      	add	r3, r1
 800a4b4:	3324      	adds	r3, #36	; 0x24
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a4ba:	4b32      	ldr	r3, [pc, #200]	; (800a584 <USBD_CDC_DeInit+0xfc>)
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f005 fb1a 	bl	800fafa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a4c6:	4b2f      	ldr	r3, [pc, #188]	; (800a584 <USBD_CDC_DeInit+0xfc>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	f003 020f 	and.w	r2, r3, #15
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	440b      	add	r3, r1
 800a4da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a4de:	2200      	movs	r2, #0
 800a4e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a4e2:	4b29      	ldr	r3, [pc, #164]	; (800a588 <USBD_CDC_DeInit+0x100>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f005 fb06 	bl	800fafa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a4ee:	4b26      	ldr	r3, [pc, #152]	; (800a588 <USBD_CDC_DeInit+0x100>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 020f 	and.w	r2, r3, #15
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	440b      	add	r3, r1
 800a502:	3324      	adds	r3, #36	; 0x24
 800a504:	2200      	movs	r2, #0
 800a506:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a508:	4b1f      	ldr	r3, [pc, #124]	; (800a588 <USBD_CDC_DeInit+0x100>)
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	f003 020f 	and.w	r2, r3, #15
 800a510:	6879      	ldr	r1, [r7, #4]
 800a512:	4613      	mov	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	440b      	add	r3, r1
 800a51c:	3326      	adds	r3, #38	; 0x26
 800a51e:	2200      	movs	r2, #0
 800a520:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	32b0      	adds	r2, #176	; 0xb0
 800a52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d01f      	beq.n	800a574 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	33b0      	adds	r3, #176	; 0xb0
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	32b0      	adds	r2, #176	; 0xb0
 800a552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a556:	4618      	mov	r0, r3
 800a558:	f005 fbda 	bl	800fd10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	32b0      	adds	r2, #176	; 0xb0
 800a566:	2100      	movs	r1, #0
 800a568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	200000ab 	.word	0x200000ab
 800a584:	200000ac 	.word	0x200000ac
 800a588:	200000ad 	.word	0x200000ad

0800a58c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	32b0      	adds	r2, #176	; 0xb0
 800a5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	e0bf      	b.n	800a73c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d050      	beq.n	800a66a <USBD_CDC_Setup+0xde>
 800a5c8:	2b20      	cmp	r3, #32
 800a5ca:	f040 80af 	bne.w	800a72c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	88db      	ldrh	r3, [r3, #6]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d03a      	beq.n	800a64c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	b25b      	sxtb	r3, r3
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	da1b      	bge.n	800a618 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	33b0      	adds	r3, #176	; 0xb0
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a5f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	88d2      	ldrh	r2, [r2, #6]
 800a5fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	88db      	ldrh	r3, [r3, #6]
 800a602:	2b07      	cmp	r3, #7
 800a604:	bf28      	it	cs
 800a606:	2307      	movcs	r3, #7
 800a608:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	89fa      	ldrh	r2, [r7, #14]
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f001 fd89 	bl	800c128 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a616:	e090      	b.n	800a73a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	785a      	ldrb	r2, [r3, #1]
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	88db      	ldrh	r3, [r3, #6]
 800a626:	2b3f      	cmp	r3, #63	; 0x3f
 800a628:	d803      	bhi.n	800a632 <USBD_CDC_Setup+0xa6>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	88db      	ldrh	r3, [r3, #6]
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	e000      	b.n	800a634 <USBD_CDC_Setup+0xa8>
 800a632:	2240      	movs	r2, #64	; 0x40
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a63a:	6939      	ldr	r1, [r7, #16]
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a642:	461a      	mov	r2, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 fd9b 	bl	800c180 <USBD_CtlPrepareRx>
      break;
 800a64a:	e076      	b.n	800a73a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	33b0      	adds	r3, #176	; 0xb0
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	7850      	ldrb	r0, [r2, #1]
 800a662:	2200      	movs	r2, #0
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	4798      	blx	r3
      break;
 800a668:	e067      	b.n	800a73a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	785b      	ldrb	r3, [r3, #1]
 800a66e:	2b0b      	cmp	r3, #11
 800a670:	d851      	bhi.n	800a716 <USBD_CDC_Setup+0x18a>
 800a672:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <USBD_CDC_Setup+0xec>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a6a9 	.word	0x0800a6a9
 800a67c:	0800a725 	.word	0x0800a725
 800a680:	0800a717 	.word	0x0800a717
 800a684:	0800a717 	.word	0x0800a717
 800a688:	0800a717 	.word	0x0800a717
 800a68c:	0800a717 	.word	0x0800a717
 800a690:	0800a717 	.word	0x0800a717
 800a694:	0800a717 	.word	0x0800a717
 800a698:	0800a717 	.word	0x0800a717
 800a69c:	0800a717 	.word	0x0800a717
 800a6a0:	0800a6d3 	.word	0x0800a6d3
 800a6a4:	0800a6fd 	.word	0x0800a6fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	2b03      	cmp	r3, #3
 800a6b2:	d107      	bne.n	800a6c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a6b4:	f107 030a 	add.w	r3, r7, #10
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f001 fd33 	bl	800c128 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6c2:	e032      	b.n	800a72a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a6c4:	6839      	ldr	r1, [r7, #0]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f001 fcbd 	bl	800c046 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	75fb      	strb	r3, [r7, #23]
          break;
 800a6d0:	e02b      	b.n	800a72a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d107      	bne.n	800a6ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a6de:	f107 030d 	add.w	r3, r7, #13
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 fd1e 	bl	800c128 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6ec:	e01d      	b.n	800a72a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f001 fca8 	bl	800c046 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	75fb      	strb	r3, [r7, #23]
          break;
 800a6fa:	e016      	b.n	800a72a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b03      	cmp	r3, #3
 800a706:	d00f      	beq.n	800a728 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f001 fc9b 	bl	800c046 <USBD_CtlError>
            ret = USBD_FAIL;
 800a710:	2303      	movs	r3, #3
 800a712:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a714:	e008      	b.n	800a728 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f001 fc94 	bl	800c046 <USBD_CtlError>
          ret = USBD_FAIL;
 800a71e:	2303      	movs	r3, #3
 800a720:	75fb      	strb	r3, [r7, #23]
          break;
 800a722:	e002      	b.n	800a72a <USBD_CDC_Setup+0x19e>
          break;
 800a724:	bf00      	nop
 800a726:	e008      	b.n	800a73a <USBD_CDC_Setup+0x1ae>
          break;
 800a728:	bf00      	nop
      }
      break;
 800a72a:	e006      	b.n	800a73a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f001 fc89 	bl	800c046 <USBD_CtlError>
      ret = USBD_FAIL;
 800a734:	2303      	movs	r3, #3
 800a736:	75fb      	strb	r3, [r7, #23]
      break;
 800a738:	bf00      	nop
  }

  return (uint8_t)ret;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a756:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	32b0      	adds	r2, #176	; 0xb0
 800a762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d101      	bne.n	800a76e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e065      	b.n	800a83a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	32b0      	adds	r2, #176	; 0xb0
 800a778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a77c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	f003 020f 	and.w	r2, r3, #15
 800a784:	6879      	ldr	r1, [r7, #4]
 800a786:	4613      	mov	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	440b      	add	r3, r1
 800a790:	3318      	adds	r3, #24
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d02f      	beq.n	800a7f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	f003 020f 	and.w	r2, r3, #15
 800a79e:	6879      	ldr	r1, [r7, #4]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	440b      	add	r3, r1
 800a7aa:	3318      	adds	r3, #24
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	78fb      	ldrb	r3, [r7, #3]
 800a7b0:	f003 010f 	and.w	r1, r3, #15
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	00db      	lsls	r3, r3, #3
 800a7ba:	440b      	add	r3, r1
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4403      	add	r3, r0
 800a7c0:	331c      	adds	r3, #28
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a7c8:	fb01 f303 	mul.w	r3, r1, r3
 800a7cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d112      	bne.n	800a7f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a7d2:	78fb      	ldrb	r3, [r7, #3]
 800a7d4:	f003 020f 	and.w	r2, r3, #15
 800a7d8:	6879      	ldr	r1, [r7, #4]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	440b      	add	r3, r1
 800a7e4:	3318      	adds	r3, #24
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a7ea:	78f9      	ldrb	r1, [r7, #3]
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f005 fa2a 	bl	800fc4a <USBD_LL_Transmit>
 800a7f6:	e01f      	b.n	800a838 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	33b0      	adds	r3, #176	; 0xb0
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d010      	beq.n	800a838 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	33b0      	adds	r3, #176	; 0xb0
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a834:	78fa      	ldrb	r2, [r7, #3]
 800a836:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b084      	sub	sp, #16
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	32b0      	adds	r2, #176	; 0xb0
 800a858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	32b0      	adds	r2, #176	; 0xb0
 800a868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a870:	2303      	movs	r3, #3
 800a872:	e01a      	b.n	800a8aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a874:	78fb      	ldrb	r3, [r7, #3]
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f005 fa28 	bl	800fcce <USBD_LL_GetRxDataSize>
 800a87e:	4602      	mov	r2, r0
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	33b0      	adds	r3, #176	; 0xb0
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	32b0      	adds	r2, #176	; 0xb0
 800a8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e025      	b.n	800a920 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	33b0      	adds	r3, #176	; 0xb0
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d01a      	beq.n	800a91e <USBD_CDC_EP0_RxReady+0x6c>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a8ee:	2bff      	cmp	r3, #255	; 0xff
 800a8f0:	d015      	beq.n	800a91e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	33b0      	adds	r3, #176	; 0xb0
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a90a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a912:	b292      	uxth	r2, r2
 800a914:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	22ff      	movs	r2, #255	; 0xff
 800a91a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a930:	2182      	movs	r1, #130	; 0x82
 800a932:	4818      	ldr	r0, [pc, #96]	; (800a994 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a934:	f000 fd4f 	bl	800b3d6 <USBD_GetEpDesc>
 800a938:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a93a:	2101      	movs	r1, #1
 800a93c:	4815      	ldr	r0, [pc, #84]	; (800a994 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a93e:	f000 fd4a 	bl	800b3d6 <USBD_GetEpDesc>
 800a942:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a944:	2181      	movs	r1, #129	; 0x81
 800a946:	4813      	ldr	r0, [pc, #76]	; (800a994 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a948:	f000 fd45 	bl	800b3d6 <USBD_GetEpDesc>
 800a94c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2210      	movs	r2, #16
 800a958:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d006      	beq.n	800a96e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	2200      	movs	r2, #0
 800a964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a968:	711a      	strb	r2, [r3, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d006      	beq.n	800a982 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a97c:	711a      	strb	r2, [r3, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2243      	movs	r2, #67	; 0x43
 800a986:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a988:	4b02      	ldr	r3, [pc, #8]	; (800a994 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3718      	adds	r7, #24
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20000068 	.word	0x20000068

0800a998 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b086      	sub	sp, #24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a9a0:	2182      	movs	r1, #130	; 0x82
 800a9a2:	4818      	ldr	r0, [pc, #96]	; (800aa04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9a4:	f000 fd17 	bl	800b3d6 <USBD_GetEpDesc>
 800a9a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	4815      	ldr	r0, [pc, #84]	; (800aa04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9ae:	f000 fd12 	bl	800b3d6 <USBD_GetEpDesc>
 800a9b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9b4:	2181      	movs	r1, #129	; 0x81
 800a9b6:	4813      	ldr	r0, [pc, #76]	; (800aa04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9b8:	f000 fd0d 	bl	800b3d6 <USBD_GetEpDesc>
 800a9bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	2210      	movs	r2, #16
 800a9c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d006      	beq.n	800a9de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	711a      	strb	r2, [r3, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f042 0202 	orr.w	r2, r2, #2
 800a9dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d006      	beq.n	800a9f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	711a      	strb	r2, [r3, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f042 0202 	orr.w	r2, r2, #2
 800a9f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2243      	movs	r2, #67	; 0x43
 800a9f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a9f8:	4b02      	ldr	r3, [pc, #8]	; (800aa04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20000068 	.word	0x20000068

0800aa08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa10:	2182      	movs	r1, #130	; 0x82
 800aa12:	4818      	ldr	r0, [pc, #96]	; (800aa74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa14:	f000 fcdf 	bl	800b3d6 <USBD_GetEpDesc>
 800aa18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	4815      	ldr	r0, [pc, #84]	; (800aa74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa1e:	f000 fcda 	bl	800b3d6 <USBD_GetEpDesc>
 800aa22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa24:	2181      	movs	r1, #129	; 0x81
 800aa26:	4813      	ldr	r0, [pc, #76]	; (800aa74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa28:	f000 fcd5 	bl	800b3d6 <USBD_GetEpDesc>
 800aa2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2210      	movs	r2, #16
 800aa38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d006      	beq.n	800aa4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa48:	711a      	strb	r2, [r3, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d006      	beq.n	800aa62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa5c:	711a      	strb	r2, [r3, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2243      	movs	r2, #67	; 0x43
 800aa66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa68:	4b02      	ldr	r3, [pc, #8]	; (800aa74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	20000068 	.word	0x20000068

0800aa78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	220a      	movs	r2, #10
 800aa84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aa86:	4b03      	ldr	r3, [pc, #12]	; (800aa94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	20000024 	.word	0x20000024

0800aa98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d101      	bne.n	800aaac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	e009      	b.n	800aac0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	33b0      	adds	r3, #176	; 0xb0
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	32b0      	adds	r2, #176	; 0xb0
 800aae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d101      	bne.n	800aaf2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e008      	b.n	800ab04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	371c      	adds	r7, #28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	32b0      	adds	r2, #176	; 0xb0
 800ab24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e004      	b.n	800ab3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
	...

0800ab4c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	32b0      	adds	r2, #176	; 0xb0
 800ab5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab62:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ab64:	2301      	movs	r3, #1
 800ab66:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e025      	b.n	800abbe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d11f      	bne.n	800abbc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ab84:	4b10      	ldr	r3, [pc, #64]	; (800abc8 <USBD_CDC_TransmitPacket+0x7c>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f003 020f 	and.w	r2, r3, #15
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4403      	add	r3, r0
 800ab9e:	3318      	adds	r3, #24
 800aba0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aba2:	4b09      	ldr	r3, [pc, #36]	; (800abc8 <USBD_CDC_TransmitPacket+0x7c>)
 800aba4:	7819      	ldrb	r1, [r3, #0]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f005 f849 	bl	800fc4a <USBD_LL_Transmit>

    ret = USBD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	200000ab 	.word	0x200000ab

0800abcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	32b0      	adds	r2, #176	; 0xb0
 800abde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	32b0      	adds	r2, #176	; 0xb0
 800abee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e018      	b.n	800ac2c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	7c1b      	ldrb	r3, [r3, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10a      	bne.n	800ac18 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac02:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <USBD_CDC_ReceivePacket+0x68>)
 800ac04:	7819      	ldrb	r1, [r3, #0]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f005 f83b 	bl	800fc8c <USBD_LL_PrepareReceive>
 800ac16:	e008      	b.n	800ac2a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac18:	4b06      	ldr	r3, [pc, #24]	; (800ac34 <USBD_CDC_ReceivePacket+0x68>)
 800ac1a:	7819      	ldrb	r1, [r3, #0]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac22:	2340      	movs	r3, #64	; 0x40
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f005 f831 	bl	800fc8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	200000ac 	.word	0x200000ac

0800ac38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d101      	bne.n	800ac50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e01f      	b.n	800ac90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	79fa      	ldrb	r2, [r7, #7]
 800ac82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f004 feab 	bl	800f9e0 <USBD_LL_Init>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800acac:	2303      	movs	r3, #3
 800acae:	e025      	b.n	800acfc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	32ae      	adds	r2, #174	; 0xae
 800acc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00f      	beq.n	800acec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	32ae      	adds	r2, #174	; 0xae
 800acd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	f107 020e 	add.w	r2, r7, #14
 800ace0:	4610      	mov	r0, r2
 800ace2:	4798      	blx	r3
 800ace4:	4602      	mov	r2, r0
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f004 feb3 	bl	800fa78 <USBD_LL_Start>
 800ad12:	4603      	mov	r3, r0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b084      	sub	sp, #16
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d009      	beq.n	800ad60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	78fa      	ldrb	r2, [r7, #3]
 800ad56:	4611      	mov	r1, r2
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	4798      	blx	r3
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	460b      	mov	r3, r1
 800ad74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	78fa      	ldrb	r2, [r7, #3]
 800ad84:	4611      	mov	r1, r2
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	4798      	blx	r3
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ad90:	2303      	movs	r3, #3
 800ad92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f001 f90e 	bl	800bfd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800adc4:	461a      	mov	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800add2:	f003 031f 	and.w	r3, r3, #31
 800add6:	2b02      	cmp	r3, #2
 800add8:	d01a      	beq.n	800ae10 <USBD_LL_SetupStage+0x72>
 800adda:	2b02      	cmp	r3, #2
 800addc:	d822      	bhi.n	800ae24 <USBD_LL_SetupStage+0x86>
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d002      	beq.n	800ade8 <USBD_LL_SetupStage+0x4a>
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d00a      	beq.n	800adfc <USBD_LL_SetupStage+0x5e>
 800ade6:	e01d      	b.n	800ae24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fb65 	bl	800b4c0 <USBD_StdDevReq>
 800adf6:	4603      	mov	r3, r0
 800adf8:	73fb      	strb	r3, [r7, #15]
      break;
 800adfa:	e020      	b.n	800ae3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fbcd 	bl	800b5a4 <USBD_StdItfReq>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae0e:	e016      	b.n	800ae3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae16:	4619      	mov	r1, r3
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fc2f 	bl	800b67c <USBD_StdEPReq>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	73fb      	strb	r3, [r7, #15]
      break;
 800ae22:	e00c      	b.n	800ae3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f004 fe80 	bl	800fb38 <USBD_LL_StallEP>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae3c:	bf00      	nop
  }

  return ret;
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	460b      	mov	r3, r1
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ae5a:	7afb      	ldrb	r3, [r7, #11]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d16e      	bne.n	800af3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae6e:	2b03      	cmp	r3, #3
 800ae70:	f040 8098 	bne.w	800afa4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	689a      	ldr	r2, [r3, #8]
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d913      	bls.n	800aea8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	689a      	ldr	r2, [r3, #8]
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	1ad2      	subs	r2, r2, r3
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	68da      	ldr	r2, [r3, #12]
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	4293      	cmp	r3, r2
 800ae98:	bf28      	it	cs
 800ae9a:	4613      	movcs	r3, r2
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f001 f98a 	bl	800c1ba <USBD_CtlContinueRx>
 800aea6:	e07d      	b.n	800afa4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aeae:	f003 031f 	and.w	r3, r3, #31
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d014      	beq.n	800aee0 <USBD_LL_DataOutStage+0x98>
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d81d      	bhi.n	800aef6 <USBD_LL_DataOutStage+0xae>
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d002      	beq.n	800aec4 <USBD_LL_DataOutStage+0x7c>
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d003      	beq.n	800aeca <USBD_LL_DataOutStage+0x82>
 800aec2:	e018      	b.n	800aef6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aec4:	2300      	movs	r3, #0
 800aec6:	75bb      	strb	r3, [r7, #22]
            break;
 800aec8:	e018      	b.n	800aefc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	4619      	mov	r1, r3
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f000 fa64 	bl	800b3a2 <USBD_CoreFindIF>
 800aeda:	4603      	mov	r3, r0
 800aedc:	75bb      	strb	r3, [r7, #22]
            break;
 800aede:	e00d      	b.n	800aefc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	4619      	mov	r1, r3
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 fa66 	bl	800b3bc <USBD_CoreFindEP>
 800aef0:	4603      	mov	r3, r0
 800aef2:	75bb      	strb	r3, [r7, #22]
            break;
 800aef4:	e002      	b.n	800aefc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aef6:	2300      	movs	r3, #0
 800aef8:	75bb      	strb	r3, [r7, #22]
            break;
 800aefa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aefc:	7dbb      	ldrb	r3, [r7, #22]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d119      	bne.n	800af36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d113      	bne.n	800af36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800af0e:	7dba      	ldrb	r2, [r7, #22]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	32ae      	adds	r2, #174	; 0xae
 800af14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00b      	beq.n	800af36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800af1e:	7dba      	ldrb	r2, [r7, #22]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800af26:	7dba      	ldrb	r2, [r7, #22]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	32ae      	adds	r2, #174	; 0xae
 800af2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f001 f950 	bl	800c1dc <USBD_CtlSendStatus>
 800af3c:	e032      	b.n	800afa4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800af3e:	7afb      	ldrb	r3, [r7, #11]
 800af40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af44:	b2db      	uxtb	r3, r3
 800af46:	4619      	mov	r1, r3
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f000 fa37 	bl	800b3bc <USBD_CoreFindEP>
 800af4e:	4603      	mov	r3, r0
 800af50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af52:	7dbb      	ldrb	r3, [r7, #22]
 800af54:	2bff      	cmp	r3, #255	; 0xff
 800af56:	d025      	beq.n	800afa4 <USBD_LL_DataOutStage+0x15c>
 800af58:	7dbb      	ldrb	r3, [r7, #22]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d122      	bne.n	800afa4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b03      	cmp	r3, #3
 800af68:	d117      	bne.n	800af9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800af6a:	7dba      	ldrb	r2, [r7, #22]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	32ae      	adds	r2, #174	; 0xae
 800af70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00f      	beq.n	800af9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800af7a:	7dba      	ldrb	r2, [r7, #22]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800af82:	7dba      	ldrb	r2, [r7, #22]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	32ae      	adds	r2, #174	; 0xae
 800af88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8c:	699b      	ldr	r3, [r3, #24]
 800af8e:	7afa      	ldrb	r2, [r7, #11]
 800af90:	4611      	mov	r1, r2
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	4798      	blx	r3
 800af96:	4603      	mov	r3, r0
 800af98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800af9a:	7dfb      	ldrb	r3, [r7, #23]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	e000      	b.n	800afa6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b086      	sub	sp, #24
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	460b      	mov	r3, r1
 800afb8:	607a      	str	r2, [r7, #4]
 800afba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800afbc:	7afb      	ldrb	r3, [r7, #11]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d16f      	bne.n	800b0a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3314      	adds	r3, #20
 800afc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d15a      	bne.n	800b088 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	689a      	ldr	r2, [r3, #8]
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d914      	bls.n	800b008 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	689a      	ldr	r2, [r3, #8]
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	1ad2      	subs	r2, r2, r3
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	461a      	mov	r2, r3
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f001 f8b2 	bl	800c15e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800affa:	2300      	movs	r3, #0
 800affc:	2200      	movs	r2, #0
 800affe:	2100      	movs	r1, #0
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f004 fe43 	bl	800fc8c <USBD_LL_PrepareReceive>
 800b006:	e03f      	b.n	800b088 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	68da      	ldr	r2, [r3, #12]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	429a      	cmp	r2, r3
 800b012:	d11c      	bne.n	800b04e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d316      	bcc.n	800b04e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d20f      	bcs.n	800b04e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b02e:	2200      	movs	r2, #0
 800b030:	2100      	movs	r1, #0
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f001 f893 	bl	800c15e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b040:	2300      	movs	r3, #0
 800b042:	2200      	movs	r2, #0
 800b044:	2100      	movs	r1, #0
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f004 fe20 	bl	800fc8c <USBD_LL_PrepareReceive>
 800b04c:	e01c      	b.n	800b088 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b054:	b2db      	uxtb	r3, r3
 800b056:	2b03      	cmp	r3, #3
 800b058:	d10f      	bne.n	800b07a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d009      	beq.n	800b07a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b07a:	2180      	movs	r1, #128	; 0x80
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f004 fd5b 	bl	800fb38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f001 f8bd 	bl	800c202 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d03a      	beq.n	800b108 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f7ff fe42 	bl	800ad1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b0a0:	e032      	b.n	800b108 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b0a2:	7afb      	ldrb	r3, [r7, #11]
 800b0a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f000 f985 	bl	800b3bc <USBD_CoreFindEP>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	2bff      	cmp	r3, #255	; 0xff
 800b0ba:	d025      	beq.n	800b108 <USBD_LL_DataInStage+0x15a>
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d122      	bne.n	800b108 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d11c      	bne.n	800b108 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b0ce:	7dfa      	ldrb	r2, [r7, #23]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	32ae      	adds	r2, #174	; 0xae
 800b0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d014      	beq.n	800b108 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b0de:	7dfa      	ldrb	r2, [r7, #23]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b0e6:	7dfa      	ldrb	r2, [r7, #23]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	32ae      	adds	r2, #174	; 0xae
 800b0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	7afa      	ldrb	r2, [r7, #11]
 800b0f4:	4611      	mov	r1, r2
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	4798      	blx	r3
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b0fe:	7dbb      	ldrb	r3, [r7, #22]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d001      	beq.n	800b108 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b104:	7dbb      	ldrb	r3, [r7, #22]
 800b106:	e000      	b.n	800b10a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d014      	beq.n	800b178 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00e      	beq.n	800b178 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	6852      	ldr	r2, [r2, #4]
 800b166:	b2d2      	uxtb	r2, r2
 800b168:	4611      	mov	r1, r2
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	4798      	blx	r3
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b174:	2303      	movs	r3, #3
 800b176:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b178:	2340      	movs	r3, #64	; 0x40
 800b17a:	2200      	movs	r2, #0
 800b17c:	2100      	movs	r1, #0
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f004 fc95 	bl	800faae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2240      	movs	r2, #64	; 0x40
 800b190:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b194:	2340      	movs	r3, #64	; 0x40
 800b196:	2200      	movs	r2, #0
 800b198:	2180      	movs	r1, #128	; 0x80
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f004 fc87 	bl	800faae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2240      	movs	r2, #64	; 0x40
 800b1aa:	621a      	str	r2, [r3, #32]

  return ret;
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	78fa      	ldrb	r2, [r7, #3]
 800b1c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b083      	sub	sp, #12
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	d006      	beq.n	800b1f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2204      	movs	r2, #4
 800b1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b04      	cmp	r3, #4
 800b220:	d106      	bne.n	800b230 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b03      	cmp	r3, #3
 800b250:	d110      	bne.n	800b274 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00b      	beq.n	800b274 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d005      	beq.n	800b274 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b26e:	69db      	ldr	r3, [r3, #28]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b082      	sub	sp, #8
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
 800b286:	460b      	mov	r3, r1
 800b288:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	32ae      	adds	r2, #174	; 0xae
 800b294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e01c      	b.n	800b2da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d115      	bne.n	800b2d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	32ae      	adds	r2, #174	; 0xae
 800b2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	32ae      	adds	r2, #174	; 0xae
 800b2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	78fa      	ldrb	r2, [r7, #3]
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b082      	sub	sp, #8
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	32ae      	adds	r2, #174	; 0xae
 800b2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d101      	bne.n	800b304 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b300:	2303      	movs	r3, #3
 800b302:	e01c      	b.n	800b33e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d115      	bne.n	800b33c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	32ae      	adds	r2, #174	; 0xae
 800b31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00b      	beq.n	800b33c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	32ae      	adds	r2, #174	; 0xae
 800b32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b334:	78fa      	ldrb	r2, [r7, #3]
 800b336:	4611      	mov	r1, r2
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00e      	beq.n	800b398 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	6852      	ldr	r2, [r2, #4]
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	4611      	mov	r1, r2
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	4798      	blx	r3
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b394:	2303      	movs	r3, #3
 800b396:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b398:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b3ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b3c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b086      	sub	sp, #24
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	885b      	ldrh	r3, [r3, #2]
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d920      	bls.n	800b440 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	b29b      	uxth	r3, r3
 800b404:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b406:	e013      	b.n	800b430 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b408:	f107 030a 	add.w	r3, r7, #10
 800b40c:	4619      	mov	r1, r3
 800b40e:	6978      	ldr	r0, [r7, #20]
 800b410:	f000 f81b 	bl	800b44a <USBD_GetNextDesc>
 800b414:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	785b      	ldrb	r3, [r3, #1]
 800b41a:	2b05      	cmp	r3, #5
 800b41c:	d108      	bne.n	800b430 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	789b      	ldrb	r3, [r3, #2]
 800b426:	78fa      	ldrb	r2, [r7, #3]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d008      	beq.n	800b43e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b42c:	2300      	movs	r3, #0
 800b42e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	885b      	ldrh	r3, [r3, #2]
 800b434:	b29a      	uxth	r2, r3
 800b436:	897b      	ldrh	r3, [r7, #10]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d8e5      	bhi.n	800b408 <USBD_GetEpDesc+0x32>
 800b43c:	e000      	b.n	800b440 <USBD_GetEpDesc+0x6a>
          break;
 800b43e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b440:	693b      	ldr	r3, [r7, #16]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	881a      	ldrh	r2, [r3, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	b29b      	uxth	r3, r3
 800b462:	4413      	add	r3, r2
 800b464:	b29a      	uxth	r2, r3
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	461a      	mov	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4413      	add	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b476:	68fb      	ldr	r3, [r7, #12]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b484:	b480      	push	{r7}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	3301      	adds	r3, #1
 800b49a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b4a2:	8a3b      	ldrh	r3, [r7, #16]
 800b4a4:	021b      	lsls	r3, r3, #8
 800b4a6:	b21a      	sxth	r2, r3
 800b4a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	b21b      	sxth	r3, r3
 800b4b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b4b2:	89fb      	ldrh	r3, [r7, #14]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4d6:	2b40      	cmp	r3, #64	; 0x40
 800b4d8:	d005      	beq.n	800b4e6 <USBD_StdDevReq+0x26>
 800b4da:	2b40      	cmp	r3, #64	; 0x40
 800b4dc:	d857      	bhi.n	800b58e <USBD_StdDevReq+0xce>
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00f      	beq.n	800b502 <USBD_StdDevReq+0x42>
 800b4e2:	2b20      	cmp	r3, #32
 800b4e4:	d153      	bne.n	800b58e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	32ae      	adds	r2, #174	; 0xae
 800b4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	4798      	blx	r3
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b500:	e04a      	b.n	800b598 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	785b      	ldrb	r3, [r3, #1]
 800b506:	2b09      	cmp	r3, #9
 800b508:	d83b      	bhi.n	800b582 <USBD_StdDevReq+0xc2>
 800b50a:	a201      	add	r2, pc, #4	; (adr r2, 800b510 <USBD_StdDevReq+0x50>)
 800b50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b510:	0800b565 	.word	0x0800b565
 800b514:	0800b579 	.word	0x0800b579
 800b518:	0800b583 	.word	0x0800b583
 800b51c:	0800b56f 	.word	0x0800b56f
 800b520:	0800b583 	.word	0x0800b583
 800b524:	0800b543 	.word	0x0800b543
 800b528:	0800b539 	.word	0x0800b539
 800b52c:	0800b583 	.word	0x0800b583
 800b530:	0800b55b 	.word	0x0800b55b
 800b534:	0800b54d 	.word	0x0800b54d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fa3c 	bl	800b9b8 <USBD_GetDescriptor>
          break;
 800b540:	e024      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fba1 	bl	800bc8c <USBD_SetAddress>
          break;
 800b54a:	e01f      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 fbe0 	bl	800bd14 <USBD_SetConfig>
 800b554:	4603      	mov	r3, r0
 800b556:	73fb      	strb	r3, [r7, #15]
          break;
 800b558:	e018      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 fc83 	bl	800be68 <USBD_GetConfig>
          break;
 800b562:	e013      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fcb4 	bl	800bed4 <USBD_GetStatus>
          break;
 800b56c:	e00e      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fce3 	bl	800bf3c <USBD_SetFeature>
          break;
 800b576:	e009      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fd07 	bl	800bf8e <USBD_ClrFeature>
          break;
 800b580:	e004      	b.n	800b58c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fd5e 	bl	800c046 <USBD_CtlError>
          break;
 800b58a:	bf00      	nop
      }
      break;
 800b58c:	e004      	b.n	800b598 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fd58 	bl	800c046 <USBD_CtlError>
      break;
 800b596:	bf00      	nop
  }

  return ret;
 800b598:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop

0800b5a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5ba:	2b40      	cmp	r3, #64	; 0x40
 800b5bc:	d005      	beq.n	800b5ca <USBD_StdItfReq+0x26>
 800b5be:	2b40      	cmp	r3, #64	; 0x40
 800b5c0:	d852      	bhi.n	800b668 <USBD_StdItfReq+0xc4>
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <USBD_StdItfReq+0x26>
 800b5c6:	2b20      	cmp	r3, #32
 800b5c8:	d14e      	bne.n	800b668 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d840      	bhi.n	800b65a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	889b      	ldrh	r3, [r3, #4]
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d836      	bhi.n	800b650 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	889b      	ldrh	r3, [r3, #4]
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff fed9 	bl	800b3a2 <USBD_CoreFindIF>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	2bff      	cmp	r3, #255	; 0xff
 800b5f8:	d01d      	beq.n	800b636 <USBD_StdItfReq+0x92>
 800b5fa:	7bbb      	ldrb	r3, [r7, #14]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d11a      	bne.n	800b636 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b600:	7bba      	ldrb	r2, [r7, #14]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	32ae      	adds	r2, #174	; 0xae
 800b606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00f      	beq.n	800b630 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b610:	7bba      	ldrb	r2, [r7, #14]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b618:	7bba      	ldrb	r2, [r7, #14]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	32ae      	adds	r2, #174	; 0xae
 800b61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	4798      	blx	r3
 800b62a:	4603      	mov	r3, r0
 800b62c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b62e:	e004      	b.n	800b63a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b630:	2303      	movs	r3, #3
 800b632:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b634:	e001      	b.n	800b63a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b636:	2303      	movs	r3, #3
 800b638:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	88db      	ldrh	r3, [r3, #6]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d110      	bne.n	800b664 <USBD_StdItfReq+0xc0>
 800b642:	7bfb      	ldrb	r3, [r7, #15]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10d      	bne.n	800b664 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 fdc7 	bl	800c1dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b64e:	e009      	b.n	800b664 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b650:	6839      	ldr	r1, [r7, #0]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fcf7 	bl	800c046 <USBD_CtlError>
          break;
 800b658:	e004      	b.n	800b664 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fcf2 	bl	800c046 <USBD_CtlError>
          break;
 800b662:	e000      	b.n	800b666 <USBD_StdItfReq+0xc2>
          break;
 800b664:	bf00      	nop
      }
      break;
 800b666:	e004      	b.n	800b672 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fceb 	bl	800c046 <USBD_CtlError>
      break;
 800b670:	bf00      	nop
  }

  return ret;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	889b      	ldrh	r3, [r3, #4]
 800b68e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b698:	2b40      	cmp	r3, #64	; 0x40
 800b69a:	d007      	beq.n	800b6ac <USBD_StdEPReq+0x30>
 800b69c:	2b40      	cmp	r3, #64	; 0x40
 800b69e:	f200 817f 	bhi.w	800b9a0 <USBD_StdEPReq+0x324>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d02a      	beq.n	800b6fc <USBD_StdEPReq+0x80>
 800b6a6:	2b20      	cmp	r3, #32
 800b6a8:	f040 817a 	bne.w	800b9a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b6ac:	7bbb      	ldrb	r3, [r7, #14]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff fe83 	bl	800b3bc <USBD_CoreFindEP>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6ba:	7b7b      	ldrb	r3, [r7, #13]
 800b6bc:	2bff      	cmp	r3, #255	; 0xff
 800b6be:	f000 8174 	beq.w	800b9aa <USBD_StdEPReq+0x32e>
 800b6c2:	7b7b      	ldrb	r3, [r7, #13]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f040 8170 	bne.w	800b9aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b6ca:	7b7a      	ldrb	r2, [r7, #13]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b6d2:	7b7a      	ldrb	r2, [r7, #13]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	32ae      	adds	r2, #174	; 0xae
 800b6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f000 8163 	beq.w	800b9aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b6e4:	7b7a      	ldrb	r2, [r7, #13]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	32ae      	adds	r2, #174	; 0xae
 800b6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	4798      	blx	r3
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b6fa:	e156      	b.n	800b9aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	785b      	ldrb	r3, [r3, #1]
 800b700:	2b03      	cmp	r3, #3
 800b702:	d008      	beq.n	800b716 <USBD_StdEPReq+0x9a>
 800b704:	2b03      	cmp	r3, #3
 800b706:	f300 8145 	bgt.w	800b994 <USBD_StdEPReq+0x318>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	f000 809b 	beq.w	800b846 <USBD_StdEPReq+0x1ca>
 800b710:	2b01      	cmp	r3, #1
 800b712:	d03c      	beq.n	800b78e <USBD_StdEPReq+0x112>
 800b714:	e13e      	b.n	800b994 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d002      	beq.n	800b728 <USBD_StdEPReq+0xac>
 800b722:	2b03      	cmp	r3, #3
 800b724:	d016      	beq.n	800b754 <USBD_StdEPReq+0xd8>
 800b726:	e02c      	b.n	800b782 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b728:	7bbb      	ldrb	r3, [r7, #14]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00d      	beq.n	800b74a <USBD_StdEPReq+0xce>
 800b72e:	7bbb      	ldrb	r3, [r7, #14]
 800b730:	2b80      	cmp	r3, #128	; 0x80
 800b732:	d00a      	beq.n	800b74a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b734:	7bbb      	ldrb	r3, [r7, #14]
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f004 f9fd 	bl	800fb38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b73e:	2180      	movs	r1, #128	; 0x80
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f004 f9f9 	bl	800fb38 <USBD_LL_StallEP>
 800b746:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b748:	e020      	b.n	800b78c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fc7a 	bl	800c046 <USBD_CtlError>
              break;
 800b752:	e01b      	b.n	800b78c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	885b      	ldrh	r3, [r3, #2]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10e      	bne.n	800b77a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <USBD_StdEPReq+0xfe>
 800b762:	7bbb      	ldrb	r3, [r7, #14]
 800b764:	2b80      	cmp	r3, #128	; 0x80
 800b766:	d008      	beq.n	800b77a <USBD_StdEPReq+0xfe>
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	88db      	ldrh	r3, [r3, #6]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d104      	bne.n	800b77a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f004 f9df 	bl	800fb38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fd2e 	bl	800c1dc <USBD_CtlSendStatus>

              break;
 800b780:	e004      	b.n	800b78c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fc5e 	bl	800c046 <USBD_CtlError>
              break;
 800b78a:	bf00      	nop
          }
          break;
 800b78c:	e107      	b.n	800b99e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b02      	cmp	r3, #2
 800b798:	d002      	beq.n	800b7a0 <USBD_StdEPReq+0x124>
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d016      	beq.n	800b7cc <USBD_StdEPReq+0x150>
 800b79e:	e04b      	b.n	800b838 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7a0:	7bbb      	ldrb	r3, [r7, #14]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00d      	beq.n	800b7c2 <USBD_StdEPReq+0x146>
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
 800b7a8:	2b80      	cmp	r3, #128	; 0x80
 800b7aa:	d00a      	beq.n	800b7c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7ac:	7bbb      	ldrb	r3, [r7, #14]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f004 f9c1 	bl	800fb38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7b6:	2180      	movs	r1, #128	; 0x80
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f004 f9bd 	bl	800fb38 <USBD_LL_StallEP>
 800b7be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b7c0:	e040      	b.n	800b844 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fc3e 	bl	800c046 <USBD_CtlError>
              break;
 800b7ca:	e03b      	b.n	800b844 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	885b      	ldrh	r3, [r3, #2]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d136      	bne.n	800b842 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
 800b7d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d004      	beq.n	800b7e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f004 f9c7 	bl	800fb76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fcf7 	bl	800c1dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b7ee:	7bbb      	ldrb	r3, [r7, #14]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff fde2 	bl	800b3bc <USBD_CoreFindEP>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7fc:	7b7b      	ldrb	r3, [r7, #13]
 800b7fe:	2bff      	cmp	r3, #255	; 0xff
 800b800:	d01f      	beq.n	800b842 <USBD_StdEPReq+0x1c6>
 800b802:	7b7b      	ldrb	r3, [r7, #13]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d11c      	bne.n	800b842 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b808:	7b7a      	ldrb	r2, [r7, #13]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b810:	7b7a      	ldrb	r2, [r7, #13]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	32ae      	adds	r2, #174	; 0xae
 800b816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d010      	beq.n	800b842 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b820:	7b7a      	ldrb	r2, [r7, #13]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	32ae      	adds	r2, #174	; 0xae
 800b826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	4798      	blx	r3
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b836:	e004      	b.n	800b842 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fc03 	bl	800c046 <USBD_CtlError>
              break;
 800b840:	e000      	b.n	800b844 <USBD_StdEPReq+0x1c8>
              break;
 800b842:	bf00      	nop
          }
          break;
 800b844:	e0ab      	b.n	800b99e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b02      	cmp	r3, #2
 800b850:	d002      	beq.n	800b858 <USBD_StdEPReq+0x1dc>
 800b852:	2b03      	cmp	r3, #3
 800b854:	d032      	beq.n	800b8bc <USBD_StdEPReq+0x240>
 800b856:	e097      	b.n	800b988 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d007      	beq.n	800b86e <USBD_StdEPReq+0x1f2>
 800b85e:	7bbb      	ldrb	r3, [r7, #14]
 800b860:	2b80      	cmp	r3, #128	; 0x80
 800b862:	d004      	beq.n	800b86e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fbed 	bl	800c046 <USBD_CtlError>
                break;
 800b86c:	e091      	b.n	800b992 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b86e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b872:	2b00      	cmp	r3, #0
 800b874:	da0b      	bge.n	800b88e <USBD_StdEPReq+0x212>
 800b876:	7bbb      	ldrb	r3, [r7, #14]
 800b878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b87c:	4613      	mov	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	3310      	adds	r3, #16
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	4413      	add	r3, r2
 800b88a:	3304      	adds	r3, #4
 800b88c:	e00b      	b.n	800b8a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b894:	4613      	mov	r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fc37 	bl	800c128 <USBD_CtlSendData>
              break;
 800b8ba:	e06a      	b.n	800b992 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b8bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	da11      	bge.n	800b8e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b8c4:	7bbb      	ldrb	r3, [r7, #14]
 800b8c6:	f003 020f 	and.w	r2, r3, #15
 800b8ca:	6879      	ldr	r1, [r7, #4]
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	440b      	add	r3, r1
 800b8d6:	3324      	adds	r3, #36	; 0x24
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d117      	bne.n	800b90e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fbb0 	bl	800c046 <USBD_CtlError>
                  break;
 800b8e6:	e054      	b.n	800b992 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	f003 020f 	and.w	r2, r3, #15
 800b8ee:	6879      	ldr	r1, [r7, #4]
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	440b      	add	r3, r1
 800b8fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b8fe:	881b      	ldrh	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d104      	bne.n	800b90e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fb9d 	bl	800c046 <USBD_CtlError>
                  break;
 800b90c:	e041      	b.n	800b992 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b90e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b912:	2b00      	cmp	r3, #0
 800b914:	da0b      	bge.n	800b92e <USBD_StdEPReq+0x2b2>
 800b916:	7bbb      	ldrb	r3, [r7, #14]
 800b918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	3310      	adds	r3, #16
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	4413      	add	r3, r2
 800b92a:	3304      	adds	r3, #4
 800b92c:	e00b      	b.n	800b946 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b92e:	7bbb      	ldrb	r3, [r7, #14]
 800b930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b934:	4613      	mov	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4413      	add	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	4413      	add	r3, r2
 800b944:	3304      	adds	r3, #4
 800b946:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b948:	7bbb      	ldrb	r3, [r7, #14]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d002      	beq.n	800b954 <USBD_StdEPReq+0x2d8>
 800b94e:	7bbb      	ldrb	r3, [r7, #14]
 800b950:	2b80      	cmp	r3, #128	; 0x80
 800b952:	d103      	bne.n	800b95c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2200      	movs	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
 800b95a:	e00e      	b.n	800b97a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f004 f927 	bl	800fbb4 <USBD_LL_IsStallEP>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d003      	beq.n	800b974 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	2201      	movs	r2, #1
 800b970:	601a      	str	r2, [r3, #0]
 800b972:	e002      	b.n	800b97a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2202      	movs	r2, #2
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fbd1 	bl	800c128 <USBD_CtlSendData>
              break;
 800b986:	e004      	b.n	800b992 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fb5b 	bl	800c046 <USBD_CtlError>
              break;
 800b990:	bf00      	nop
          }
          break;
 800b992:	e004      	b.n	800b99e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fb55 	bl	800c046 <USBD_CtlError>
          break;
 800b99c:	bf00      	nop
      }
      break;
 800b99e:	e005      	b.n	800b9ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fb4f 	bl	800c046 <USBD_CtlError>
      break;
 800b9a8:	e000      	b.n	800b9ac <USBD_StdEPReq+0x330>
      break;
 800b9aa:	bf00      	nop
  }

  return ret;
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
	...

0800b9b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	885b      	ldrh	r3, [r3, #2]
 800b9d2:	0a1b      	lsrs	r3, r3, #8
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	2b06      	cmp	r3, #6
 800b9da:	f200 8128 	bhi.w	800bc2e <USBD_GetDescriptor+0x276>
 800b9de:	a201      	add	r2, pc, #4	; (adr r2, 800b9e4 <USBD_GetDescriptor+0x2c>)
 800b9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e4:	0800ba01 	.word	0x0800ba01
 800b9e8:	0800ba19 	.word	0x0800ba19
 800b9ec:	0800ba59 	.word	0x0800ba59
 800b9f0:	0800bc2f 	.word	0x0800bc2f
 800b9f4:	0800bc2f 	.word	0x0800bc2f
 800b9f8:	0800bbcf 	.word	0x0800bbcf
 800b9fc:	0800bbfb 	.word	0x0800bbfb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	7c12      	ldrb	r2, [r2, #16]
 800ba0c:	f107 0108 	add.w	r1, r7, #8
 800ba10:	4610      	mov	r0, r2
 800ba12:	4798      	blx	r3
 800ba14:	60f8      	str	r0, [r7, #12]
      break;
 800ba16:	e112      	b.n	800bc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	7c1b      	ldrb	r3, [r3, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10d      	bne.n	800ba3c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba28:	f107 0208 	add.w	r2, r7, #8
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	4798      	blx	r3
 800ba30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	3301      	adds	r3, #1
 800ba36:	2202      	movs	r2, #2
 800ba38:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ba3a:	e100      	b.n	800bc3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba44:	f107 0208 	add.w	r2, r7, #8
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4798      	blx	r3
 800ba4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3301      	adds	r3, #1
 800ba52:	2202      	movs	r2, #2
 800ba54:	701a      	strb	r2, [r3, #0]
      break;
 800ba56:	e0f2      	b.n	800bc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	885b      	ldrh	r3, [r3, #2]
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b05      	cmp	r3, #5
 800ba60:	f200 80ac 	bhi.w	800bbbc <USBD_GetDescriptor+0x204>
 800ba64:	a201      	add	r2, pc, #4	; (adr r2, 800ba6c <USBD_GetDescriptor+0xb4>)
 800ba66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6a:	bf00      	nop
 800ba6c:	0800ba85 	.word	0x0800ba85
 800ba70:	0800bab9 	.word	0x0800bab9
 800ba74:	0800baed 	.word	0x0800baed
 800ba78:	0800bb21 	.word	0x0800bb21
 800ba7c:	0800bb55 	.word	0x0800bb55
 800ba80:	0800bb89 	.word	0x0800bb89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00b      	beq.n	800baa8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	7c12      	ldrb	r2, [r2, #16]
 800ba9c:	f107 0108 	add.w	r1, r7, #8
 800baa0:	4610      	mov	r0, r2
 800baa2:	4798      	blx	r3
 800baa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baa6:	e091      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 facb 	bl	800c046 <USBD_CtlError>
            err++;
 800bab0:	7afb      	ldrb	r3, [r7, #11]
 800bab2:	3301      	adds	r3, #1
 800bab4:	72fb      	strb	r3, [r7, #11]
          break;
 800bab6:	e089      	b.n	800bbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00b      	beq.n	800badc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	7c12      	ldrb	r2, [r2, #16]
 800bad0:	f107 0108 	add.w	r1, r7, #8
 800bad4:	4610      	mov	r0, r2
 800bad6:	4798      	blx	r3
 800bad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bada:	e077      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fab1 	bl	800c046 <USBD_CtlError>
            err++;
 800bae4:	7afb      	ldrb	r3, [r7, #11]
 800bae6:	3301      	adds	r3, #1
 800bae8:	72fb      	strb	r3, [r7, #11]
          break;
 800baea:	e06f      	b.n	800bbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00b      	beq.n	800bb10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	7c12      	ldrb	r2, [r2, #16]
 800bb04:	f107 0108 	add.w	r1, r7, #8
 800bb08:	4610      	mov	r0, r2
 800bb0a:	4798      	blx	r3
 800bb0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb0e:	e05d      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fa97 	bl	800c046 <USBD_CtlError>
            err++;
 800bb18:	7afb      	ldrb	r3, [r7, #11]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb1e:	e055      	b.n	800bbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00b      	beq.n	800bb44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	7c12      	ldrb	r2, [r2, #16]
 800bb38:	f107 0108 	add.w	r1, r7, #8
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	4798      	blx	r3
 800bb40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb42:	e043      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb44:	6839      	ldr	r1, [r7, #0]
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 fa7d 	bl	800c046 <USBD_CtlError>
            err++;
 800bb4c:	7afb      	ldrb	r3, [r7, #11]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	72fb      	strb	r3, [r7, #11]
          break;
 800bb52:	e03b      	b.n	800bbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00b      	beq.n	800bb78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	7c12      	ldrb	r2, [r2, #16]
 800bb6c:	f107 0108 	add.w	r1, r7, #8
 800bb70:	4610      	mov	r0, r2
 800bb72:	4798      	blx	r3
 800bb74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb76:	e029      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fa63 	bl	800c046 <USBD_CtlError>
            err++;
 800bb80:	7afb      	ldrb	r3, [r7, #11]
 800bb82:	3301      	adds	r3, #1
 800bb84:	72fb      	strb	r3, [r7, #11]
          break;
 800bb86:	e021      	b.n	800bbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00b      	beq.n	800bbac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	7c12      	ldrb	r2, [r2, #16]
 800bba0:	f107 0108 	add.w	r1, r7, #8
 800bba4:	4610      	mov	r0, r2
 800bba6:	4798      	blx	r3
 800bba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbaa:	e00f      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 fa49 	bl	800c046 <USBD_CtlError>
            err++;
 800bbb4:	7afb      	ldrb	r3, [r7, #11]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbba:	e007      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bbbc:	6839      	ldr	r1, [r7, #0]
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fa41 	bl	800c046 <USBD_CtlError>
          err++;
 800bbc4:	7afb      	ldrb	r3, [r7, #11]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bbca:	bf00      	nop
      }
      break;
 800bbcc:	e037      	b.n	800bc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	7c1b      	ldrb	r3, [r3, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d109      	bne.n	800bbea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbde:	f107 0208 	add.w	r2, r7, #8
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	4798      	blx	r3
 800bbe6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbe8:	e029      	b.n	800bc3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fa2a 	bl	800c046 <USBD_CtlError>
        err++;
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	72fb      	strb	r3, [r7, #11]
      break;
 800bbf8:	e021      	b.n	800bc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	7c1b      	ldrb	r3, [r3, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10d      	bne.n	800bc1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0a:	f107 0208 	add.w	r2, r7, #8
 800bc0e:	4610      	mov	r0, r2
 800bc10:	4798      	blx	r3
 800bc12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3301      	adds	r3, #1
 800bc18:	2207      	movs	r2, #7
 800bc1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc1c:	e00f      	b.n	800bc3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fa10 	bl	800c046 <USBD_CtlError>
        err++;
 800bc26:	7afb      	ldrb	r3, [r7, #11]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	72fb      	strb	r3, [r7, #11]
      break;
 800bc2c:	e007      	b.n	800bc3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fa08 	bl	800c046 <USBD_CtlError>
      err++;
 800bc36:	7afb      	ldrb	r3, [r7, #11]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	72fb      	strb	r3, [r7, #11]
      break;
 800bc3c:	bf00      	nop
  }

  if (err != 0U)
 800bc3e:	7afb      	ldrb	r3, [r7, #11]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d11e      	bne.n	800bc82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	88db      	ldrh	r3, [r3, #6]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d016      	beq.n	800bc7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bc4c:	893b      	ldrh	r3, [r7, #8]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00e      	beq.n	800bc70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	88da      	ldrh	r2, [r3, #6]
 800bc56:	893b      	ldrh	r3, [r7, #8]
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	bf28      	it	cs
 800bc5c:	4613      	movcs	r3, r2
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc62:	893b      	ldrh	r3, [r7, #8]
 800bc64:	461a      	mov	r2, r3
 800bc66:	68f9      	ldr	r1, [r7, #12]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fa5d 	bl	800c128 <USBD_CtlSendData>
 800bc6e:	e009      	b.n	800bc84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f9e7 	bl	800c046 <USBD_CtlError>
 800bc78:	e004      	b.n	800bc84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 faae 	bl	800c1dc <USBD_CtlSendStatus>
 800bc80:	e000      	b.n	800bc84 <USBD_GetDescriptor+0x2cc>
    return;
 800bc82:	bf00      	nop
  }
}
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop

0800bc8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	889b      	ldrh	r3, [r3, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d131      	bne.n	800bd02 <USBD_SetAddress+0x76>
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	88db      	ldrh	r3, [r3, #6]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d12d      	bne.n	800bd02 <USBD_SetAddress+0x76>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	885b      	ldrh	r3, [r3, #2]
 800bcaa:	2b7f      	cmp	r3, #127	; 0x7f
 800bcac:	d829      	bhi.n	800bd02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	885b      	ldrh	r3, [r3, #2]
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b03      	cmp	r3, #3
 800bcc4:	d104      	bne.n	800bcd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f9bc 	bl	800c046 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcce:	e01d      	b.n	800bd0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	7bfa      	ldrb	r2, [r7, #15]
 800bcd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f003 ff95 	bl	800fc0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fa7a 	bl	800c1dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d004      	beq.n	800bcf8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2202      	movs	r2, #2
 800bcf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf6:	e009      	b.n	800bd0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd00:	e004      	b.n	800bd0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f99e 	bl	800c046 <USBD_CtlError>
  }
}
 800bd0a:	bf00      	nop
 800bd0c:	bf00      	nop
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	885b      	ldrh	r3, [r3, #2]
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	4b4e      	ldr	r3, [pc, #312]	; (800be64 <USBD_SetConfig+0x150>)
 800bd2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd2c:	4b4d      	ldr	r3, [pc, #308]	; (800be64 <USBD_SetConfig+0x150>)
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d905      	bls.n	800bd40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bd34:	6839      	ldr	r1, [r7, #0]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f985 	bl	800c046 <USBD_CtlError>
    return USBD_FAIL;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e08c      	b.n	800be5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b02      	cmp	r3, #2
 800bd4a:	d002      	beq.n	800bd52 <USBD_SetConfig+0x3e>
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d029      	beq.n	800bda4 <USBD_SetConfig+0x90>
 800bd50:	e075      	b.n	800be3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bd52:	4b44      	ldr	r3, [pc, #272]	; (800be64 <USBD_SetConfig+0x150>)
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d020      	beq.n	800bd9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bd5a:	4b42      	ldr	r3, [pc, #264]	; (800be64 <USBD_SetConfig+0x150>)
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd64:	4b3f      	ldr	r3, [pc, #252]	; (800be64 <USBD_SetConfig+0x150>)
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7fe ffe1 	bl	800ad32 <USBD_SetClassConfig>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d008      	beq.n	800bd8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bd7a:	6839      	ldr	r1, [r7, #0]
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 f962 	bl	800c046 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2202      	movs	r2, #2
 800bd86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd8a:	e065      	b.n	800be58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fa25 	bl	800c1dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2203      	movs	r2, #3
 800bd96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bd9a:	e05d      	b.n	800be58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fa1d 	bl	800c1dc <USBD_CtlSendStatus>
      break;
 800bda2:	e059      	b.n	800be58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bda4:	4b2f      	ldr	r3, [pc, #188]	; (800be64 <USBD_SetConfig+0x150>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d112      	bne.n	800bdd2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2202      	movs	r2, #2
 800bdb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bdb4:	4b2b      	ldr	r3, [pc, #172]	; (800be64 <USBD_SetConfig+0x150>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdbe:	4b29      	ldr	r3, [pc, #164]	; (800be64 <USBD_SetConfig+0x150>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7fe ffd0 	bl	800ad6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fa06 	bl	800c1dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bdd0:	e042      	b.n	800be58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bdd2:	4b24      	ldr	r3, [pc, #144]	; (800be64 <USBD_SetConfig+0x150>)
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d02a      	beq.n	800be36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7fe ffbe 	bl	800ad6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bdee:	4b1d      	ldr	r3, [pc, #116]	; (800be64 <USBD_SetConfig+0x150>)
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bdf8:	4b1a      	ldr	r3, [pc, #104]	; (800be64 <USBD_SetConfig+0x150>)
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7fe ff97 	bl	800ad32 <USBD_SetClassConfig>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00f      	beq.n	800be2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f918 	bl	800c046 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	4619      	mov	r1, r3
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7fe ffa3 	bl	800ad6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2202      	movs	r2, #2
 800be28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800be2c:	e014      	b.n	800be58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 f9d4 	bl	800c1dc <USBD_CtlSendStatus>
      break;
 800be34:	e010      	b.n	800be58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f9d0 	bl	800c1dc <USBD_CtlSendStatus>
      break;
 800be3c:	e00c      	b.n	800be58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 f900 	bl	800c046 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be46:	4b07      	ldr	r3, [pc, #28]	; (800be64 <USBD_SetConfig+0x150>)
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7fe ff8c 	bl	800ad6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800be52:	2303      	movs	r3, #3
 800be54:	73fb      	strb	r3, [r7, #15]
      break;
 800be56:	bf00      	nop
  }

  return ret;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	20002e78 	.word	0x20002e78

0800be68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	88db      	ldrh	r3, [r3, #6]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d004      	beq.n	800be84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f8e2 	bl	800c046 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800be82:	e023      	b.n	800becc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	dc02      	bgt.n	800be96 <USBD_GetConfig+0x2e>
 800be90:	2b00      	cmp	r3, #0
 800be92:	dc03      	bgt.n	800be9c <USBD_GetConfig+0x34>
 800be94:	e015      	b.n	800bec2 <USBD_GetConfig+0x5a>
 800be96:	2b03      	cmp	r3, #3
 800be98:	d00b      	beq.n	800beb2 <USBD_GetConfig+0x4a>
 800be9a:	e012      	b.n	800bec2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	3308      	adds	r3, #8
 800bea6:	2201      	movs	r2, #1
 800bea8:	4619      	mov	r1, r3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f93c 	bl	800c128 <USBD_CtlSendData>
        break;
 800beb0:	e00c      	b.n	800becc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3304      	adds	r3, #4
 800beb6:	2201      	movs	r2, #1
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f934 	bl	800c128 <USBD_CtlSendData>
        break;
 800bec0:	e004      	b.n	800becc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f8be 	bl	800c046 <USBD_CtlError>
        break;
 800beca:	bf00      	nop
}
 800becc:	bf00      	nop
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	3b01      	subs	r3, #1
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d81e      	bhi.n	800bf2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	88db      	ldrh	r3, [r3, #6]
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d004      	beq.n	800befe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f8a5 	bl	800c046 <USBD_CtlError>
        break;
 800befc:	e01a      	b.n	800bf34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d005      	beq.n	800bf1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f043 0202 	orr.w	r2, r3, #2
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	330c      	adds	r3, #12
 800bf1e:	2202      	movs	r2, #2
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f900 	bl	800c128 <USBD_CtlSendData>
      break;
 800bf28:	e004      	b.n	800bf34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 f88a 	bl	800c046 <USBD_CtlError>
      break;
 800bf32:	bf00      	nop
  }
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	885b      	ldrh	r3, [r3, #2]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d107      	bne.n	800bf5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 f940 	bl	800c1dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bf5c:	e013      	b.n	800bf86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	885b      	ldrh	r3, [r3, #2]
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d10b      	bne.n	800bf7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	889b      	ldrh	r3, [r3, #4]
 800bf6a:	0a1b      	lsrs	r3, r3, #8
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f930 	bl	800c1dc <USBD_CtlSendStatus>
}
 800bf7c:	e003      	b.n	800bf86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 f860 	bl	800c046 <USBD_CtlError>
}
 800bf86:	bf00      	nop
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b082      	sub	sp, #8
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d80b      	bhi.n	800bfbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	885b      	ldrh	r3, [r3, #2]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d10c      	bne.n	800bfc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f910 	bl	800c1dc <USBD_CtlSendStatus>
      }
      break;
 800bfbc:	e004      	b.n	800bfc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f840 	bl	800c046 <USBD_CtlError>
      break;
 800bfc6:	e000      	b.n	800bfca <USBD_ClrFeature+0x3c>
      break;
 800bfc8:	bf00      	nop
  }
}
 800bfca:	bf00      	nop
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	781a      	ldrb	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	3301      	adds	r3, #1
 800bfec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	781a      	ldrb	r2, [r3, #0]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3301      	adds	r3, #1
 800bffa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f7ff fa41 	bl	800b484 <SWAPBYTE>
 800c002:	4603      	mov	r3, r0
 800c004:	461a      	mov	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	3301      	adds	r3, #1
 800c00e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3301      	adds	r3, #1
 800c014:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f7ff fa34 	bl	800b484 <SWAPBYTE>
 800c01c:	4603      	mov	r3, r0
 800c01e:	461a      	mov	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3301      	adds	r3, #1
 800c028:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	3301      	adds	r3, #1
 800c02e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f7ff fa27 	bl	800b484 <SWAPBYTE>
 800c036:	4603      	mov	r3, r0
 800c038:	461a      	mov	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	80da      	strh	r2, [r3, #6]
}
 800c03e:	bf00      	nop
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b082      	sub	sp, #8
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c050:	2180      	movs	r1, #128	; 0x80
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f003 fd70 	bl	800fb38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c058:	2100      	movs	r1, #0
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f003 fd6c 	bl	800fb38 <USBD_LL_StallEP>
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c074:	2300      	movs	r3, #0
 800c076:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d036      	beq.n	800c0ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c082:	6938      	ldr	r0, [r7, #16]
 800c084:	f000 f836 	bl	800c0f4 <USBD_GetLen>
 800c088:	4603      	mov	r3, r0
 800c08a:	3301      	adds	r3, #1
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	b29a      	uxth	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c096:	7dfb      	ldrb	r3, [r7, #23]
 800c098:	68ba      	ldr	r2, [r7, #8]
 800c09a:	4413      	add	r3, r2
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	7812      	ldrb	r2, [r2, #0]
 800c0a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c0a8:	7dfb      	ldrb	r3, [r7, #23]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	2203      	movs	r2, #3
 800c0b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c0b8:	e013      	b.n	800c0e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c0ba:	7dfb      	ldrb	r3, [r7, #23]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	4413      	add	r3, r2
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	7812      	ldrb	r2, [r2, #0]
 800c0c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	613b      	str	r3, [r7, #16]
    idx++;
 800c0cc:	7dfb      	ldrb	r3, [r7, #23]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c0d2:	7dfb      	ldrb	r3, [r7, #23]
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	2200      	movs	r2, #0
 800c0da:	701a      	strb	r2, [r3, #0]
    idx++;
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1e7      	bne.n	800c0ba <USBD_GetString+0x52>
 800c0ea:	e000      	b.n	800c0ee <USBD_GetString+0x86>
    return;
 800c0ec:	bf00      	nop
  }
}
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c104:	e005      	b.n	800c112 <USBD_GetLen+0x1e>
  {
    len++;
 800c106:	7bfb      	ldrb	r3, [r7, #15]
 800c108:	3301      	adds	r3, #1
 800c10a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	3301      	adds	r3, #1
 800c110:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1f5      	bne.n	800c106 <USBD_GetLen+0x12>
  }

  return len;
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2202      	movs	r2, #2
 800c138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	2100      	movs	r1, #0
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f003 fd7b 	bl	800fc4a <USBD_LL_Transmit>

  return USBD_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	60f8      	str	r0, [r7, #12]
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	2100      	movs	r1, #0
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f003 fd6a 	bl	800fc4a <USBD_LL_Transmit>

  return USBD_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2203      	movs	r2, #3
 800c190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f003 fd6e 	bl	800fc8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b084      	sub	sp, #16
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	60f8      	str	r0, [r7, #12]
 800c1c2:	60b9      	str	r1, [r7, #8]
 800c1c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f003 fd5d 	bl	800fc8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1d2:	2300      	movs	r3, #0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2204      	movs	r2, #4
 800c1e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f003 fd29 	bl	800fc4a <USBD_LL_Transmit>

  return USBD_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2205      	movs	r2, #5
 800c20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c212:	2300      	movs	r3, #0
 800c214:	2200      	movs	r2, #0
 800c216:	2100      	movs	r1, #0
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f003 fd37 	bl	800fc8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c232:	79fb      	ldrb	r3, [r7, #7]
 800c234:	4a08      	ldr	r2, [pc, #32]	; (800c258 <disk_status+0x30>)
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	4413      	add	r3, r2
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	79fa      	ldrb	r2, [r7, #7]
 800c240:	4905      	ldr	r1, [pc, #20]	; (800c258 <disk_status+0x30>)
 800c242:	440a      	add	r2, r1
 800c244:	7a12      	ldrb	r2, [r2, #8]
 800c246:	4610      	mov	r0, r2
 800c248:	4798      	blx	r3
 800c24a:	4603      	mov	r3, r0
 800c24c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	200030a4 	.word	0x200030a4

0800c25c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	4603      	mov	r3, r0
 800c264:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c26a:	79fb      	ldrb	r3, [r7, #7]
 800c26c:	4a0e      	ldr	r2, [pc, #56]	; (800c2a8 <disk_initialize+0x4c>)
 800c26e:	5cd3      	ldrb	r3, [r2, r3]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d114      	bne.n	800c29e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c274:	79fb      	ldrb	r3, [r7, #7]
 800c276:	4a0c      	ldr	r2, [pc, #48]	; (800c2a8 <disk_initialize+0x4c>)
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4413      	add	r3, r2
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	79fa      	ldrb	r2, [r7, #7]
 800c282:	4909      	ldr	r1, [pc, #36]	; (800c2a8 <disk_initialize+0x4c>)
 800c284:	440a      	add	r2, r1
 800c286:	7a12      	ldrb	r2, [r2, #8]
 800c288:	4610      	mov	r0, r2
 800c28a:	4798      	blx	r3
 800c28c:	4603      	mov	r3, r0
 800c28e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c290:	7bfb      	ldrb	r3, [r7, #15]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d103      	bne.n	800c29e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c296:	79fb      	ldrb	r3, [r7, #7]
 800c298:	4a03      	ldr	r2, [pc, #12]	; (800c2a8 <disk_initialize+0x4c>)
 800c29a:	2101      	movs	r1, #1
 800c29c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	200030a4 	.word	0x200030a4

0800c2ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c2ac:	b590      	push	{r4, r7, lr}
 800c2ae:	b087      	sub	sp, #28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60b9      	str	r1, [r7, #8]
 800c2b4:	607a      	str	r2, [r7, #4]
 800c2b6:	603b      	str	r3, [r7, #0]
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c2bc:	7bfb      	ldrb	r3, [r7, #15]
 800c2be:	4a0a      	ldr	r2, [pc, #40]	; (800c2e8 <disk_read+0x3c>)
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	689c      	ldr	r4, [r3, #8]
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ca:	4a07      	ldr	r2, [pc, #28]	; (800c2e8 <disk_read+0x3c>)
 800c2cc:	4413      	add	r3, r2
 800c2ce:	7a18      	ldrb	r0, [r3, #8]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	68b9      	ldr	r1, [r7, #8]
 800c2d6:	47a0      	blx	r4
 800c2d8:	4603      	mov	r3, r0
 800c2da:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	371c      	adds	r7, #28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd90      	pop	{r4, r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	200030a4 	.word	0x200030a4

0800c2ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c2ec:	b590      	push	{r4, r7, lr}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
 800c2f6:	603b      	str	r3, [r7, #0]
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
 800c2fe:	4a0a      	ldr	r2, [pc, #40]	; (800c328 <disk_write+0x3c>)
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	68dc      	ldr	r4, [r3, #12]
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	4a07      	ldr	r2, [pc, #28]	; (800c328 <disk_write+0x3c>)
 800c30c:	4413      	add	r3, r2
 800c30e:	7a18      	ldrb	r0, [r3, #8]
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	68b9      	ldr	r1, [r7, #8]
 800c316:	47a0      	blx	r4
 800c318:	4603      	mov	r3, r0
 800c31a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	371c      	adds	r7, #28
 800c322:	46bd      	mov	sp, r7
 800c324:	bd90      	pop	{r4, r7, pc}
 800c326:	bf00      	nop
 800c328:	200030a4 	.word	0x200030a4

0800c32c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	4603      	mov	r3, r0
 800c334:	603a      	str	r2, [r7, #0]
 800c336:	71fb      	strb	r3, [r7, #7]
 800c338:	460b      	mov	r3, r1
 800c33a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c33c:	79fb      	ldrb	r3, [r7, #7]
 800c33e:	4a09      	ldr	r2, [pc, #36]	; (800c364 <disk_ioctl+0x38>)
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	4413      	add	r3, r2
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	79fa      	ldrb	r2, [r7, #7]
 800c34a:	4906      	ldr	r1, [pc, #24]	; (800c364 <disk_ioctl+0x38>)
 800c34c:	440a      	add	r2, r1
 800c34e:	7a10      	ldrb	r0, [r2, #8]
 800c350:	79b9      	ldrb	r1, [r7, #6]
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	4798      	blx	r3
 800c356:	4603      	mov	r3, r0
 800c358:	73fb      	strb	r3, [r7, #15]
  return res;
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	200030a4 	.word	0x200030a4

0800c368 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	3301      	adds	r3, #1
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c378:	89fb      	ldrh	r3, [r7, #14]
 800c37a:	021b      	lsls	r3, r3, #8
 800c37c:	b21a      	sxth	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b21b      	sxth	r3, r3
 800c384:	4313      	orrs	r3, r2
 800c386:	b21b      	sxth	r3, r3
 800c388:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c38a:	89fb      	ldrh	r3, [r7, #14]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	3303      	adds	r3, #3
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	021b      	lsls	r3, r3, #8
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	3202      	adds	r2, #2
 800c3b0:	7812      	ldrb	r2, [r2, #0]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	021b      	lsls	r3, r3, #8
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	3201      	adds	r2, #1
 800c3be:	7812      	ldrb	r2, [r2, #0]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	021b      	lsls	r3, r3, #8
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	7812      	ldrb	r2, [r2, #0]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	60fb      	str	r3, [r7, #12]
	return rv;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	1c5a      	adds	r2, r3, #1
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	887a      	ldrh	r2, [r7, #2]
 800c3f2:	b2d2      	uxtb	r2, r2
 800c3f4:	701a      	strb	r2, [r3, #0]
 800c3f6:	887b      	ldrh	r3, [r7, #2]
 800c3f8:	0a1b      	lsrs	r3, r3, #8
 800c3fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	607a      	str	r2, [r7, #4]
 800c402:	887a      	ldrh	r2, [r7, #2]
 800c404:	b2d2      	uxtb	r2, r2
 800c406:	701a      	strb	r2, [r3, #0]
}
 800c408:	bf00      	nop
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	683a      	ldr	r2, [r7, #0]
 800c426:	b2d2      	uxtb	r2, r2
 800c428:	701a      	strb	r2, [r3, #0]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	0a1b      	lsrs	r3, r3, #8
 800c42e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	607a      	str	r2, [r7, #4]
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	b2d2      	uxtb	r2, r2
 800c43a:	701a      	strb	r2, [r3, #0]
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	0a1b      	lsrs	r3, r3, #8
 800c440:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	1c5a      	adds	r2, r3, #1
 800c446:	607a      	str	r2, [r7, #4]
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	b2d2      	uxtb	r2, r2
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	0a1b      	lsrs	r3, r3, #8
 800c452:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	1c5a      	adds	r2, r3, #1
 800c458:	607a      	str	r2, [r7, #4]
 800c45a:	683a      	ldr	r2, [r7, #0]
 800c45c:	b2d2      	uxtb	r2, r2
 800c45e:	701a      	strb	r2, [r3, #0]
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c46c:	b480      	push	{r7}
 800c46e:	b087      	sub	sp, #28
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00d      	beq.n	800c4a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	1c53      	adds	r3, r2, #1
 800c48a:	613b      	str	r3, [r7, #16]
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	1c59      	adds	r1, r3, #1
 800c490:	6179      	str	r1, [r7, #20]
 800c492:	7812      	ldrb	r2, [r2, #0]
 800c494:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	3b01      	subs	r3, #1
 800c49a:	607b      	str	r3, [r7, #4]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1f1      	bne.n	800c486 <mem_cpy+0x1a>
	}
}
 800c4a2:	bf00      	nop
 800c4a4:	371c      	adds	r7, #28
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c4ae:	b480      	push	{r7}
 800c4b0:	b087      	sub	sp, #28
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	60f8      	str	r0, [r7, #12]
 800c4b6:	60b9      	str	r1, [r7, #8]
 800c4b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	617a      	str	r2, [r7, #20]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	b2d2      	uxtb	r2, r2
 800c4c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	607b      	str	r3, [r7, #4]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1f3      	bne.n	800c4be <mem_set+0x10>
}
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	371c      	adds	r7, #28
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c4e4:	b480      	push	{r7}
 800c4e6:	b089      	sub	sp, #36	; 0x24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	61fb      	str	r3, [r7, #28]
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	1c5a      	adds	r2, r3, #1
 800c500:	61fa      	str	r2, [r7, #28]
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	4619      	mov	r1, r3
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	1c5a      	adds	r2, r3, #1
 800c50a:	61ba      	str	r2, [r7, #24]
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	1acb      	subs	r3, r1, r3
 800c510:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	3b01      	subs	r3, #1
 800c516:	607b      	str	r3, [r7, #4]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <mem_cmp+0x40>
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d0eb      	beq.n	800c4fc <mem_cmp+0x18>

	return r;
 800c524:	697b      	ldr	r3, [r7, #20]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3724      	adds	r7, #36	; 0x24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c53c:	e002      	b.n	800c544 <chk_chr+0x12>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	3301      	adds	r3, #1
 800c542:	607b      	str	r3, [r7, #4]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d005      	beq.n	800c558 <chk_chr+0x26>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	461a      	mov	r2, r3
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	4293      	cmp	r3, r2
 800c556:	d1f2      	bne.n	800c53e <chk_chr+0xc>
	return *str;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	781b      	ldrb	r3, [r3, #0]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c572:	2300      	movs	r3, #0
 800c574:	60bb      	str	r3, [r7, #8]
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	60fb      	str	r3, [r7, #12]
 800c57a:	e029      	b.n	800c5d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c57c:	4a27      	ldr	r2, [pc, #156]	; (800c61c <chk_lock+0xb4>)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	011b      	lsls	r3, r3, #4
 800c582:	4413      	add	r3, r2
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d01d      	beq.n	800c5c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c58a:	4a24      	ldr	r2, [pc, #144]	; (800c61c <chk_lock+0xb4>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	011b      	lsls	r3, r3, #4
 800c590:	4413      	add	r3, r2
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d116      	bne.n	800c5ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c59c:	4a1f      	ldr	r2, [pc, #124]	; (800c61c <chk_lock+0xb4>)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	011b      	lsls	r3, r3, #4
 800c5a2:	4413      	add	r3, r2
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d10c      	bne.n	800c5ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5b0:	4a1a      	ldr	r2, [pc, #104]	; (800c61c <chk_lock+0xb4>)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	011b      	lsls	r3, r3, #4
 800c5b6:	4413      	add	r3, r2
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d102      	bne.n	800c5ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5c4:	e007      	b.n	800c5d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	60fb      	str	r3, [r7, #12]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d9d2      	bls.n	800c57c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d109      	bne.n	800c5f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d102      	bne.n	800c5e8 <chk_lock+0x80>
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d101      	bne.n	800c5ec <chk_lock+0x84>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e010      	b.n	800c60e <chk_lock+0xa6>
 800c5ec:	2312      	movs	r3, #18
 800c5ee:	e00e      	b.n	800c60e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d108      	bne.n	800c608 <chk_lock+0xa0>
 800c5f6:	4a09      	ldr	r2, [pc, #36]	; (800c61c <chk_lock+0xb4>)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	011b      	lsls	r3, r3, #4
 800c5fc:	4413      	add	r3, r2
 800c5fe:	330c      	adds	r3, #12
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c606:	d101      	bne.n	800c60c <chk_lock+0xa4>
 800c608:	2310      	movs	r3, #16
 800c60a:	e000      	b.n	800c60e <chk_lock+0xa6>
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	20002e84 	.word	0x20002e84

0800c620 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c626:	2300      	movs	r3, #0
 800c628:	607b      	str	r3, [r7, #4]
 800c62a:	e002      	b.n	800c632 <enq_lock+0x12>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3301      	adds	r3, #1
 800c630:	607b      	str	r3, [r7, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d806      	bhi.n	800c646 <enq_lock+0x26>
 800c638:	4a09      	ldr	r2, [pc, #36]	; (800c660 <enq_lock+0x40>)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	011b      	lsls	r3, r3, #4
 800c63e:	4413      	add	r3, r2
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1f2      	bne.n	800c62c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b02      	cmp	r3, #2
 800c64a:	bf14      	ite	ne
 800c64c:	2301      	movne	r3, #1
 800c64e:	2300      	moveq	r3, #0
 800c650:	b2db      	uxtb	r3, r3
}
 800c652:	4618      	mov	r0, r3
 800c654:	370c      	adds	r7, #12
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	20002e84 	.word	0x20002e84

0800c664 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c66e:	2300      	movs	r3, #0
 800c670:	60fb      	str	r3, [r7, #12]
 800c672:	e01f      	b.n	800c6b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c674:	4a41      	ldr	r2, [pc, #260]	; (800c77c <inc_lock+0x118>)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	011b      	lsls	r3, r3, #4
 800c67a:	4413      	add	r3, r2
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	429a      	cmp	r2, r3
 800c684:	d113      	bne.n	800c6ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c686:	4a3d      	ldr	r2, [pc, #244]	; (800c77c <inc_lock+0x118>)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	011b      	lsls	r3, r3, #4
 800c68c:	4413      	add	r3, r2
 800c68e:	3304      	adds	r3, #4
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c696:	429a      	cmp	r2, r3
 800c698:	d109      	bne.n	800c6ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c69a:	4a38      	ldr	r2, [pc, #224]	; (800c77c <inc_lock+0x118>)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	011b      	lsls	r3, r3, #4
 800c6a0:	4413      	add	r3, r2
 800c6a2:	3308      	adds	r3, #8
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d006      	beq.n	800c6bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d9dc      	bls.n	800c674 <inc_lock+0x10>
 800c6ba:	e000      	b.n	800c6be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c6bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d132      	bne.n	800c72a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	60fb      	str	r3, [r7, #12]
 800c6c8:	e002      	b.n	800c6d0 <inc_lock+0x6c>
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	60fb      	str	r3, [r7, #12]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d806      	bhi.n	800c6e4 <inc_lock+0x80>
 800c6d6:	4a29      	ldr	r2, [pc, #164]	; (800c77c <inc_lock+0x118>)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	4413      	add	r3, r2
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1f2      	bne.n	800c6ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d101      	bne.n	800c6ee <inc_lock+0x8a>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e040      	b.n	800c770 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	4922      	ldr	r1, [pc, #136]	; (800c77c <inc_lock+0x118>)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	011b      	lsls	r3, r3, #4
 800c6f8:	440b      	add	r3, r1
 800c6fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	491e      	ldr	r1, [pc, #120]	; (800c77c <inc_lock+0x118>)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	011b      	lsls	r3, r3, #4
 800c706:	440b      	add	r3, r1
 800c708:	3304      	adds	r3, #4
 800c70a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	695a      	ldr	r2, [r3, #20]
 800c710:	491a      	ldr	r1, [pc, #104]	; (800c77c <inc_lock+0x118>)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	011b      	lsls	r3, r3, #4
 800c716:	440b      	add	r3, r1
 800c718:	3308      	adds	r3, #8
 800c71a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c71c:	4a17      	ldr	r2, [pc, #92]	; (800c77c <inc_lock+0x118>)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	011b      	lsls	r3, r3, #4
 800c722:	4413      	add	r3, r2
 800c724:	330c      	adds	r3, #12
 800c726:	2200      	movs	r2, #0
 800c728:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d009      	beq.n	800c744 <inc_lock+0xe0>
 800c730:	4a12      	ldr	r2, [pc, #72]	; (800c77c <inc_lock+0x118>)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	011b      	lsls	r3, r3, #4
 800c736:	4413      	add	r3, r2
 800c738:	330c      	adds	r3, #12
 800c73a:	881b      	ldrh	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <inc_lock+0xe0>
 800c740:	2300      	movs	r3, #0
 800c742:	e015      	b.n	800c770 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d108      	bne.n	800c75c <inc_lock+0xf8>
 800c74a:	4a0c      	ldr	r2, [pc, #48]	; (800c77c <inc_lock+0x118>)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	011b      	lsls	r3, r3, #4
 800c750:	4413      	add	r3, r2
 800c752:	330c      	adds	r3, #12
 800c754:	881b      	ldrh	r3, [r3, #0]
 800c756:	3301      	adds	r3, #1
 800c758:	b29a      	uxth	r2, r3
 800c75a:	e001      	b.n	800c760 <inc_lock+0xfc>
 800c75c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c760:	4906      	ldr	r1, [pc, #24]	; (800c77c <inc_lock+0x118>)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	011b      	lsls	r3, r3, #4
 800c766:	440b      	add	r3, r1
 800c768:	330c      	adds	r3, #12
 800c76a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	3301      	adds	r3, #1
}
 800c770:	4618      	mov	r0, r3
 800c772:	3714      	adds	r7, #20
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr
 800c77c:	20002e84 	.word	0x20002e84

0800c780 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	607b      	str	r3, [r7, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d825      	bhi.n	800c7e0 <dec_lock+0x60>
		n = Files[i].ctr;
 800c794:	4a17      	ldr	r2, [pc, #92]	; (800c7f4 <dec_lock+0x74>)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	011b      	lsls	r3, r3, #4
 800c79a:	4413      	add	r3, r2
 800c79c:	330c      	adds	r3, #12
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c7a2:	89fb      	ldrh	r3, [r7, #14]
 800c7a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7a8:	d101      	bne.n	800c7ae <dec_lock+0x2e>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c7ae:	89fb      	ldrh	r3, [r7, #14]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <dec_lock+0x3a>
 800c7b4:	89fb      	ldrh	r3, [r7, #14]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c7ba:	4a0e      	ldr	r2, [pc, #56]	; (800c7f4 <dec_lock+0x74>)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	011b      	lsls	r3, r3, #4
 800c7c0:	4413      	add	r3, r2
 800c7c2:	330c      	adds	r3, #12
 800c7c4:	89fa      	ldrh	r2, [r7, #14]
 800c7c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c7c8:	89fb      	ldrh	r3, [r7, #14]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d105      	bne.n	800c7da <dec_lock+0x5a>
 800c7ce:	4a09      	ldr	r2, [pc, #36]	; (800c7f4 <dec_lock+0x74>)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	011b      	lsls	r3, r3, #4
 800c7d4:	4413      	add	r3, r2
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	737b      	strb	r3, [r7, #13]
 800c7de:	e001      	b.n	800c7e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c7e0:	2302      	movs	r3, #2
 800c7e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c7e4:	7b7b      	ldrb	r3, [r7, #13]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	20002e84 	.word	0x20002e84

0800c7f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b085      	sub	sp, #20
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c800:	2300      	movs	r3, #0
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	e010      	b.n	800c828 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c806:	4a0d      	ldr	r2, [pc, #52]	; (800c83c <clear_lock+0x44>)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	011b      	lsls	r3, r3, #4
 800c80c:	4413      	add	r3, r2
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	429a      	cmp	r2, r3
 800c814:	d105      	bne.n	800c822 <clear_lock+0x2a>
 800c816:	4a09      	ldr	r2, [pc, #36]	; (800c83c <clear_lock+0x44>)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	011b      	lsls	r3, r3, #4
 800c81c:	4413      	add	r3, r2
 800c81e:	2200      	movs	r2, #0
 800c820:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d9eb      	bls.n	800c806 <clear_lock+0xe>
	}
}
 800c82e:	bf00      	nop
 800c830:	bf00      	nop
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	20002e84 	.word	0x20002e84

0800c840 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c848:	2300      	movs	r3, #0
 800c84a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	78db      	ldrb	r3, [r3, #3]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d034      	beq.n	800c8be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c858:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	7858      	ldrb	r0, [r3, #1]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c864:	2301      	movs	r3, #1
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	f7ff fd40 	bl	800c2ec <disk_write>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d002      	beq.n	800c878 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c872:	2301      	movs	r3, #1
 800c874:	73fb      	strb	r3, [r7, #15]
 800c876:	e022      	b.n	800c8be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	1ad2      	subs	r2, r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d217      	bcs.n	800c8be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	789b      	ldrb	r3, [r3, #2]
 800c892:	613b      	str	r3, [r7, #16]
 800c894:	e010      	b.n	800c8b8 <sync_window+0x78>
					wsect += fs->fsize;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a1b      	ldr	r3, [r3, #32]
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	4413      	add	r3, r2
 800c89e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	7858      	ldrb	r0, [r3, #1]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	f7ff fd1d 	bl	800c2ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	613b      	str	r3, [r7, #16]
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d8eb      	bhi.n	800c896 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3718      	adds	r7, #24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d01b      	beq.n	800c918 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f7ff ffad 	bl	800c840 <sync_window>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c8ea:	7bfb      	ldrb	r3, [r7, #15]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d113      	bne.n	800c918 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	7858      	ldrb	r0, [r3, #1]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	f7ff fcd5 	bl	800c2ac <disk_read>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d004      	beq.n	800c912 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c908:	f04f 33ff 	mov.w	r3, #4294967295
 800c90c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c90e:	2301      	movs	r3, #1
 800c910:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c918:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
	...

0800c924 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f7ff ff87 	bl	800c840 <sync_window>
 800c932:	4603      	mov	r3, r0
 800c934:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d159      	bne.n	800c9f0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	2b03      	cmp	r3, #3
 800c942:	d149      	bne.n	800c9d8 <sync_fs+0xb4>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	791b      	ldrb	r3, [r3, #4]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d145      	bne.n	800c9d8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	899b      	ldrh	r3, [r3, #12]
 800c956:	461a      	mov	r2, r3
 800c958:	2100      	movs	r1, #0
 800c95a:	f7ff fda8 	bl	800c4ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	3338      	adds	r3, #56	; 0x38
 800c962:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c966:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7ff fd37 	bl	800c3de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3338      	adds	r3, #56	; 0x38
 800c974:	4921      	ldr	r1, [pc, #132]	; (800c9fc <sync_fs+0xd8>)
 800c976:	4618      	mov	r0, r3
 800c978:	f7ff fd4c 	bl	800c414 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	3338      	adds	r3, #56	; 0x38
 800c980:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c984:	491e      	ldr	r1, [pc, #120]	; (800ca00 <sync_fs+0xdc>)
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff fd44 	bl	800c414 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3338      	adds	r3, #56	; 0x38
 800c990:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	699b      	ldr	r3, [r3, #24]
 800c998:	4619      	mov	r1, r3
 800c99a:	4610      	mov	r0, r2
 800c99c:	f7ff fd3a 	bl	800c414 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	3338      	adds	r3, #56	; 0x38
 800c9a4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	695b      	ldr	r3, [r3, #20]
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	f7ff fd30 	bl	800c414 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b8:	1c5a      	adds	r2, r3, #1
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	7858      	ldrb	r0, [r3, #1]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	f7ff fc8d 	bl	800c2ec <disk_write>
			fs->fsi_flag = 0;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	785b      	ldrb	r3, [r3, #1]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	2100      	movs	r1, #0
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff fca3 	bl	800c32c <disk_ioctl>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <sync_fs+0xcc>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	41615252 	.word	0x41615252
 800ca00:	61417272 	.word	0x61417272

0800ca04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	3b02      	subs	r3, #2
 800ca12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	69db      	ldr	r3, [r3, #28]
 800ca18:	3b02      	subs	r3, #2
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d301      	bcc.n	800ca24 <clust2sect+0x20>
 800ca20:	2300      	movs	r3, #0
 800ca22:	e008      	b.n	800ca36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	895b      	ldrh	r3, [r3, #10]
 800ca28:	461a      	mov	r2, r3
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	fb03 f202 	mul.w	r2, r3, r2
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca34:	4413      	add	r3, r2
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	370c      	adds	r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b086      	sub	sp, #24
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d904      	bls.n	800ca62 <get_fat+0x20>
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	69db      	ldr	r3, [r3, #28]
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d302      	bcc.n	800ca68 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ca62:	2301      	movs	r3, #1
 800ca64:	617b      	str	r3, [r7, #20]
 800ca66:	e0bb      	b.n	800cbe0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ca68:	f04f 33ff 	mov.w	r3, #4294967295
 800ca6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	f000 8083 	beq.w	800cb7e <get_fat+0x13c>
 800ca78:	2b03      	cmp	r3, #3
 800ca7a:	f300 80a7 	bgt.w	800cbcc <get_fat+0x18a>
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d002      	beq.n	800ca88 <get_fat+0x46>
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d056      	beq.n	800cb34 <get_fat+0xf2>
 800ca86:	e0a1      	b.n	800cbcc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	60fb      	str	r3, [r7, #12]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	085b      	lsrs	r3, r3, #1
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	899b      	ldrh	r3, [r3, #12]
 800ca9e:	4619      	mov	r1, r3
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	fbb3 f3f1 	udiv	r3, r3, r1
 800caa6:	4413      	add	r3, r2
 800caa8:	4619      	mov	r1, r3
 800caaa:	6938      	ldr	r0, [r7, #16]
 800caac:	f7ff ff0c 	bl	800c8c8 <move_window>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f040 808d 	bne.w	800cbd2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	1c5a      	adds	r2, r3, #1
 800cabc:	60fa      	str	r2, [r7, #12]
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	8992      	ldrh	r2, [r2, #12]
 800cac2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cac6:	fb01 f202 	mul.w	r2, r1, r2
 800caca:	1a9b      	subs	r3, r3, r2
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	4413      	add	r3, r2
 800cad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cad4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	899b      	ldrh	r3, [r3, #12]
 800cade:	4619      	mov	r1, r3
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	fbb3 f3f1 	udiv	r3, r3, r1
 800cae6:	4413      	add	r3, r2
 800cae8:	4619      	mov	r1, r3
 800caea:	6938      	ldr	r0, [r7, #16]
 800caec:	f7ff feec 	bl	800c8c8 <move_window>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d16f      	bne.n	800cbd6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	899b      	ldrh	r3, [r3, #12]
 800cafa:	461a      	mov	r2, r3
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb02:	fb01 f202 	mul.w	r2, r1, r2
 800cb06:	1a9b      	subs	r3, r3, r2
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cb10:	021b      	lsls	r3, r3, #8
 800cb12:	461a      	mov	r2, r3
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	f003 0301 	and.w	r3, r3, #1
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d002      	beq.n	800cb2a <get_fat+0xe8>
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	091b      	lsrs	r3, r3, #4
 800cb28:	e002      	b.n	800cb30 <get_fat+0xee>
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb30:	617b      	str	r3, [r7, #20]
			break;
 800cb32:	e055      	b.n	800cbe0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	899b      	ldrh	r3, [r3, #12]
 800cb3c:	085b      	lsrs	r3, r3, #1
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	4619      	mov	r1, r3
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb48:	4413      	add	r3, r2
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6938      	ldr	r0, [r7, #16]
 800cb4e:	f7ff febb 	bl	800c8c8 <move_window>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d140      	bne.n	800cbda <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	005b      	lsls	r3, r3, #1
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	8992      	ldrh	r2, [r2, #12]
 800cb66:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb6a:	fb00 f202 	mul.w	r2, r0, r2
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	440b      	add	r3, r1
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7ff fbf8 	bl	800c368 <ld_word>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	617b      	str	r3, [r7, #20]
			break;
 800cb7c:	e030      	b.n	800cbe0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	899b      	ldrh	r3, [r3, #12]
 800cb86:	089b      	lsrs	r3, r3, #2
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb92:	4413      	add	r3, r2
 800cb94:	4619      	mov	r1, r3
 800cb96:	6938      	ldr	r0, [r7, #16]
 800cb98:	f7ff fe96 	bl	800c8c8 <move_window>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d11d      	bne.n	800cbde <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	8992      	ldrh	r2, [r2, #12]
 800cbb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbb4:	fb00 f202 	mul.w	r2, r0, r2
 800cbb8:	1a9b      	subs	r3, r3, r2
 800cbba:	440b      	add	r3, r1
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7ff fbeb 	bl	800c398 <ld_dword>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cbc8:	617b      	str	r3, [r7, #20]
			break;
 800cbca:	e009      	b.n	800cbe0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cbcc:	2301      	movs	r3, #1
 800cbce:	617b      	str	r3, [r7, #20]
 800cbd0:	e006      	b.n	800cbe0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbd2:	bf00      	nop
 800cbd4:	e004      	b.n	800cbe0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbd6:	bf00      	nop
 800cbd8:	e002      	b.n	800cbe0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cbda:	bf00      	nop
 800cbdc:	e000      	b.n	800cbe0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cbde:	bf00      	nop
		}
	}

	return val;
 800cbe0:	697b      	ldr	r3, [r7, #20]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cbea:	b590      	push	{r4, r7, lr}
 800cbec:	b089      	sub	sp, #36	; 0x24
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	60b9      	str	r1, [r7, #8]
 800cbf4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cbf6:	2302      	movs	r3, #2
 800cbf8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	f240 8109 	bls.w	800ce14 <put_fat+0x22a>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	69db      	ldr	r3, [r3, #28]
 800cc06:	68ba      	ldr	r2, [r7, #8]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	f080 8103 	bcs.w	800ce14 <put_fat+0x22a>
		switch (fs->fs_type) {
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	f000 80b6 	beq.w	800cd84 <put_fat+0x19a>
 800cc18:	2b03      	cmp	r3, #3
 800cc1a:	f300 80fb 	bgt.w	800ce14 <put_fat+0x22a>
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d003      	beq.n	800cc2a <put_fat+0x40>
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	f000 8083 	beq.w	800cd2e <put_fat+0x144>
 800cc28:	e0f4      	b.n	800ce14 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	61bb      	str	r3, [r7, #24]
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	085b      	lsrs	r3, r3, #1
 800cc32:	69ba      	ldr	r2, [r7, #24]
 800cc34:	4413      	add	r3, r2
 800cc36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	899b      	ldrh	r3, [r3, #12]
 800cc40:	4619      	mov	r1, r3
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc48:	4413      	add	r3, r2
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f7ff fe3b 	bl	800c8c8 <move_window>
 800cc52:	4603      	mov	r3, r0
 800cc54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc56:	7ffb      	ldrb	r3, [r7, #31]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f040 80d4 	bne.w	800ce06 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	61ba      	str	r2, [r7, #24]
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	8992      	ldrh	r2, [r2, #12]
 800cc6e:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc72:	fb00 f202 	mul.w	r2, r0, r2
 800cc76:	1a9b      	subs	r3, r3, r2
 800cc78:	440b      	add	r3, r1
 800cc7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	f003 0301 	and.w	r3, r3, #1
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00d      	beq.n	800cca2 <put_fat+0xb8>
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	b25b      	sxtb	r3, r3
 800cc8c:	f003 030f 	and.w	r3, r3, #15
 800cc90:	b25a      	sxtb	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	011b      	lsls	r3, r3, #4
 800cc98:	b25b      	sxtb	r3, r3
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	b25b      	sxtb	r3, r3
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	e001      	b.n	800cca6 <put_fat+0xbc>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	697a      	ldr	r2, [r7, #20]
 800cca8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2201      	movs	r2, #1
 800ccae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	899b      	ldrh	r3, [r3, #12]
 800ccb8:	4619      	mov	r1, r3
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	fbb3 f3f1 	udiv	r3, r3, r1
 800ccc0:	4413      	add	r3, r2
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f7ff fdff 	bl	800c8c8 <move_window>
 800ccca:	4603      	mov	r3, r0
 800cccc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccce:	7ffb      	ldrb	r3, [r7, #31]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f040 809a 	bne.w	800ce0a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	899b      	ldrh	r3, [r3, #12]
 800cce0:	461a      	mov	r2, r3
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	fbb3 f0f2 	udiv	r0, r3, r2
 800cce8:	fb00 f202 	mul.w	r2, r0, r2
 800ccec:	1a9b      	subs	r3, r3, r2
 800ccee:	440b      	add	r3, r1
 800ccf0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	f003 0301 	and.w	r3, r3, #1
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d003      	beq.n	800cd04 <put_fat+0x11a>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	091b      	lsrs	r3, r3, #4
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	e00e      	b.n	800cd22 <put_fat+0x138>
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	b25b      	sxtb	r3, r3
 800cd0a:	f023 030f 	bic.w	r3, r3, #15
 800cd0e:	b25a      	sxtb	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	0a1b      	lsrs	r3, r3, #8
 800cd14:	b25b      	sxtb	r3, r3
 800cd16:	f003 030f 	and.w	r3, r3, #15
 800cd1a:	b25b      	sxtb	r3, r3
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	b25b      	sxtb	r3, r3
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	697a      	ldr	r2, [r7, #20]
 800cd24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	70da      	strb	r2, [r3, #3]
			break;
 800cd2c:	e072      	b.n	800ce14 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	899b      	ldrh	r3, [r3, #12]
 800cd36:	085b      	lsrs	r3, r3, #1
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd42:	4413      	add	r3, r2
 800cd44:	4619      	mov	r1, r3
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f7ff fdbe 	bl	800c8c8 <move_window>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd50:	7ffb      	ldrb	r3, [r7, #31]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d15b      	bne.n	800ce0e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	68fa      	ldr	r2, [r7, #12]
 800cd62:	8992      	ldrh	r2, [r2, #12]
 800cd64:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd68:	fb00 f202 	mul.w	r2, r0, r2
 800cd6c:	1a9b      	subs	r3, r3, r2
 800cd6e:	440b      	add	r3, r1
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	b292      	uxth	r2, r2
 800cd74:	4611      	mov	r1, r2
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7ff fb31 	bl	800c3de <st_word>
			fs->wflag = 1;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	70da      	strb	r2, [r3, #3]
			break;
 800cd82:	e047      	b.n	800ce14 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	899b      	ldrh	r3, [r3, #12]
 800cd8c:	089b      	lsrs	r3, r3, #2
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	4619      	mov	r1, r3
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd98:	4413      	add	r3, r2
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f7ff fd93 	bl	800c8c8 <move_window>
 800cda2:	4603      	mov	r3, r0
 800cda4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cda6:	7ffb      	ldrb	r3, [r7, #31]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d132      	bne.n	800ce12 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	8992      	ldrh	r2, [r2, #12]
 800cdc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdc4:	fb00 f202 	mul.w	r2, r0, r2
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	440b      	add	r3, r1
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7ff fae3 	bl	800c398 <ld_dword>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cdd8:	4323      	orrs	r3, r4
 800cdda:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	8992      	ldrh	r2, [r2, #12]
 800cdea:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdee:	fb00 f202 	mul.w	r2, r0, r2
 800cdf2:	1a9b      	subs	r3, r3, r2
 800cdf4:	440b      	add	r3, r1
 800cdf6:	6879      	ldr	r1, [r7, #4]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7ff fb0b 	bl	800c414 <st_dword>
			fs->wflag = 1;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2201      	movs	r2, #1
 800ce02:	70da      	strb	r2, [r3, #3]
			break;
 800ce04:	e006      	b.n	800ce14 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ce06:	bf00      	nop
 800ce08:	e004      	b.n	800ce14 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ce0a:	bf00      	nop
 800ce0c:	e002      	b.n	800ce14 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ce0e:	bf00      	nop
 800ce10:	e000      	b.n	800ce14 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ce12:	bf00      	nop
		}
	}
	return res;
 800ce14:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3724      	adds	r7, #36	; 0x24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd90      	pop	{r4, r7, pc}

0800ce1e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b088      	sub	sp, #32
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	60f8      	str	r0, [r7, #12]
 800ce26:	60b9      	str	r1, [r7, #8]
 800ce28:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d904      	bls.n	800ce44 <remove_chain+0x26>
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	69db      	ldr	r3, [r3, #28]
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d301      	bcc.n	800ce48 <remove_chain+0x2a>
 800ce44:	2302      	movs	r3, #2
 800ce46:	e04b      	b.n	800cee0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00c      	beq.n	800ce68 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ce4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce52:	6879      	ldr	r1, [r7, #4]
 800ce54:	69b8      	ldr	r0, [r7, #24]
 800ce56:	f7ff fec8 	bl	800cbea <put_fat>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ce5e:	7ffb      	ldrb	r3, [r7, #31]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d001      	beq.n	800ce68 <remove_chain+0x4a>
 800ce64:	7ffb      	ldrb	r3, [r7, #31]
 800ce66:	e03b      	b.n	800cee0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ce68:	68b9      	ldr	r1, [r7, #8]
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f7ff fde9 	bl	800ca42 <get_fat>
 800ce70:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d031      	beq.n	800cedc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d101      	bne.n	800ce82 <remove_chain+0x64>
 800ce7e:	2302      	movs	r3, #2
 800ce80:	e02e      	b.n	800cee0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce88:	d101      	bne.n	800ce8e <remove_chain+0x70>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e028      	b.n	800cee0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ce8e:	2200      	movs	r2, #0
 800ce90:	68b9      	ldr	r1, [r7, #8]
 800ce92:	69b8      	ldr	r0, [r7, #24]
 800ce94:	f7ff fea9 	bl	800cbea <put_fat>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ce9c:	7ffb      	ldrb	r3, [r7, #31]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d001      	beq.n	800cea6 <remove_chain+0x88>
 800cea2:	7ffb      	ldrb	r3, [r7, #31]
 800cea4:	e01c      	b.n	800cee0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	699a      	ldr	r2, [r3, #24]
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	69db      	ldr	r3, [r3, #28]
 800ceae:	3b02      	subs	r3, #2
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d20b      	bcs.n	800cecc <remove_chain+0xae>
			fs->free_clst++;
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	699b      	ldr	r3, [r3, #24]
 800ceb8:	1c5a      	adds	r2, r3, #1
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	791b      	ldrb	r3, [r3, #4]
 800cec2:	f043 0301 	orr.w	r3, r3, #1
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	69db      	ldr	r3, [r3, #28]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d3c6      	bcc.n	800ce68 <remove_chain+0x4a>
 800ceda:	e000      	b.n	800cede <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cedc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3720      	adds	r7, #32
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b088      	sub	sp, #32
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d10d      	bne.n	800cf1a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	695b      	ldr	r3, [r3, #20]
 800cf02:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d004      	beq.n	800cf14 <create_chain+0x2c>
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	69db      	ldr	r3, [r3, #28]
 800cf0e:	69ba      	ldr	r2, [r7, #24]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d31b      	bcc.n	800cf4c <create_chain+0x64>
 800cf14:	2301      	movs	r3, #1
 800cf16:	61bb      	str	r3, [r7, #24]
 800cf18:	e018      	b.n	800cf4c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cf1a:	6839      	ldr	r1, [r7, #0]
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7ff fd90 	bl	800ca42 <get_fat>
 800cf22:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d801      	bhi.n	800cf2e <create_chain+0x46>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e070      	b.n	800d010 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf34:	d101      	bne.n	800cf3a <create_chain+0x52>
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	e06a      	b.n	800d010 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	69db      	ldr	r3, [r3, #28]
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d201      	bcs.n	800cf48 <create_chain+0x60>
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	e063      	b.n	800d010 <create_chain+0x128>
		scl = clst;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	3301      	adds	r3, #1
 800cf54:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	69db      	ldr	r3, [r3, #28]
 800cf5a:	69fa      	ldr	r2, [r7, #28]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d307      	bcc.n	800cf70 <create_chain+0x88>
				ncl = 2;
 800cf60:	2302      	movs	r3, #2
 800cf62:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cf64:	69fa      	ldr	r2, [r7, #28]
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d901      	bls.n	800cf70 <create_chain+0x88>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	e04f      	b.n	800d010 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cf70:	69f9      	ldr	r1, [r7, #28]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7ff fd65 	bl	800ca42 <get_fat>
 800cf78:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00e      	beq.n	800cf9e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d003      	beq.n	800cf8e <create_chain+0xa6>
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8c:	d101      	bne.n	800cf92 <create_chain+0xaa>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	e03e      	b.n	800d010 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cf92:	69fa      	ldr	r2, [r7, #28]
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d1da      	bne.n	800cf50 <create_chain+0x68>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	e038      	b.n	800d010 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cf9e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa4:	69f9      	ldr	r1, [r7, #28]
 800cfa6:	6938      	ldr	r0, [r7, #16]
 800cfa8:	f7ff fe1f 	bl	800cbea <put_fat>
 800cfac:	4603      	mov	r3, r0
 800cfae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cfb0:	7dfb      	ldrb	r3, [r7, #23]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d109      	bne.n	800cfca <create_chain+0xe2>
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d006      	beq.n	800cfca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cfbc:	69fa      	ldr	r2, [r7, #28]
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	6938      	ldr	r0, [r7, #16]
 800cfc2:	f7ff fe12 	bl	800cbea <put_fat>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cfca:	7dfb      	ldrb	r3, [r7, #23]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d116      	bne.n	800cffe <create_chain+0x116>
		fs->last_clst = ncl;
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	69fa      	ldr	r2, [r7, #28]
 800cfd4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	699a      	ldr	r2, [r3, #24]
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	69db      	ldr	r3, [r3, #28]
 800cfde:	3b02      	subs	r3, #2
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d804      	bhi.n	800cfee <create_chain+0x106>
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	1e5a      	subs	r2, r3, #1
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	791b      	ldrb	r3, [r3, #4]
 800cff2:	f043 0301 	orr.w	r3, r3, #1
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	711a      	strb	r2, [r3, #4]
 800cffc:	e007      	b.n	800d00e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d102      	bne.n	800d00a <create_chain+0x122>
 800d004:	f04f 33ff 	mov.w	r3, #4294967295
 800d008:	e000      	b.n	800d00c <create_chain+0x124>
 800d00a:	2301      	movs	r3, #1
 800d00c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d00e:	69fb      	ldr	r3, [r7, #28]
}
 800d010:	4618      	mov	r0, r3
 800d012:	3720      	adds	r7, #32
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d018:	b480      	push	{r7}
 800d01a:	b087      	sub	sp, #28
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d02c:	3304      	adds	r3, #4
 800d02e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	899b      	ldrh	r3, [r3, #12]
 800d034:	461a      	mov	r2, r3
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	fbb3 f3f2 	udiv	r3, r3, r2
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	8952      	ldrh	r2, [r2, #10]
 800d040:	fbb3 f3f2 	udiv	r3, r3, r2
 800d044:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	1d1a      	adds	r2, r3, #4
 800d04a:	613a      	str	r2, [r7, #16]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <clmt_clust+0x42>
 800d056:	2300      	movs	r3, #0
 800d058:	e010      	b.n	800d07c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800d05a:	697a      	ldr	r2, [r7, #20]
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d307      	bcc.n	800d072 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800d062:	697a      	ldr	r2, [r7, #20]
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	617b      	str	r3, [r7, #20]
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	3304      	adds	r3, #4
 800d06e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d070:	e7e9      	b.n	800d046 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800d072:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	4413      	add	r3, r2
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	371c      	adds	r7, #28
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d09e:	d204      	bcs.n	800d0aa <dir_sdi+0x22>
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	f003 031f 	and.w	r3, r3, #31
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <dir_sdi+0x26>
		return FR_INT_ERR;
 800d0aa:	2302      	movs	r3, #2
 800d0ac:	e071      	b.n	800d192 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d106      	bne.n	800d0ce <dir_sdi+0x46>
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d902      	bls.n	800d0ce <dir_sdi+0x46>
		clst = fs->dirbase;
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10c      	bne.n	800d0ee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	095b      	lsrs	r3, r3, #5
 800d0d8:	693a      	ldr	r2, [r7, #16]
 800d0da:	8912      	ldrh	r2, [r2, #8]
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d301      	bcc.n	800d0e4 <dir_sdi+0x5c>
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	e056      	b.n	800d192 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	61da      	str	r2, [r3, #28]
 800d0ec:	e02d      	b.n	800d14a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	895b      	ldrh	r3, [r3, #10]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	899b      	ldrh	r3, [r3, #12]
 800d0f8:	fb02 f303 	mul.w	r3, r2, r3
 800d0fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d0fe:	e019      	b.n	800d134 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6979      	ldr	r1, [r7, #20]
 800d104:	4618      	mov	r0, r3
 800d106:	f7ff fc9c 	bl	800ca42 <get_fat>
 800d10a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d112:	d101      	bne.n	800d118 <dir_sdi+0x90>
 800d114:	2301      	movs	r3, #1
 800d116:	e03c      	b.n	800d192 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d904      	bls.n	800d128 <dir_sdi+0xa0>
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	69db      	ldr	r3, [r3, #28]
 800d122:	697a      	ldr	r2, [r7, #20]
 800d124:	429a      	cmp	r2, r3
 800d126:	d301      	bcc.n	800d12c <dir_sdi+0xa4>
 800d128:	2302      	movs	r3, #2
 800d12a:	e032      	b.n	800d192 <dir_sdi+0x10a>
			ofs -= csz;
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d134:	683a      	ldr	r2, [r7, #0]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d2e1      	bcs.n	800d100 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800d13c:	6979      	ldr	r1, [r7, #20]
 800d13e:	6938      	ldr	r0, [r7, #16]
 800d140:	f7ff fc60 	bl	800ca04 <clust2sect>
 800d144:	4602      	mov	r2, r0
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	697a      	ldr	r2, [r7, #20]
 800d14e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	69db      	ldr	r3, [r3, #28]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d101      	bne.n	800d15c <dir_sdi+0xd4>
 800d158:	2302      	movs	r3, #2
 800d15a:	e01a      	b.n	800d192 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	69da      	ldr	r2, [r3, #28]
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	899b      	ldrh	r3, [r3, #12]
 800d164:	4619      	mov	r1, r3
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	fbb3 f3f1 	udiv	r3, r3, r1
 800d16c:	441a      	add	r2, r3
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	899b      	ldrh	r3, [r3, #12]
 800d17c:	461a      	mov	r2, r3
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	fbb3 f0f2 	udiv	r0, r3, r2
 800d184:	fb00 f202 	mul.w	r2, r0, r2
 800d188:	1a9b      	subs	r3, r3, r2
 800d18a:	18ca      	adds	r2, r1, r3
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	3718      	adds	r7, #24
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b086      	sub	sp, #24
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	3320      	adds	r3, #32
 800d1b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	69db      	ldr	r3, [r3, #28]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d003      	beq.n	800d1c2 <dir_next+0x28>
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d1c0:	d301      	bcc.n	800d1c6 <dir_next+0x2c>
 800d1c2:	2304      	movs	r3, #4
 800d1c4:	e0bb      	b.n	800d33e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	899b      	ldrh	r3, [r3, #12]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1d2:	fb01 f202 	mul.w	r2, r1, r2
 800d1d6:	1a9b      	subs	r3, r3, r2
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f040 809d 	bne.w	800d318 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	1c5a      	adds	r2, r3, #1
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	699b      	ldr	r3, [r3, #24]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10b      	bne.n	800d208 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	095b      	lsrs	r3, r3, #5
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	8912      	ldrh	r2, [r2, #8]
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	f0c0 808d 	bcc.w	800d318 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	61da      	str	r2, [r3, #28]
 800d204:	2304      	movs	r3, #4
 800d206:	e09a      	b.n	800d33e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	899b      	ldrh	r3, [r3, #12]
 800d20c:	461a      	mov	r2, r3
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	fbb3 f3f2 	udiv	r3, r3, r2
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	8952      	ldrh	r2, [r2, #10]
 800d218:	3a01      	subs	r2, #1
 800d21a:	4013      	ands	r3, r2
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d17b      	bne.n	800d318 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	4619      	mov	r1, r3
 800d228:	4610      	mov	r0, r2
 800d22a:	f7ff fc0a 	bl	800ca42 <get_fat>
 800d22e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	2b01      	cmp	r3, #1
 800d234:	d801      	bhi.n	800d23a <dir_next+0xa0>
 800d236:	2302      	movs	r3, #2
 800d238:	e081      	b.n	800d33e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d240:	d101      	bne.n	800d246 <dir_next+0xac>
 800d242:	2301      	movs	r3, #1
 800d244:	e07b      	b.n	800d33e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	69db      	ldr	r3, [r3, #28]
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d359      	bcc.n	800d304 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d104      	bne.n	800d260 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	61da      	str	r2, [r3, #28]
 800d25c:	2304      	movs	r3, #4
 800d25e:	e06e      	b.n	800d33e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	4619      	mov	r1, r3
 800d268:	4610      	mov	r0, r2
 800d26a:	f7ff fe3d 	bl	800cee8 <create_chain>
 800d26e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d101      	bne.n	800d27a <dir_next+0xe0>
 800d276:	2307      	movs	r3, #7
 800d278:	e061      	b.n	800d33e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d101      	bne.n	800d284 <dir_next+0xea>
 800d280:	2302      	movs	r3, #2
 800d282:	e05c      	b.n	800d33e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28a:	d101      	bne.n	800d290 <dir_next+0xf6>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e056      	b.n	800d33e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f7ff fad5 	bl	800c840 <sync_window>
 800d296:	4603      	mov	r3, r0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d001      	beq.n	800d2a0 <dir_next+0x106>
 800d29c:	2301      	movs	r3, #1
 800d29e:	e04e      	b.n	800d33e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	899b      	ldrh	r3, [r3, #12]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	f7ff f8fe 	bl	800c4ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	613b      	str	r3, [r7, #16]
 800d2b6:	6979      	ldr	r1, [r7, #20]
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f7ff fba3 	bl	800ca04 <clust2sect>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	635a      	str	r2, [r3, #52]	; 0x34
 800d2c4:	e012      	b.n	800d2ec <dir_next+0x152>
						fs->wflag = 1;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f7ff fab7 	bl	800c840 <sync_window>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d001      	beq.n	800d2dc <dir_next+0x142>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e030      	b.n	800d33e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	613b      	str	r3, [r7, #16]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e6:	1c5a      	adds	r2, r3, #1
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	635a      	str	r2, [r3, #52]	; 0x34
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	895b      	ldrh	r3, [r3, #10]
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d3e6      	bcc.n	800d2c6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	1ad2      	subs	r2, r2, r3
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d30a:	6979      	ldr	r1, [r7, #20]
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f7ff fb79 	bl	800ca04 <clust2sect>
 800d312:	4602      	mov	r2, r0
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	899b      	ldrh	r3, [r3, #12]
 800d328:	461a      	mov	r2, r3
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d330:	fb00 f202 	mul.w	r2, r0, r2
 800d334:	1a9b      	subs	r3, r3, r2
 800d336:	18ca      	adds	r2, r1, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3718      	adds	r7, #24
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b086      	sub	sp, #24
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d356:	2100      	movs	r1, #0
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7ff fe95 	bl	800d088 <dir_sdi>
 800d35e:	4603      	mov	r3, r0
 800d360:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d362:	7dfb      	ldrb	r3, [r7, #23]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d12b      	bne.n	800d3c0 <dir_alloc+0x7a>
		n = 0;
 800d368:	2300      	movs	r3, #0
 800d36a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	69db      	ldr	r3, [r3, #28]
 800d370:	4619      	mov	r1, r3
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f7ff faa8 	bl	800c8c8 <move_window>
 800d378:	4603      	mov	r3, r0
 800d37a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d37c:	7dfb      	ldrb	r3, [r7, #23]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d11d      	bne.n	800d3be <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6a1b      	ldr	r3, [r3, #32]
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	2be5      	cmp	r3, #229	; 0xe5
 800d38a:	d004      	beq.n	800d396 <dir_alloc+0x50>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d107      	bne.n	800d3a6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	3301      	adds	r3, #1
 800d39a:	613b      	str	r3, [r7, #16]
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d102      	bne.n	800d3aa <dir_alloc+0x64>
 800d3a4:	e00c      	b.n	800d3c0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d3aa:	2101      	movs	r1, #1
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7ff fef4 	bl	800d19a <dir_next>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d3b6:	7dfb      	ldrb	r3, [r7, #23]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d0d7      	beq.n	800d36c <dir_alloc+0x26>
 800d3bc:	e000      	b.n	800d3c0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d3be:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d3c0:	7dfb      	ldrb	r3, [r7, #23]
 800d3c2:	2b04      	cmp	r3, #4
 800d3c4:	d101      	bne.n	800d3ca <dir_alloc+0x84>
 800d3c6:	2307      	movs	r3, #7
 800d3c8:	75fb      	strb	r3, [r7, #23]
	return res;
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	331a      	adds	r3, #26
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fe ffc0 	bl	800c368 <ld_word>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2b03      	cmp	r3, #3
 800d3f2:	d109      	bne.n	800d408 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	3314      	adds	r3, #20
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe ffb5 	bl	800c368 <ld_word>
 800d3fe:	4603      	mov	r3, r0
 800d400:	041b      	lsls	r3, r3, #16
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	4313      	orrs	r3, r2
 800d406:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d408:	68fb      	ldr	r3, [r7, #12]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	60f8      	str	r0, [r7, #12]
 800d41a:	60b9      	str	r1, [r7, #8]
 800d41c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	331a      	adds	r3, #26
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	b292      	uxth	r2, r2
 800d426:	4611      	mov	r1, r2
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fe ffd8 	bl	800c3de <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	2b03      	cmp	r3, #3
 800d434:	d109      	bne.n	800d44a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	f103 0214 	add.w	r2, r3, #20
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	0c1b      	lsrs	r3, r3, #16
 800d440:	b29b      	uxth	r3, r3
 800d442:	4619      	mov	r1, r3
 800d444:	4610      	mov	r0, r2
 800d446:	f7fe ffca 	bl	800c3de <st_word>
	}
}
 800d44a:	bf00      	nop
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
	...

0800d454 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d454:	b590      	push	{r4, r7, lr}
 800d456:	b087      	sub	sp, #28
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	331a      	adds	r3, #26
 800d462:	4618      	mov	r0, r3
 800d464:	f7fe ff80 	bl	800c368 <ld_word>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <cmp_lfn+0x1e>
 800d46e:	2300      	movs	r3, #0
 800d470:	e059      	b.n	800d526 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d47a:	1e5a      	subs	r2, r3, #1
 800d47c:	4613      	mov	r3, r2
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	4413      	add	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d488:	2301      	movs	r3, #1
 800d48a:	81fb      	strh	r3, [r7, #14]
 800d48c:	2300      	movs	r3, #0
 800d48e:	613b      	str	r3, [r7, #16]
 800d490:	e033      	b.n	800d4fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d492:	4a27      	ldr	r2, [pc, #156]	; (800d530 <cmp_lfn+0xdc>)
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	4413      	add	r3, r2
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	461a      	mov	r2, r3
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	4413      	add	r3, r2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe ff61 	bl	800c368 <ld_word>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d4aa:	89fb      	ldrh	r3, [r7, #14]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d01a      	beq.n	800d4e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	2bfe      	cmp	r3, #254	; 0xfe
 800d4b4:	d812      	bhi.n	800d4dc <cmp_lfn+0x88>
 800d4b6:	89bb      	ldrh	r3, [r7, #12]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f001 fec5 	bl	800f248 <ff_wtoupper>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	461c      	mov	r4, r3
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	1c5a      	adds	r2, r3, #1
 800d4c6:	617a      	str	r2, [r7, #20]
 800d4c8:	005b      	lsls	r3, r3, #1
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	881b      	ldrh	r3, [r3, #0]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f001 feb9 	bl	800f248 <ff_wtoupper>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	429c      	cmp	r4, r3
 800d4da:	d001      	beq.n	800d4e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d4dc:	2300      	movs	r3, #0
 800d4de:	e022      	b.n	800d526 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d4e0:	89bb      	ldrh	r3, [r7, #12]
 800d4e2:	81fb      	strh	r3, [r7, #14]
 800d4e4:	e006      	b.n	800d4f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d4e6:	89bb      	ldrh	r3, [r7, #12]
 800d4e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d001      	beq.n	800d4f4 <cmp_lfn+0xa0>
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	e018      	b.n	800d526 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	613b      	str	r3, [r7, #16]
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	2b0c      	cmp	r3, #12
 800d4fe:	d9c8      	bls.n	800d492 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d00b      	beq.n	800d524 <cmp_lfn+0xd0>
 800d50c:	89fb      	ldrh	r3, [r7, #14]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d008      	beq.n	800d524 <cmp_lfn+0xd0>
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	005b      	lsls	r3, r3, #1
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	4413      	add	r3, r2
 800d51a:	881b      	ldrh	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <cmp_lfn+0xd0>
 800d520:	2300      	movs	r3, #0
 800d522:	e000      	b.n	800d526 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d524:	2301      	movs	r3, #1
}
 800d526:	4618      	mov	r0, r3
 800d528:	371c      	adds	r7, #28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd90      	pop	{r4, r7, pc}
 800d52e:	bf00      	nop
 800d530:	08015fc8 	.word	0x08015fc8

0800d534 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b088      	sub	sp, #32
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	4611      	mov	r1, r2
 800d540:	461a      	mov	r2, r3
 800d542:	460b      	mov	r3, r1
 800d544:	71fb      	strb	r3, [r7, #7]
 800d546:	4613      	mov	r3, r2
 800d548:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	330d      	adds	r3, #13
 800d54e:	79ba      	ldrb	r2, [r7, #6]
 800d550:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	330b      	adds	r3, #11
 800d556:	220f      	movs	r2, #15
 800d558:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	330c      	adds	r3, #12
 800d55e:	2200      	movs	r2, #0
 800d560:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	331a      	adds	r3, #26
 800d566:	2100      	movs	r1, #0
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe ff38 	bl	800c3de <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d56e:	79fb      	ldrb	r3, [r7, #7]
 800d570:	1e5a      	subs	r2, r3, #1
 800d572:	4613      	mov	r3, r2
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	4413      	add	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	82fb      	strh	r3, [r7, #22]
 800d582:	2300      	movs	r3, #0
 800d584:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d586:	8afb      	ldrh	r3, [r7, #22]
 800d588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d007      	beq.n	800d5a0 <put_lfn+0x6c>
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	1c5a      	adds	r2, r3, #1
 800d594:	61fa      	str	r2, [r7, #28]
 800d596:	005b      	lsls	r3, r3, #1
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	4413      	add	r3, r2
 800d59c:	881b      	ldrh	r3, [r3, #0]
 800d59e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d5a0:	4a17      	ldr	r2, [pc, #92]	; (800d600 <put_lfn+0xcc>)
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	8afa      	ldrh	r2, [r7, #22]
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7fe ff13 	bl	800c3de <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d5b8:	8afb      	ldrh	r3, [r7, #22]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d102      	bne.n	800d5c4 <put_lfn+0x90>
 800d5be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	61bb      	str	r3, [r7, #24]
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	2b0c      	cmp	r3, #12
 800d5ce:	d9da      	bls.n	800d586 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d5d0:	8afb      	ldrh	r3, [r7, #22]
 800d5d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d006      	beq.n	800d5e8 <put_lfn+0xb4>
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	005b      	lsls	r3, r3, #1
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d103      	bne.n	800d5f0 <put_lfn+0xbc>
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	79fa      	ldrb	r2, [r7, #7]
 800d5f4:	701a      	strb	r2, [r3, #0]
}
 800d5f6:	bf00      	nop
 800d5f8:	3720      	adds	r7, #32
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	08015fc8 	.word	0x08015fc8

0800d604 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b08c      	sub	sp, #48	; 0x30
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
 800d610:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d612:	220b      	movs	r2, #11
 800d614:	68b9      	ldr	r1, [r7, #8]
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f7fe ff28 	bl	800c46c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	2b05      	cmp	r3, #5
 800d620:	d92b      	bls.n	800d67a <gen_numname+0x76>
		sr = seq;
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d626:	e022      	b.n	800d66e <gen_numname+0x6a>
			wc = *lfn++;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	1c9a      	adds	r2, r3, #2
 800d62c:	607a      	str	r2, [r7, #4]
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d632:	2300      	movs	r3, #0
 800d634:	62bb      	str	r3, [r7, #40]	; 0x28
 800d636:	e017      	b.n	800d668 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	005a      	lsls	r2, r3, #1
 800d63c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	4413      	add	r3, r2
 800d644:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d648:	085b      	lsrs	r3, r3, #1
 800d64a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d652:	2b00      	cmp	r3, #0
 800d654:	d005      	beq.n	800d662 <gen_numname+0x5e>
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d65c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d660:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	3301      	adds	r3, #1
 800d666:	62bb      	str	r3, [r7, #40]	; 0x28
 800d668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66a:	2b0f      	cmp	r3, #15
 800d66c:	d9e4      	bls.n	800d638 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	881b      	ldrh	r3, [r3, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d1d8      	bne.n	800d628 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d67a:	2307      	movs	r3, #7
 800d67c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	b2db      	uxtb	r3, r3
 800d682:	f003 030f 	and.w	r3, r3, #15
 800d686:	b2db      	uxtb	r3, r3
 800d688:	3330      	adds	r3, #48	; 0x30
 800d68a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d68e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d692:	2b39      	cmp	r3, #57	; 0x39
 800d694:	d904      	bls.n	800d6a0 <gen_numname+0x9c>
 800d696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d69a:	3307      	adds	r3, #7
 800d69c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a2:	1e5a      	subs	r2, r3, #1
 800d6a4:	62ba      	str	r2, [r7, #40]	; 0x28
 800d6a6:	3330      	adds	r3, #48	; 0x30
 800d6a8:	443b      	add	r3, r7
 800d6aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d6ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	091b      	lsrs	r3, r3, #4
 800d6b6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1df      	bne.n	800d67e <gen_numname+0x7a>
	ns[i] = '~';
 800d6be:	f107 0214 	add.w	r2, r7, #20
 800d6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c4:	4413      	add	r3, r2
 800d6c6:	227e      	movs	r2, #126	; 0x7e
 800d6c8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	627b      	str	r3, [r7, #36]	; 0x24
 800d6ce:	e002      	b.n	800d6d6 <gen_numname+0xd2>
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d6d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d205      	bcs.n	800d6ea <gen_numname+0xe6>
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e2:	4413      	add	r3, r2
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b20      	cmp	r3, #32
 800d6e8:	d1f2      	bne.n	800d6d0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ec:	2b07      	cmp	r3, #7
 800d6ee:	d807      	bhi.n	800d700 <gen_numname+0xfc>
 800d6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f2:	1c5a      	adds	r2, r3, #1
 800d6f4:	62ba      	str	r2, [r7, #40]	; 0x28
 800d6f6:	3330      	adds	r3, #48	; 0x30
 800d6f8:	443b      	add	r3, r7
 800d6fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d6fe:	e000      	b.n	800d702 <gen_numname+0xfe>
 800d700:	2120      	movs	r1, #32
 800d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d704:	1c5a      	adds	r2, r3, #1
 800d706:	627a      	str	r2, [r7, #36]	; 0x24
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	4413      	add	r3, r2
 800d70c:	460a      	mov	r2, r1
 800d70e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	2b07      	cmp	r3, #7
 800d714:	d9e9      	bls.n	800d6ea <gen_numname+0xe6>
}
 800d716:	bf00      	nop
 800d718:	bf00      	nop
 800d71a:	3730      	adds	r7, #48	; 0x30
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d728:	2300      	movs	r3, #0
 800d72a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d72c:	230b      	movs	r3, #11
 800d72e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d730:	7bfb      	ldrb	r3, [r7, #15]
 800d732:	b2da      	uxtb	r2, r3
 800d734:	0852      	lsrs	r2, r2, #1
 800d736:	01db      	lsls	r3, r3, #7
 800d738:	4313      	orrs	r3, r2
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	1c59      	adds	r1, r3, #1
 800d740:	6079      	str	r1, [r7, #4]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	4413      	add	r3, r2
 800d746:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	3b01      	subs	r3, #1
 800d74c:	60bb      	str	r3, [r7, #8]
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1ed      	bne.n	800d730 <sum_sfn+0x10>
	return sum;
 800d754:	7bfb      	ldrb	r3, [r7, #15]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b086      	sub	sp, #24
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d770:	2100      	movs	r1, #0
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f7ff fc88 	bl	800d088 <dir_sdi>
 800d778:	4603      	mov	r3, r0
 800d77a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d77c:	7dfb      	ldrb	r3, [r7, #23]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <dir_find+0x24>
 800d782:	7dfb      	ldrb	r3, [r7, #23]
 800d784:	e0a9      	b.n	800d8da <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d786:	23ff      	movs	r3, #255	; 0xff
 800d788:	753b      	strb	r3, [r7, #20]
 800d78a:	7d3b      	ldrb	r3, [r7, #20]
 800d78c:	757b      	strb	r3, [r7, #21]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f04f 32ff 	mov.w	r2, #4294967295
 800d794:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	69db      	ldr	r3, [r3, #28]
 800d79a:	4619      	mov	r1, r3
 800d79c:	6938      	ldr	r0, [r7, #16]
 800d79e:	f7ff f893 	bl	800c8c8 <move_window>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d7a6:	7dfb      	ldrb	r3, [r7, #23]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f040 8090 	bne.w	800d8ce <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d7b6:	7dbb      	ldrb	r3, [r7, #22]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d102      	bne.n	800d7c2 <dir_find+0x60>
 800d7bc:	2304      	movs	r3, #4
 800d7be:	75fb      	strb	r3, [r7, #23]
 800d7c0:	e08a      	b.n	800d8d8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a1b      	ldr	r3, [r3, #32]
 800d7c6:	330b      	adds	r3, #11
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7ce:	73fb      	strb	r3, [r7, #15]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	7bfa      	ldrb	r2, [r7, #15]
 800d7d4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d7d6:	7dbb      	ldrb	r3, [r7, #22]
 800d7d8:	2be5      	cmp	r3, #229	; 0xe5
 800d7da:	d007      	beq.n	800d7ec <dir_find+0x8a>
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	f003 0308 	and.w	r3, r3, #8
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d009      	beq.n	800d7fa <dir_find+0x98>
 800d7e6:	7bfb      	ldrb	r3, [r7, #15]
 800d7e8:	2b0f      	cmp	r3, #15
 800d7ea:	d006      	beq.n	800d7fa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d7ec:	23ff      	movs	r3, #255	; 0xff
 800d7ee:	757b      	strb	r3, [r7, #21]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f6:	631a      	str	r2, [r3, #48]	; 0x30
 800d7f8:	e05e      	b.n	800d8b8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
 800d7fc:	2b0f      	cmp	r3, #15
 800d7fe:	d136      	bne.n	800d86e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d154      	bne.n	800d8b8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d80e:	7dbb      	ldrb	r3, [r7, #22]
 800d810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00d      	beq.n	800d834 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a1b      	ldr	r3, [r3, #32]
 800d81c:	7b5b      	ldrb	r3, [r3, #13]
 800d81e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d820:	7dbb      	ldrb	r3, [r7, #22]
 800d822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d826:	75bb      	strb	r3, [r7, #22]
 800d828:	7dbb      	ldrb	r3, [r7, #22]
 800d82a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	695a      	ldr	r2, [r3, #20]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d834:	7dba      	ldrb	r2, [r7, #22]
 800d836:	7d7b      	ldrb	r3, [r7, #21]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d115      	bne.n	800d868 <dir_find+0x106>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6a1b      	ldr	r3, [r3, #32]
 800d840:	330d      	adds	r3, #13
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	7d3a      	ldrb	r2, [r7, #20]
 800d846:	429a      	cmp	r2, r3
 800d848:	d10e      	bne.n	800d868 <dir_find+0x106>
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	691a      	ldr	r2, [r3, #16]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a1b      	ldr	r3, [r3, #32]
 800d852:	4619      	mov	r1, r3
 800d854:	4610      	mov	r0, r2
 800d856:	f7ff fdfd 	bl	800d454 <cmp_lfn>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d003      	beq.n	800d868 <dir_find+0x106>
 800d860:	7d7b      	ldrb	r3, [r7, #21]
 800d862:	3b01      	subs	r3, #1
 800d864:	b2db      	uxtb	r3, r3
 800d866:	e000      	b.n	800d86a <dir_find+0x108>
 800d868:	23ff      	movs	r3, #255	; 0xff
 800d86a:	757b      	strb	r3, [r7, #21]
 800d86c:	e024      	b.n	800d8b8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d86e:	7d7b      	ldrb	r3, [r7, #21]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d109      	bne.n	800d888 <dir_find+0x126>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a1b      	ldr	r3, [r3, #32]
 800d878:	4618      	mov	r0, r3
 800d87a:	f7ff ff51 	bl	800d720 <sum_sfn>
 800d87e:	4603      	mov	r3, r0
 800d880:	461a      	mov	r2, r3
 800d882:	7d3b      	ldrb	r3, [r7, #20]
 800d884:	4293      	cmp	r3, r2
 800d886:	d024      	beq.n	800d8d2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	2b00      	cmp	r3, #0
 800d894:	d10a      	bne.n	800d8ac <dir_find+0x14a>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6a18      	ldr	r0, [r3, #32]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	3324      	adds	r3, #36	; 0x24
 800d89e:	220b      	movs	r2, #11
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	f7fe fe1f 	bl	800c4e4 <mem_cmp>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d014      	beq.n	800d8d6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d8ac:	23ff      	movs	r3, #255	; 0xff
 800d8ae:	757b      	strb	r3, [r7, #21]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7ff fc6d 	bl	800d19a <dir_next>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d8c4:	7dfb      	ldrb	r3, [r7, #23]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f43f af65 	beq.w	800d796 <dir_find+0x34>
 800d8cc:	e004      	b.n	800d8d8 <dir_find+0x176>
		if (res != FR_OK) break;
 800d8ce:	bf00      	nop
 800d8d0:	e002      	b.n	800d8d8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d8d2:	bf00      	nop
 800d8d4:	e000      	b.n	800d8d8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d8d6:	bf00      	nop

	return res;
 800d8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3718      	adds	r7, #24
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b08c      	sub	sp, #48	; 0x30
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d8f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d001      	beq.n	800d904 <dir_register+0x20>
 800d900:	2306      	movs	r3, #6
 800d902:	e0e0      	b.n	800dac6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d904:	2300      	movs	r3, #0
 800d906:	627b      	str	r3, [r7, #36]	; 0x24
 800d908:	e002      	b.n	800d910 <dir_register+0x2c>
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	3301      	adds	r3, #1
 800d90e:	627b      	str	r3, [r7, #36]	; 0x24
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	691a      	ldr	r2, [r3, #16]
 800d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d916:	005b      	lsls	r3, r3, #1
 800d918:	4413      	add	r3, r2
 800d91a:	881b      	ldrh	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d1f4      	bne.n	800d90a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d926:	f107 030c 	add.w	r3, r7, #12
 800d92a:	220c      	movs	r2, #12
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fe fd9d 	bl	800c46c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d932:	7dfb      	ldrb	r3, [r7, #23]
 800d934:	f003 0301 	and.w	r3, r3, #1
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d032      	beq.n	800d9a2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2240      	movs	r2, #64	; 0x40
 800d940:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d944:	2301      	movs	r3, #1
 800d946:	62bb      	str	r3, [r7, #40]	; 0x28
 800d948:	e016      	b.n	800d978 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	691a      	ldr	r2, [r3, #16]
 800d954:	f107 010c 	add.w	r1, r7, #12
 800d958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95a:	f7ff fe53 	bl	800d604 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7ff feff 	bl	800d762 <dir_find>
 800d964:	4603      	mov	r3, r0
 800d966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d96a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d974:	3301      	adds	r3, #1
 800d976:	62bb      	str	r3, [r7, #40]	; 0x28
 800d978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97a:	2b63      	cmp	r3, #99	; 0x63
 800d97c:	d9e5      	bls.n	800d94a <dir_register+0x66>
 800d97e:	e000      	b.n	800d982 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d980:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d984:	2b64      	cmp	r3, #100	; 0x64
 800d986:	d101      	bne.n	800d98c <dir_register+0xa8>
 800d988:	2307      	movs	r3, #7
 800d98a:	e09c      	b.n	800dac6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d98c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d990:	2b04      	cmp	r3, #4
 800d992:	d002      	beq.n	800d99a <dir_register+0xb6>
 800d994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d998:	e095      	b.n	800dac6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d99a:	7dfa      	ldrb	r2, [r7, #23]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d9a2:	7dfb      	ldrb	r3, [r7, #23]
 800d9a4:	f003 0302 	and.w	r3, r3, #2
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d007      	beq.n	800d9bc <dir_register+0xd8>
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ae:	330c      	adds	r3, #12
 800d9b0:	4a47      	ldr	r2, [pc, #284]	; (800dad0 <dir_register+0x1ec>)
 800d9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9b6:	089b      	lsrs	r3, r3, #2
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	e000      	b.n	800d9be <dir_register+0xda>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d9c0:	6a39      	ldr	r1, [r7, #32]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff fcbf 	bl	800d346 <dir_alloc>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d9ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d148      	bne.n	800da68 <dir_register+0x184>
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	623b      	str	r3, [r7, #32]
 800d9dc:	6a3b      	ldr	r3, [r7, #32]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d042      	beq.n	800da68 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	695a      	ldr	r2, [r3, #20]
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	015b      	lsls	r3, r3, #5
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff fb4a 	bl	800d088 <dir_sdi>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d9fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d132      	bne.n	800da68 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	3324      	adds	r3, #36	; 0x24
 800da06:	4618      	mov	r0, r3
 800da08:	f7ff fe8a 	bl	800d720 <sum_sfn>
 800da0c:	4603      	mov	r3, r0
 800da0e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	69db      	ldr	r3, [r3, #28]
 800da14:	4619      	mov	r1, r3
 800da16:	69f8      	ldr	r0, [r7, #28]
 800da18:	f7fe ff56 	bl	800c8c8 <move_window>
 800da1c:	4603      	mov	r3, r0
 800da1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800da22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da26:	2b00      	cmp	r3, #0
 800da28:	d11d      	bne.n	800da66 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	6918      	ldr	r0, [r3, #16]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a19      	ldr	r1, [r3, #32]
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	b2da      	uxtb	r2, r3
 800da36:	7efb      	ldrb	r3, [r7, #27]
 800da38:	f7ff fd7c 	bl	800d534 <put_lfn>
				fs->wflag = 1;
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	2201      	movs	r2, #1
 800da40:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800da42:	2100      	movs	r1, #0
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7ff fba8 	bl	800d19a <dir_next>
 800da4a:	4603      	mov	r3, r0
 800da4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800da50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da54:	2b00      	cmp	r3, #0
 800da56:	d107      	bne.n	800da68 <dir_register+0x184>
 800da58:	6a3b      	ldr	r3, [r7, #32]
 800da5a:	3b01      	subs	r3, #1
 800da5c:	623b      	str	r3, [r7, #32]
 800da5e:	6a3b      	ldr	r3, [r7, #32]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1d5      	bne.n	800da10 <dir_register+0x12c>
 800da64:	e000      	b.n	800da68 <dir_register+0x184>
				if (res != FR_OK) break;
 800da66:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800da68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d128      	bne.n	800dac2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	69db      	ldr	r3, [r3, #28]
 800da74:	4619      	mov	r1, r3
 800da76:	69f8      	ldr	r0, [r7, #28]
 800da78:	f7fe ff26 	bl	800c8c8 <move_window>
 800da7c:	4603      	mov	r3, r0
 800da7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800da82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da86:	2b00      	cmp	r3, #0
 800da88:	d11b      	bne.n	800dac2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a1b      	ldr	r3, [r3, #32]
 800da8e:	2220      	movs	r2, #32
 800da90:	2100      	movs	r1, #0
 800da92:	4618      	mov	r0, r3
 800da94:	f7fe fd0b 	bl	800c4ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6a18      	ldr	r0, [r3, #32]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	3324      	adds	r3, #36	; 0x24
 800daa0:	220b      	movs	r2, #11
 800daa2:	4619      	mov	r1, r3
 800daa4:	f7fe fce2 	bl	800c46c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a1b      	ldr	r3, [r3, #32]
 800dab2:	330c      	adds	r3, #12
 800dab4:	f002 0218 	and.w	r2, r2, #24
 800dab8:	b2d2      	uxtb	r2, r2
 800daba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	2201      	movs	r2, #1
 800dac0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3730      	adds	r7, #48	; 0x30
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	4ec4ec4f 	.word	0x4ec4ec4f

0800dad4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b08a      	sub	sp, #40	; 0x28
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	613b      	str	r3, [r7, #16]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	691b      	ldr	r3, [r3, #16]
 800daea:	60fb      	str	r3, [r7, #12]
 800daec:	2300      	movs	r3, #0
 800daee:	617b      	str	r3, [r7, #20]
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	1c5a      	adds	r2, r3, #1
 800daf8:	61ba      	str	r2, [r7, #24]
 800dafa:	693a      	ldr	r2, [r7, #16]
 800dafc:	4413      	add	r3, r2
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800db02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db04:	2b1f      	cmp	r3, #31
 800db06:	d940      	bls.n	800db8a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800db08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db0a:	2b2f      	cmp	r3, #47	; 0x2f
 800db0c:	d006      	beq.n	800db1c <create_name+0x48>
 800db0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db10:	2b5c      	cmp	r3, #92	; 0x5c
 800db12:	d110      	bne.n	800db36 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800db14:	e002      	b.n	800db1c <create_name+0x48>
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	3301      	adds	r3, #1
 800db1a:	61bb      	str	r3, [r7, #24]
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	4413      	add	r3, r2
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	2b2f      	cmp	r3, #47	; 0x2f
 800db26:	d0f6      	beq.n	800db16 <create_name+0x42>
 800db28:	693a      	ldr	r2, [r7, #16]
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	4413      	add	r3, r2
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	2b5c      	cmp	r3, #92	; 0x5c
 800db32:	d0f0      	beq.n	800db16 <create_name+0x42>
			break;
 800db34:	e02a      	b.n	800db8c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	2bfe      	cmp	r3, #254	; 0xfe
 800db3a:	d901      	bls.n	800db40 <create_name+0x6c>
 800db3c:	2306      	movs	r3, #6
 800db3e:	e17d      	b.n	800de3c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800db40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db42:	b2db      	uxtb	r3, r3
 800db44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800db46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db48:	2101      	movs	r1, #1
 800db4a:	4618      	mov	r0, r3
 800db4c:	f001 fb40 	bl	800f1d0 <ff_convert>
 800db50:	4603      	mov	r3, r0
 800db52:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800db54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <create_name+0x8a>
 800db5a:	2306      	movs	r3, #6
 800db5c:	e16e      	b.n	800de3c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800db5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db60:	2b7f      	cmp	r3, #127	; 0x7f
 800db62:	d809      	bhi.n	800db78 <create_name+0xa4>
 800db64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db66:	4619      	mov	r1, r3
 800db68:	488d      	ldr	r0, [pc, #564]	; (800dda0 <create_name+0x2cc>)
 800db6a:	f7fe fce2 	bl	800c532 <chk_chr>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d001      	beq.n	800db78 <create_name+0xa4>
 800db74:	2306      	movs	r3, #6
 800db76:	e161      	b.n	800de3c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	617a      	str	r2, [r7, #20]
 800db7e:	005b      	lsls	r3, r3, #1
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	4413      	add	r3, r2
 800db84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db86:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800db88:	e7b4      	b.n	800daf4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800db8a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	441a      	add	r2, r3
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800db96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db98:	2b1f      	cmp	r3, #31
 800db9a:	d801      	bhi.n	800dba0 <create_name+0xcc>
 800db9c:	2304      	movs	r3, #4
 800db9e:	e000      	b.n	800dba2 <create_name+0xce>
 800dba0:	2300      	movs	r3, #0
 800dba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dba6:	e011      	b.n	800dbcc <create_name+0xf8>
		w = lfn[di - 1];
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	005b      	lsls	r3, r3, #1
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	881b      	ldrh	r3, [r3, #0]
 800dbb8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dbba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbbc:	2b20      	cmp	r3, #32
 800dbbe:	d002      	beq.n	800dbc6 <create_name+0xf2>
 800dbc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbc2:	2b2e      	cmp	r3, #46	; 0x2e
 800dbc4:	d106      	bne.n	800dbd4 <create_name+0x100>
		di--;
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	3b01      	subs	r3, #1
 800dbca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1ea      	bne.n	800dba8 <create_name+0xd4>
 800dbd2:	e000      	b.n	800dbd6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dbd4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	005b      	lsls	r3, r3, #1
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	4413      	add	r3, r2
 800dbde:	2200      	movs	r2, #0
 800dbe0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d101      	bne.n	800dbec <create_name+0x118>
 800dbe8:	2306      	movs	r3, #6
 800dbea:	e127      	b.n	800de3c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	3324      	adds	r3, #36	; 0x24
 800dbf0:	220b      	movs	r2, #11
 800dbf2:	2120      	movs	r1, #32
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fe fc5a 	bl	800c4ae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	61bb      	str	r3, [r7, #24]
 800dbfe:	e002      	b.n	800dc06 <create_name+0x132>
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	3301      	adds	r3, #1
 800dc04:	61bb      	str	r3, [r7, #24]
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	005b      	lsls	r3, r3, #1
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	881b      	ldrh	r3, [r3, #0]
 800dc10:	2b20      	cmp	r3, #32
 800dc12:	d0f5      	beq.n	800dc00 <create_name+0x12c>
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	005b      	lsls	r3, r3, #1
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	881b      	ldrh	r3, [r3, #0]
 800dc1e:	2b2e      	cmp	r3, #46	; 0x2e
 800dc20:	d0ee      	beq.n	800dc00 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d009      	beq.n	800dc3c <create_name+0x168>
 800dc28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc2c:	f043 0303 	orr.w	r3, r3, #3
 800dc30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dc34:	e002      	b.n	800dc3c <create_name+0x168>
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	617b      	str	r3, [r7, #20]
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d009      	beq.n	800dc56 <create_name+0x182>
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	005b      	lsls	r3, r3, #1
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	4413      	add	r3, r2
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	2b2e      	cmp	r3, #46	; 0x2e
 800dc54:	d1ef      	bne.n	800dc36 <create_name+0x162>

	i = b = 0; ni = 8;
 800dc56:	2300      	movs	r3, #0
 800dc58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	623b      	str	r3, [r7, #32]
 800dc60:	2308      	movs	r3, #8
 800dc62:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	1c5a      	adds	r2, r3, #1
 800dc68:	61ba      	str	r2, [r7, #24]
 800dc6a:	005b      	lsls	r3, r3, #1
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	4413      	add	r3, r2
 800dc70:	881b      	ldrh	r3, [r3, #0]
 800dc72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800dc74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f000 8090 	beq.w	800dd9c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dc7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc7e:	2b20      	cmp	r3, #32
 800dc80:	d006      	beq.n	800dc90 <create_name+0x1bc>
 800dc82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc84:	2b2e      	cmp	r3, #46	; 0x2e
 800dc86:	d10a      	bne.n	800dc9e <create_name+0x1ca>
 800dc88:	69ba      	ldr	r2, [r7, #24]
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d006      	beq.n	800dc9e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800dc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc94:	f043 0303 	orr.w	r3, r3, #3
 800dc98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc9c:	e07d      	b.n	800dd9a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dc9e:	6a3a      	ldr	r2, [r7, #32]
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d203      	bcs.n	800dcae <create_name+0x1da>
 800dca6:	69ba      	ldr	r2, [r7, #24]
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d123      	bne.n	800dcf6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	2b0b      	cmp	r3, #11
 800dcb2:	d106      	bne.n	800dcc2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dcb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcb8:	f043 0303 	orr.w	r3, r3, #3
 800dcbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcc0:	e075      	b.n	800ddae <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dcc2:	69ba      	ldr	r2, [r7, #24]
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d005      	beq.n	800dcd6 <create_name+0x202>
 800dcca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcce:	f043 0303 	orr.w	r3, r3, #3
 800dcd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dcd6:	69ba      	ldr	r2, [r7, #24]
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d866      	bhi.n	800ddac <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	61bb      	str	r3, [r7, #24]
 800dce2:	2308      	movs	r3, #8
 800dce4:	623b      	str	r3, [r7, #32]
 800dce6:	230b      	movs	r3, #11
 800dce8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dcea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dcf4:	e051      	b.n	800dd9a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dcf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcf8:	2b7f      	cmp	r3, #127	; 0x7f
 800dcfa:	d914      	bls.n	800dd26 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dcfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcfe:	2100      	movs	r1, #0
 800dd00:	4618      	mov	r0, r3
 800dd02:	f001 fa65 	bl	800f1d0 <ff_convert>
 800dd06:	4603      	mov	r3, r0
 800dd08:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dd0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d004      	beq.n	800dd1a <create_name+0x246>
 800dd10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd12:	3b80      	subs	r3, #128	; 0x80
 800dd14:	4a23      	ldr	r2, [pc, #140]	; (800dda4 <create_name+0x2d0>)
 800dd16:	5cd3      	ldrb	r3, [r2, r3]
 800dd18:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dd1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd1e:	f043 0302 	orr.w	r3, r3, #2
 800dd22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dd26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d007      	beq.n	800dd3c <create_name+0x268>
 800dd2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd2e:	4619      	mov	r1, r3
 800dd30:	481d      	ldr	r0, [pc, #116]	; (800dda8 <create_name+0x2d4>)
 800dd32:	f7fe fbfe 	bl	800c532 <chk_chr>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d008      	beq.n	800dd4e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dd3c:	235f      	movs	r3, #95	; 0x5f
 800dd3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd44:	f043 0303 	orr.w	r3, r3, #3
 800dd48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd4c:	e01b      	b.n	800dd86 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dd4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd50:	2b40      	cmp	r3, #64	; 0x40
 800dd52:	d909      	bls.n	800dd68 <create_name+0x294>
 800dd54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd56:	2b5a      	cmp	r3, #90	; 0x5a
 800dd58:	d806      	bhi.n	800dd68 <create_name+0x294>
					b |= 2;
 800dd5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd5e:	f043 0302 	orr.w	r3, r3, #2
 800dd62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd66:	e00e      	b.n	800dd86 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dd68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd6a:	2b60      	cmp	r3, #96	; 0x60
 800dd6c:	d90b      	bls.n	800dd86 <create_name+0x2b2>
 800dd6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd70:	2b7a      	cmp	r3, #122	; 0x7a
 800dd72:	d808      	bhi.n	800dd86 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dd74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd78:	f043 0301 	orr.w	r3, r3, #1
 800dd7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd82:	3b20      	subs	r3, #32
 800dd84:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	1c5a      	adds	r2, r3, #1
 800dd8a:	623a      	str	r2, [r7, #32]
 800dd8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd8e:	b2d1      	uxtb	r1, r2
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	4413      	add	r3, r2
 800dd94:	460a      	mov	r2, r1
 800dd96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dd9a:	e763      	b.n	800dc64 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dd9c:	bf00      	nop
 800dd9e:	e006      	b.n	800ddae <create_name+0x2da>
 800dda0:	08015e8c 	.word	0x08015e8c
 800dda4:	08015f48 	.word	0x08015f48
 800dda8:	08015e98 	.word	0x08015e98
			if (si > di) break;			/* No extension */
 800ddac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ddb4:	2be5      	cmp	r3, #229	; 0xe5
 800ddb6:	d103      	bne.n	800ddc0 <create_name+0x2ec>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2205      	movs	r2, #5
 800ddbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	2b08      	cmp	r3, #8
 800ddc4:	d104      	bne.n	800ddd0 <create_name+0x2fc>
 800ddc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ddd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddd4:	f003 030c 	and.w	r3, r3, #12
 800ddd8:	2b0c      	cmp	r3, #12
 800ddda:	d005      	beq.n	800dde8 <create_name+0x314>
 800dddc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dde0:	f003 0303 	and.w	r3, r3, #3
 800dde4:	2b03      	cmp	r3, #3
 800dde6:	d105      	bne.n	800ddf4 <create_name+0x320>
 800dde8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddec:	f043 0302 	orr.w	r3, r3, #2
 800ddf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ddf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddf8:	f003 0302 	and.w	r3, r3, #2
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d117      	bne.n	800de30 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800de00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de04:	f003 0303 	and.w	r3, r3, #3
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d105      	bne.n	800de18 <create_name+0x344>
 800de0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de10:	f043 0310 	orr.w	r3, r3, #16
 800de14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800de18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de1c:	f003 030c 	and.w	r3, r3, #12
 800de20:	2b04      	cmp	r3, #4
 800de22:	d105      	bne.n	800de30 <create_name+0x35c>
 800de24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de28:	f043 0308 	orr.w	r3, r3, #8
 800de2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800de36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800de3a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3728      	adds	r7, #40	; 0x28
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b086      	sub	sp, #24
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800de58:	e002      	b.n	800de60 <follow_path+0x1c>
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	3301      	adds	r3, #1
 800de5e:	603b      	str	r3, [r7, #0]
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	2b2f      	cmp	r3, #47	; 0x2f
 800de66:	d0f8      	beq.n	800de5a <follow_path+0x16>
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	2b5c      	cmp	r3, #92	; 0x5c
 800de6e:	d0f4      	beq.n	800de5a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	2200      	movs	r2, #0
 800de74:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	2b1f      	cmp	r3, #31
 800de7c:	d80a      	bhi.n	800de94 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2280      	movs	r2, #128	; 0x80
 800de82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800de86:	2100      	movs	r1, #0
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff f8fd 	bl	800d088 <dir_sdi>
 800de8e:	4603      	mov	r3, r0
 800de90:	75fb      	strb	r3, [r7, #23]
 800de92:	e048      	b.n	800df26 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de94:	463b      	mov	r3, r7
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7ff fe1b 	bl	800dad4 <create_name>
 800de9e:	4603      	mov	r3, r0
 800dea0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dea2:	7dfb      	ldrb	r3, [r7, #23]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d139      	bne.n	800df1c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f7ff fc5a 	bl	800d762 <dir_find>
 800deae:	4603      	mov	r3, r0
 800deb0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800deb8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800deba:	7dfb      	ldrb	r3, [r7, #23]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00a      	beq.n	800ded6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
 800dec2:	2b04      	cmp	r3, #4
 800dec4:	d12c      	bne.n	800df20 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dec6:	7afb      	ldrb	r3, [r7, #11]
 800dec8:	f003 0304 	and.w	r3, r3, #4
 800decc:	2b00      	cmp	r3, #0
 800dece:	d127      	bne.n	800df20 <follow_path+0xdc>
 800ded0:	2305      	movs	r3, #5
 800ded2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ded4:	e024      	b.n	800df20 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ded6:	7afb      	ldrb	r3, [r7, #11]
 800ded8:	f003 0304 	and.w	r3, r3, #4
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d121      	bne.n	800df24 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	799b      	ldrb	r3, [r3, #6]
 800dee4:	f003 0310 	and.w	r3, r3, #16
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800deec:	2305      	movs	r3, #5
 800deee:	75fb      	strb	r3, [r7, #23]
 800def0:	e019      	b.n	800df26 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	695b      	ldr	r3, [r3, #20]
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	8992      	ldrh	r2, [r2, #12]
 800df00:	fbb3 f0f2 	udiv	r0, r3, r2
 800df04:	fb00 f202 	mul.w	r2, r0, r2
 800df08:	1a9b      	subs	r3, r3, r2
 800df0a:	440b      	add	r3, r1
 800df0c:	4619      	mov	r1, r3
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f7ff fa60 	bl	800d3d4 <ld_clust>
 800df14:	4602      	mov	r2, r0
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800df1a:	e7bb      	b.n	800de94 <follow_path+0x50>
			if (res != FR_OK) break;
 800df1c:	bf00      	nop
 800df1e:	e002      	b.n	800df26 <follow_path+0xe2>
				break;
 800df20:	bf00      	nop
 800df22:	e000      	b.n	800df26 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800df24:	bf00      	nop
			}
		}
	}

	return res;
 800df26:	7dfb      	ldrb	r3, [r7, #23]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3718      	adds	r7, #24
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}

0800df30 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800df30:	b480      	push	{r7}
 800df32:	b087      	sub	sp, #28
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800df38:	f04f 33ff 	mov.w	r3, #4294967295
 800df3c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d031      	beq.n	800dfaa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	617b      	str	r3, [r7, #20]
 800df4c:	e002      	b.n	800df54 <get_ldnumber+0x24>
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	3301      	adds	r3, #1
 800df52:	617b      	str	r3, [r7, #20]
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	2b1f      	cmp	r3, #31
 800df5a:	d903      	bls.n	800df64 <get_ldnumber+0x34>
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	2b3a      	cmp	r3, #58	; 0x3a
 800df62:	d1f4      	bne.n	800df4e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	2b3a      	cmp	r3, #58	; 0x3a
 800df6a:	d11c      	bne.n	800dfa6 <get_ldnumber+0x76>
			tp = *path;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	1c5a      	adds	r2, r3, #1
 800df76:	60fa      	str	r2, [r7, #12]
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	3b30      	subs	r3, #48	; 0x30
 800df7c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	2b09      	cmp	r3, #9
 800df82:	d80e      	bhi.n	800dfa2 <get_ldnumber+0x72>
 800df84:	68fa      	ldr	r2, [r7, #12]
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d10a      	bne.n	800dfa2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d107      	bne.n	800dfa2 <get_ldnumber+0x72>
					vol = (int)i;
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	3301      	adds	r3, #1
 800df9a:	617b      	str	r3, [r7, #20]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	697a      	ldr	r2, [r7, #20]
 800dfa0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	e002      	b.n	800dfac <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dfaa:	693b      	ldr	r3, [r7, #16]
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	371c      	adds	r7, #28
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	70da      	strb	r2, [r3, #3]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f04f 32ff 	mov.w	r2, #4294967295
 800dfce:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7fe fc78 	bl	800c8c8 <move_window>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d001      	beq.n	800dfe2 <check_fs+0x2a>
 800dfde:	2304      	movs	r3, #4
 800dfe0:	e038      	b.n	800e054 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	3338      	adds	r3, #56	; 0x38
 800dfe6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fe f9bc 	bl	800c368 <ld_word>
 800dff0:	4603      	mov	r3, r0
 800dff2:	461a      	mov	r2, r3
 800dff4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d001      	beq.n	800e000 <check_fs+0x48>
 800dffc:	2303      	movs	r3, #3
 800dffe:	e029      	b.n	800e054 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e006:	2be9      	cmp	r3, #233	; 0xe9
 800e008:	d009      	beq.n	800e01e <check_fs+0x66>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e010:	2beb      	cmp	r3, #235	; 0xeb
 800e012:	d11e      	bne.n	800e052 <check_fs+0x9a>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e01a:	2b90      	cmp	r3, #144	; 0x90
 800e01c:	d119      	bne.n	800e052 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	3338      	adds	r3, #56	; 0x38
 800e022:	3336      	adds	r3, #54	; 0x36
 800e024:	4618      	mov	r0, r3
 800e026:	f7fe f9b7 	bl	800c398 <ld_dword>
 800e02a:	4603      	mov	r3, r0
 800e02c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e030:	4a0a      	ldr	r2, [pc, #40]	; (800e05c <check_fs+0xa4>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d101      	bne.n	800e03a <check_fs+0x82>
 800e036:	2300      	movs	r3, #0
 800e038:	e00c      	b.n	800e054 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	3338      	adds	r3, #56	; 0x38
 800e03e:	3352      	adds	r3, #82	; 0x52
 800e040:	4618      	mov	r0, r3
 800e042:	f7fe f9a9 	bl	800c398 <ld_dword>
 800e046:	4603      	mov	r3, r0
 800e048:	4a05      	ldr	r2, [pc, #20]	; (800e060 <check_fs+0xa8>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d101      	bne.n	800e052 <check_fs+0x9a>
 800e04e:	2300      	movs	r3, #0
 800e050:	e000      	b.n	800e054 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e052:	2302      	movs	r3, #2
}
 800e054:	4618      	mov	r0, r3
 800e056:	3708      	adds	r7, #8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	00544146 	.word	0x00544146
 800e060:	33544146 	.word	0x33544146

0800e064 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b096      	sub	sp, #88	; 0x58
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	4613      	mov	r3, r2
 800e070:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	2200      	movs	r2, #0
 800e076:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f7ff ff59 	bl	800df30 <get_ldnumber>
 800e07e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e082:	2b00      	cmp	r3, #0
 800e084:	da01      	bge.n	800e08a <find_volume+0x26>
 800e086:	230b      	movs	r3, #11
 800e088:	e265      	b.n	800e556 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e08a:	4a9f      	ldr	r2, [pc, #636]	; (800e308 <find_volume+0x2a4>)
 800e08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e092:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e096:	2b00      	cmp	r3, #0
 800e098:	d101      	bne.n	800e09e <find_volume+0x3a>
 800e09a:	230c      	movs	r3, #12
 800e09c:	e25b      	b.n	800e556 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e0a4:	79fb      	ldrb	r3, [r7, #7]
 800e0a6:	f023 0301 	bic.w	r3, r3, #1
 800e0aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d01a      	beq.n	800e0ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	785b      	ldrb	r3, [r3, #1]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fe f8b5 	bl	800c228 <disk_status>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e0c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0c8:	f003 0301 	and.w	r3, r3, #1
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d10c      	bne.n	800e0ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e0d0:	79fb      	ldrb	r3, [r7, #7]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d007      	beq.n	800e0e6 <find_volume+0x82>
 800e0d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0da:	f003 0304 	and.w	r3, r3, #4
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d001      	beq.n	800e0e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e0e2:	230a      	movs	r3, #10
 800e0e4:	e237      	b.n	800e556 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	e235      	b.n	800e556 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fa:	785b      	ldrb	r3, [r3, #1]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fe f8ad 	bl	800c25c <disk_initialize>
 800e102:	4603      	mov	r3, r0
 800e104:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e10c:	f003 0301 	and.w	r3, r3, #1
 800e110:	2b00      	cmp	r3, #0
 800e112:	d001      	beq.n	800e118 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e114:	2303      	movs	r3, #3
 800e116:	e21e      	b.n	800e556 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e118:	79fb      	ldrb	r3, [r7, #7]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d007      	beq.n	800e12e <find_volume+0xca>
 800e11e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e122:	f003 0304 	and.w	r3, r3, #4
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e12a:	230a      	movs	r3, #10
 800e12c:	e213      	b.n	800e556 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e130:	7858      	ldrb	r0, [r3, #1]
 800e132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e134:	330c      	adds	r3, #12
 800e136:	461a      	mov	r2, r3
 800e138:	2102      	movs	r1, #2
 800e13a:	f7fe f8f7 	bl	800c32c <disk_ioctl>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d001      	beq.n	800e148 <find_volume+0xe4>
 800e144:	2301      	movs	r3, #1
 800e146:	e206      	b.n	800e556 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14a:	899b      	ldrh	r3, [r3, #12]
 800e14c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e150:	d80d      	bhi.n	800e16e <find_volume+0x10a>
 800e152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e154:	899b      	ldrh	r3, [r3, #12]
 800e156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e15a:	d308      	bcc.n	800e16e <find_volume+0x10a>
 800e15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15e:	899b      	ldrh	r3, [r3, #12]
 800e160:	461a      	mov	r2, r3
 800e162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e164:	899b      	ldrh	r3, [r3, #12]
 800e166:	3b01      	subs	r3, #1
 800e168:	4013      	ands	r3, r2
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d001      	beq.n	800e172 <find_volume+0x10e>
 800e16e:	2301      	movs	r3, #1
 800e170:	e1f1      	b.n	800e556 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e176:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e178:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e17a:	f7ff ff1d 	bl	800dfb8 <check_fs>
 800e17e:	4603      	mov	r3, r0
 800e180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d149      	bne.n	800e220 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e18c:	2300      	movs	r3, #0
 800e18e:	643b      	str	r3, [r7, #64]	; 0x40
 800e190:	e01e      	b.n	800e1d0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e194:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e19a:	011b      	lsls	r3, r3, #4
 800e19c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e1a0:	4413      	add	r3, r2
 800e1a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a6:	3304      	adds	r3, #4
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d006      	beq.n	800e1bc <find_volume+0x158>
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b0:	3308      	adds	r3, #8
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fe f8f0 	bl	800c398 <ld_dword>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	e000      	b.n	800e1be <find_volume+0x15a>
 800e1bc:	2200      	movs	r2, #0
 800e1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	3358      	adds	r3, #88	; 0x58
 800e1c4:	443b      	add	r3, r7
 800e1c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	643b      	str	r3, [r7, #64]	; 0x40
 800e1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	d9dd      	bls.n	800e192 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d002      	beq.n	800e1e6 <find_volume+0x182>
 800e1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	3358      	adds	r3, #88	; 0x58
 800e1ec:	443b      	add	r3, r7
 800e1ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e1f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d005      	beq.n	800e206 <find_volume+0x1a2>
 800e1fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1fe:	f7ff fedb 	bl	800dfb8 <check_fs>
 800e202:	4603      	mov	r3, r0
 800e204:	e000      	b.n	800e208 <find_volume+0x1a4>
 800e206:	2303      	movs	r3, #3
 800e208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e20c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e210:	2b01      	cmp	r3, #1
 800e212:	d905      	bls.n	800e220 <find_volume+0x1bc>
 800e214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e216:	3301      	adds	r3, #1
 800e218:	643b      	str	r3, [r7, #64]	; 0x40
 800e21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e21c:	2b03      	cmp	r3, #3
 800e21e:	d9e2      	bls.n	800e1e6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e224:	2b04      	cmp	r3, #4
 800e226:	d101      	bne.n	800e22c <find_volume+0x1c8>
 800e228:	2301      	movs	r3, #1
 800e22a:	e194      	b.n	800e556 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e22c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e230:	2b01      	cmp	r3, #1
 800e232:	d901      	bls.n	800e238 <find_volume+0x1d4>
 800e234:	230d      	movs	r3, #13
 800e236:	e18e      	b.n	800e556 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23a:	3338      	adds	r3, #56	; 0x38
 800e23c:	330b      	adds	r3, #11
 800e23e:	4618      	mov	r0, r3
 800e240:	f7fe f892 	bl	800c368 <ld_word>
 800e244:	4603      	mov	r3, r0
 800e246:	461a      	mov	r2, r3
 800e248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24a:	899b      	ldrh	r3, [r3, #12]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d001      	beq.n	800e254 <find_volume+0x1f0>
 800e250:	230d      	movs	r3, #13
 800e252:	e180      	b.n	800e556 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e256:	3338      	adds	r3, #56	; 0x38
 800e258:	3316      	adds	r3, #22
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe f884 	bl	800c368 <ld_word>
 800e260:	4603      	mov	r3, r0
 800e262:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e266:	2b00      	cmp	r3, #0
 800e268:	d106      	bne.n	800e278 <find_volume+0x214>
 800e26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26c:	3338      	adds	r3, #56	; 0x38
 800e26e:	3324      	adds	r3, #36	; 0x24
 800e270:	4618      	mov	r0, r3
 800e272:	f7fe f891 	bl	800c398 <ld_dword>
 800e276:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e27c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e280:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e286:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28a:	789b      	ldrb	r3, [r3, #2]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d005      	beq.n	800e29c <find_volume+0x238>
 800e290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e292:	789b      	ldrb	r3, [r3, #2]
 800e294:	2b02      	cmp	r3, #2
 800e296:	d001      	beq.n	800e29c <find_volume+0x238>
 800e298:	230d      	movs	r3, #13
 800e29a:	e15c      	b.n	800e556 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29e:	789b      	ldrb	r3, [r3, #2]
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2a4:	fb02 f303 	mul.w	r3, r2, r3
 800e2a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b8:	895b      	ldrh	r3, [r3, #10]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d008      	beq.n	800e2d0 <find_volume+0x26c>
 800e2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c0:	895b      	ldrh	r3, [r3, #10]
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c6:	895b      	ldrh	r3, [r3, #10]
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	4013      	ands	r3, r2
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d001      	beq.n	800e2d4 <find_volume+0x270>
 800e2d0:	230d      	movs	r3, #13
 800e2d2:	e140      	b.n	800e556 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d6:	3338      	adds	r3, #56	; 0x38
 800e2d8:	3311      	adds	r3, #17
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe f844 	bl	800c368 <ld_word>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	891b      	ldrh	r3, [r3, #8]
 800e2ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2ee:	8992      	ldrh	r2, [r2, #12]
 800e2f0:	0952      	lsrs	r2, r2, #5
 800e2f2:	b292      	uxth	r2, r2
 800e2f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2f8:	fb01 f202 	mul.w	r2, r1, r2
 800e2fc:	1a9b      	subs	r3, r3, r2
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	2b00      	cmp	r3, #0
 800e302:	d003      	beq.n	800e30c <find_volume+0x2a8>
 800e304:	230d      	movs	r3, #13
 800e306:	e126      	b.n	800e556 <find_volume+0x4f2>
 800e308:	20002e7c 	.word	0x20002e7c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30e:	3338      	adds	r3, #56	; 0x38
 800e310:	3313      	adds	r3, #19
 800e312:	4618      	mov	r0, r3
 800e314:	f7fe f828 	bl	800c368 <ld_word>
 800e318:	4603      	mov	r3, r0
 800e31a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e31c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d106      	bne.n	800e330 <find_volume+0x2cc>
 800e322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e324:	3338      	adds	r3, #56	; 0x38
 800e326:	3320      	adds	r3, #32
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fe f835 	bl	800c398 <ld_dword>
 800e32e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e332:	3338      	adds	r3, #56	; 0x38
 800e334:	330e      	adds	r3, #14
 800e336:	4618      	mov	r0, r3
 800e338:	f7fe f816 	bl	800c368 <ld_word>
 800e33c:	4603      	mov	r3, r0
 800e33e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e340:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e342:	2b00      	cmp	r3, #0
 800e344:	d101      	bne.n	800e34a <find_volume+0x2e6>
 800e346:	230d      	movs	r3, #13
 800e348:	e105      	b.n	800e556 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e34a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e34e:	4413      	add	r3, r2
 800e350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e352:	8911      	ldrh	r1, [r2, #8]
 800e354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e356:	8992      	ldrh	r2, [r2, #12]
 800e358:	0952      	lsrs	r2, r2, #5
 800e35a:	b292      	uxth	r2, r2
 800e35c:	fbb1 f2f2 	udiv	r2, r1, r2
 800e360:	b292      	uxth	r2, r2
 800e362:	4413      	add	r3, r2
 800e364:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d201      	bcs.n	800e372 <find_volume+0x30e>
 800e36e:	230d      	movs	r3, #13
 800e370:	e0f1      	b.n	800e556 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	1ad3      	subs	r3, r2, r3
 800e378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e37a:	8952      	ldrh	r2, [r2, #10]
 800e37c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e380:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <find_volume+0x328>
 800e388:	230d      	movs	r3, #13
 800e38a:	e0e4      	b.n	800e556 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800e38c:	2303      	movs	r3, #3
 800e38e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e398:	4293      	cmp	r3, r2
 800e39a:	d802      	bhi.n	800e3a2 <find_volume+0x33e>
 800e39c:	2302      	movs	r3, #2
 800e39e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d802      	bhi.n	800e3b2 <find_volume+0x34e>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	1c9a      	adds	r2, r3, #2
 800e3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3be:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e3c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3c4:	441a      	add	r2, r3
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e3ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ce:	441a      	add	r2, r3
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3d8:	2b03      	cmp	r3, #3
 800e3da:	d11e      	bne.n	800e41a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3de:	3338      	adds	r3, #56	; 0x38
 800e3e0:	332a      	adds	r3, #42	; 0x2a
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fd ffc0 	bl	800c368 <ld_word>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <find_volume+0x38e>
 800e3ee:	230d      	movs	r3, #13
 800e3f0:	e0b1      	b.n	800e556 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f4:	891b      	ldrh	r3, [r3, #8]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d001      	beq.n	800e3fe <find_volume+0x39a>
 800e3fa:	230d      	movs	r3, #13
 800e3fc:	e0ab      	b.n	800e556 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e400:	3338      	adds	r3, #56	; 0x38
 800e402:	332c      	adds	r3, #44	; 0x2c
 800e404:	4618      	mov	r0, r3
 800e406:	f7fd ffc7 	bl	800c398 <ld_dword>
 800e40a:	4602      	mov	r2, r0
 800e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e412:	69db      	ldr	r3, [r3, #28]
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	647b      	str	r3, [r7, #68]	; 0x44
 800e418:	e01f      	b.n	800e45a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41c:	891b      	ldrh	r3, [r3, #8]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d101      	bne.n	800e426 <find_volume+0x3c2>
 800e422:	230d      	movs	r3, #13
 800e424:	e097      	b.n	800e556 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e42c:	441a      	add	r2, r3
 800e42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e430:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e432:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e436:	2b02      	cmp	r3, #2
 800e438:	d103      	bne.n	800e442 <find_volume+0x3de>
 800e43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43c:	69db      	ldr	r3, [r3, #28]
 800e43e:	005b      	lsls	r3, r3, #1
 800e440:	e00a      	b.n	800e458 <find_volume+0x3f4>
 800e442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e444:	69da      	ldr	r2, [r3, #28]
 800e446:	4613      	mov	r3, r2
 800e448:	005b      	lsls	r3, r3, #1
 800e44a:	4413      	add	r3, r2
 800e44c:	085a      	lsrs	r2, r3, #1
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	69db      	ldr	r3, [r3, #28]
 800e452:	f003 0301 	and.w	r3, r3, #1
 800e456:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e458:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45c:	6a1a      	ldr	r2, [r3, #32]
 800e45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e460:	899b      	ldrh	r3, [r3, #12]
 800e462:	4619      	mov	r1, r3
 800e464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e466:	440b      	add	r3, r1
 800e468:	3b01      	subs	r3, #1
 800e46a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e46c:	8989      	ldrh	r1, [r1, #12]
 800e46e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e472:	429a      	cmp	r2, r3
 800e474:	d201      	bcs.n	800e47a <find_volume+0x416>
 800e476:	230d      	movs	r3, #13
 800e478:	e06d      	b.n	800e556 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47c:	f04f 32ff 	mov.w	r2, #4294967295
 800e480:	619a      	str	r2, [r3, #24]
 800e482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e484:	699a      	ldr	r2, [r3, #24]
 800e486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e488:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48c:	2280      	movs	r2, #128	; 0x80
 800e48e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e494:	2b03      	cmp	r3, #3
 800e496:	d149      	bne.n	800e52c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49a:	3338      	adds	r3, #56	; 0x38
 800e49c:	3330      	adds	r3, #48	; 0x30
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fd ff62 	bl	800c368 <ld_word>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d140      	bne.n	800e52c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e4aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4b2:	f7fe fa09 	bl	800c8c8 <move_window>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d137      	bne.n	800e52c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4be:	2200      	movs	r2, #0
 800e4c0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c4:	3338      	adds	r3, #56	; 0x38
 800e4c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fd ff4c 	bl	800c368 <ld_word>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d127      	bne.n	800e52c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4de:	3338      	adds	r3, #56	; 0x38
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fd ff59 	bl	800c398 <ld_dword>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	4a1d      	ldr	r2, [pc, #116]	; (800e560 <find_volume+0x4fc>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d11e      	bne.n	800e52c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f0:	3338      	adds	r3, #56	; 0x38
 800e4f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fd ff4e 	bl	800c398 <ld_dword>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	4a19      	ldr	r2, [pc, #100]	; (800e564 <find_volume+0x500>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d113      	bne.n	800e52c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e506:	3338      	adds	r3, #56	; 0x38
 800e508:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7fd ff43 	bl	800c398 <ld_dword>
 800e512:	4602      	mov	r2, r0
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51a:	3338      	adds	r3, #56	; 0x38
 800e51c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e520:	4618      	mov	r0, r3
 800e522:	f7fd ff39 	bl	800c398 <ld_dword>
 800e526:	4602      	mov	r2, r0
 800e528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e532:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e534:	4b0c      	ldr	r3, [pc, #48]	; (800e568 <find_volume+0x504>)
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	3301      	adds	r3, #1
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	4b0a      	ldr	r3, [pc, #40]	; (800e568 <find_volume+0x504>)
 800e53e:	801a      	strh	r2, [r3, #0]
 800e540:	4b09      	ldr	r3, [pc, #36]	; (800e568 <find_volume+0x504>)
 800e542:	881a      	ldrh	r2, [r3, #0]
 800e544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e546:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54a:	4a08      	ldr	r2, [pc, #32]	; (800e56c <find_volume+0x508>)
 800e54c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e54e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e550:	f7fe f952 	bl	800c7f8 <clear_lock>
#endif
	return FR_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3758      	adds	r7, #88	; 0x58
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	41615252 	.word	0x41615252
 800e564:	61417272 	.word	0x61417272
 800e568:	20002e80 	.word	0x20002e80
 800e56c:	20002ea4 	.word	0x20002ea4

0800e570 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e57a:	2309      	movs	r3, #9
 800e57c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d01c      	beq.n	800e5be <validate+0x4e>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d018      	beq.n	800e5be <validate+0x4e>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d013      	beq.n	800e5be <validate+0x4e>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	889a      	ldrh	r2, [r3, #4]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	88db      	ldrh	r3, [r3, #6]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d10c      	bne.n	800e5be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	785b      	ldrb	r3, [r3, #1]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fd fe3c 	bl	800c228 <disk_status>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	f003 0301 	and.w	r3, r3, #1
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d101      	bne.n	800e5be <validate+0x4e>
			res = FR_OK;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e5be:	7bfb      	ldrb	r3, [r7, #15]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d102      	bne.n	800e5ca <validate+0x5a>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	e000      	b.n	800e5cc <validate+0x5c>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	683a      	ldr	r2, [r7, #0]
 800e5ce:	6013      	str	r3, [r2, #0]
	return res;
 800e5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b088      	sub	sp, #32
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	4613      	mov	r3, r2
 800e5e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e5ee:	f107 0310 	add.w	r3, r7, #16
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7ff fc9c 	bl	800df30 <get_ldnumber>
 800e5f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	da01      	bge.n	800e604 <f_mount+0x28>
 800e600:	230b      	movs	r3, #11
 800e602:	e02b      	b.n	800e65c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e604:	4a17      	ldr	r2, [pc, #92]	; (800e664 <f_mount+0x88>)
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e60c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d005      	beq.n	800e620 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e614:	69b8      	ldr	r0, [r7, #24]
 800e616:	f7fe f8ef 	bl	800c7f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	2200      	movs	r2, #0
 800e61e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d002      	beq.n	800e62c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2200      	movs	r2, #0
 800e62a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	490d      	ldr	r1, [pc, #52]	; (800e664 <f_mount+0x88>)
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <f_mount+0x66>
 800e63c:	79fb      	ldrb	r3, [r7, #7]
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d001      	beq.n	800e646 <f_mount+0x6a>
 800e642:	2300      	movs	r3, #0
 800e644:	e00a      	b.n	800e65c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e646:	f107 010c 	add.w	r1, r7, #12
 800e64a:	f107 0308 	add.w	r3, r7, #8
 800e64e:	2200      	movs	r2, #0
 800e650:	4618      	mov	r0, r3
 800e652:	f7ff fd07 	bl	800e064 <find_volume>
 800e656:	4603      	mov	r3, r0
 800e658:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3720      	adds	r7, #32
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	20002e7c 	.word	0x20002e7c

0800e668 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b09a      	sub	sp, #104	; 0x68
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	4613      	mov	r3, r2
 800e674:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d101      	bne.n	800e680 <f_open+0x18>
 800e67c:	2309      	movs	r3, #9
 800e67e:	e1bb      	b.n	800e9f8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e680:	79fb      	ldrb	r3, [r7, #7]
 800e682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e686:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e688:	79fa      	ldrb	r2, [r7, #7]
 800e68a:	f107 0114 	add.w	r1, r7, #20
 800e68e:	f107 0308 	add.w	r3, r7, #8
 800e692:	4618      	mov	r0, r3
 800e694:	f7ff fce6 	bl	800e064 <find_volume>
 800e698:	4603      	mov	r3, r0
 800e69a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e69e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f040 819f 	bne.w	800e9e6 <f_open+0x37e>
		dj.obj.fs = fs;
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	f107 0318 	add.w	r3, r7, #24
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7ff fbc5 	bl	800de44 <follow_path>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e6c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d11a      	bne.n	800e6fe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e6c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e6cc:	b25b      	sxtb	r3, r3
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	da03      	bge.n	800e6da <f_open+0x72>
				res = FR_INVALID_NAME;
 800e6d2:	2306      	movs	r3, #6
 800e6d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e6d8:	e011      	b.n	800e6fe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e6da:	79fb      	ldrb	r3, [r7, #7]
 800e6dc:	f023 0301 	bic.w	r3, r3, #1
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	bf14      	ite	ne
 800e6e4:	2301      	movne	r3, #1
 800e6e6:	2300      	moveq	r3, #0
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	f107 0318 	add.w	r3, r7, #24
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fd ff38 	bl	800c568 <chk_lock>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e6fe:	79fb      	ldrb	r3, [r7, #7]
 800e700:	f003 031c 	and.w	r3, r3, #28
 800e704:	2b00      	cmp	r3, #0
 800e706:	d07f      	beq.n	800e808 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e708:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d017      	beq.n	800e740 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e710:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e714:	2b04      	cmp	r3, #4
 800e716:	d10e      	bne.n	800e736 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e718:	f7fd ff82 	bl	800c620 <enq_lock>
 800e71c:	4603      	mov	r3, r0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d006      	beq.n	800e730 <f_open+0xc8>
 800e722:	f107 0318 	add.w	r3, r7, #24
 800e726:	4618      	mov	r0, r3
 800e728:	f7ff f8dc 	bl	800d8e4 <dir_register>
 800e72c:	4603      	mov	r3, r0
 800e72e:	e000      	b.n	800e732 <f_open+0xca>
 800e730:	2312      	movs	r3, #18
 800e732:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e736:	79fb      	ldrb	r3, [r7, #7]
 800e738:	f043 0308 	orr.w	r3, r3, #8
 800e73c:	71fb      	strb	r3, [r7, #7]
 800e73e:	e010      	b.n	800e762 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e740:	7fbb      	ldrb	r3, [r7, #30]
 800e742:	f003 0311 	and.w	r3, r3, #17
 800e746:	2b00      	cmp	r3, #0
 800e748:	d003      	beq.n	800e752 <f_open+0xea>
					res = FR_DENIED;
 800e74a:	2307      	movs	r3, #7
 800e74c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e750:	e007      	b.n	800e762 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e752:	79fb      	ldrb	r3, [r7, #7]
 800e754:	f003 0304 	and.w	r3, r3, #4
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d002      	beq.n	800e762 <f_open+0xfa>
 800e75c:	2308      	movs	r3, #8
 800e75e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e762:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e766:	2b00      	cmp	r3, #0
 800e768:	d168      	bne.n	800e83c <f_open+0x1d4>
 800e76a:	79fb      	ldrb	r3, [r7, #7]
 800e76c:	f003 0308 	and.w	r3, r3, #8
 800e770:	2b00      	cmp	r3, #0
 800e772:	d063      	beq.n	800e83c <f_open+0x1d4>
				dw = GET_FATTIME();
 800e774:	f7fb fd2e 	bl	800a1d4 <get_fattime>
 800e778:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77c:	330e      	adds	r3, #14
 800e77e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e780:	4618      	mov	r0, r3
 800e782:	f7fd fe47 	bl	800c414 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e788:	3316      	adds	r3, #22
 800e78a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fd fe41 	bl	800c414 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e794:	330b      	adds	r3, #11
 800e796:	2220      	movs	r2, #32
 800e798:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e79e:	4611      	mov	r1, r2
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fe fe17 	bl	800d3d4 <ld_clust>
 800e7a6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fe fe2f 	bl	800d412 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b6:	331c      	adds	r3, #28
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fd fe2a 	bl	800c414 <st_dword>
					fs->wflag = 1;
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e7c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d037      	beq.n	800e83c <f_open+0x1d4>
						dw = fs->winsect;
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e7d2:	f107 0318 	add.w	r3, r7, #24
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fe fb1f 	bl	800ce1e <remove_chain>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e7e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d126      	bne.n	800e83c <f_open+0x1d4>
							res = move_window(fs, dw);
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fe f868 	bl	800c8c8 <move_window>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e802:	3a01      	subs	r2, #1
 800e804:	615a      	str	r2, [r3, #20]
 800e806:	e019      	b.n	800e83c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e808:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d115      	bne.n	800e83c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e810:	7fbb      	ldrb	r3, [r7, #30]
 800e812:	f003 0310 	and.w	r3, r3, #16
 800e816:	2b00      	cmp	r3, #0
 800e818:	d003      	beq.n	800e822 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e81a:	2304      	movs	r3, #4
 800e81c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e820:	e00c      	b.n	800e83c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e822:	79fb      	ldrb	r3, [r7, #7]
 800e824:	f003 0302 	and.w	r3, r3, #2
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d007      	beq.n	800e83c <f_open+0x1d4>
 800e82c:	7fbb      	ldrb	r3, [r7, #30]
 800e82e:	f003 0301 	and.w	r3, r3, #1
 800e832:	2b00      	cmp	r3, #0
 800e834:	d002      	beq.n	800e83c <f_open+0x1d4>
						res = FR_DENIED;
 800e836:	2307      	movs	r3, #7
 800e838:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e83c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e840:	2b00      	cmp	r3, #0
 800e842:	d128      	bne.n	800e896 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e844:	79fb      	ldrb	r3, [r7, #7]
 800e846:	f003 0308 	and.w	r3, r3, #8
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d003      	beq.n	800e856 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e84e:	79fb      	ldrb	r3, [r7, #7]
 800e850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e854:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e85e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e864:	79fb      	ldrb	r3, [r7, #7]
 800e866:	f023 0301 	bic.w	r3, r3, #1
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	bf14      	ite	ne
 800e86e:	2301      	movne	r3, #1
 800e870:	2300      	moveq	r3, #0
 800e872:	b2db      	uxtb	r3, r3
 800e874:	461a      	mov	r2, r3
 800e876:	f107 0318 	add.w	r3, r7, #24
 800e87a:	4611      	mov	r1, r2
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fd fef1 	bl	800c664 <inc_lock>
 800e882:	4602      	mov	r2, r0
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	691b      	ldr	r3, [r3, #16]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d102      	bne.n	800e896 <f_open+0x22e>
 800e890:	2302      	movs	r3, #2
 800e892:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e896:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	f040 80a3 	bne.w	800e9e6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8a4:	4611      	mov	r1, r2
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fe fd94 	bl	800d3d4 <ld_clust>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b4:	331c      	adds	r3, #28
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fd fd6e 	bl	800c398 <ld_dword>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e8c8:	697a      	ldr	r2, [r7, #20]
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	88da      	ldrh	r2, [r3, #6]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	79fa      	ldrb	r2, [r7, #7]
 800e8da:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	3330      	adds	r3, #48	; 0x30
 800e8f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fd fdd8 	bl	800c4ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e8fe:	79fb      	ldrb	r3, [r7, #7]
 800e900:	f003 0320 	and.w	r3, r3, #32
 800e904:	2b00      	cmp	r3, #0
 800e906:	d06e      	beq.n	800e9e6 <f_open+0x37e>
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d06a      	beq.n	800e9e6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	68da      	ldr	r2, [r3, #12]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	895b      	ldrh	r3, [r3, #10]
 800e91c:	461a      	mov	r2, r3
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	899b      	ldrh	r3, [r3, #12]
 800e922:	fb02 f303 	mul.w	r3, r2, r3
 800e926:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	689b      	ldr	r3, [r3, #8]
 800e92c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e934:	e016      	b.n	800e964 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe f881 	bl	800ca42 <get_fat>
 800e940:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e944:	2b01      	cmp	r3, #1
 800e946:	d802      	bhi.n	800e94e <f_open+0x2e6>
 800e948:	2302      	movs	r3, #2
 800e94a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e94e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e954:	d102      	bne.n	800e95c <f_open+0x2f4>
 800e956:	2301      	movs	r3, #1
 800e958:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e95c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e964:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d103      	bne.n	800e974 <f_open+0x30c>
 800e96c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e970:	429a      	cmp	r2, r3
 800e972:	d8e0      	bhi.n	800e936 <f_open+0x2ce>
				}
				fp->clust = clst;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e978:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e97a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d131      	bne.n	800e9e6 <f_open+0x37e>
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	899b      	ldrh	r3, [r3, #12]
 800e986:	461a      	mov	r2, r3
 800e988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e98a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e98e:	fb01 f202 	mul.w	r2, r1, r2
 800e992:	1a9b      	subs	r3, r3, r2
 800e994:	2b00      	cmp	r3, #0
 800e996:	d026      	beq.n	800e9e6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7fe f831 	bl	800ca04 <clust2sect>
 800e9a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d103      	bne.n	800e9b2 <f_open+0x34a>
						res = FR_INT_ERR;
 800e9aa:	2302      	movs	r3, #2
 800e9ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e9b0:	e019      	b.n	800e9e6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	899b      	ldrh	r3, [r3, #12]
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800e9be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9c0:	441a      	add	r2, r3
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	7858      	ldrb	r0, [r3, #1]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	6a1a      	ldr	r2, [r3, #32]
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	f7fd fc69 	bl	800c2ac <disk_read>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d002      	beq.n	800e9e6 <f_open+0x37e>
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e9e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d002      	beq.n	800e9f4 <f_open+0x38c>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e9f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3768      	adds	r7, #104	; 0x68
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b08c      	sub	sp, #48	; 0x30
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
 800ea0c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	2200      	movs	r2, #0
 800ea16:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f107 0210 	add.w	r2, r7, #16
 800ea1e:	4611      	mov	r1, r2
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7ff fda5 	bl	800e570 <validate>
 800ea26:	4603      	mov	r3, r0
 800ea28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ea2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d107      	bne.n	800ea44 <f_write+0x44>
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	7d5b      	ldrb	r3, [r3, #21]
 800ea38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ea3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d002      	beq.n	800ea4a <f_write+0x4a>
 800ea44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea48:	e16a      	b.n	800ed20 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	7d1b      	ldrb	r3, [r3, #20]
 800ea4e:	f003 0302 	and.w	r3, r3, #2
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d101      	bne.n	800ea5a <f_write+0x5a>
 800ea56:	2307      	movs	r3, #7
 800ea58:	e162      	b.n	800ed20 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	699a      	ldr	r2, [r3, #24]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	441a      	add	r2, r3
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	699b      	ldr	r3, [r3, #24]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	f080 814c 	bcs.w	800ed04 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	699b      	ldr	r3, [r3, #24]
 800ea70:	43db      	mvns	r3, r3
 800ea72:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ea74:	e146      	b.n	800ed04 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	699b      	ldr	r3, [r3, #24]
 800ea7a:	693a      	ldr	r2, [r7, #16]
 800ea7c:	8992      	ldrh	r2, [r2, #12]
 800ea7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea82:	fb01 f202 	mul.w	r2, r1, r2
 800ea86:	1a9b      	subs	r3, r3, r2
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f040 80f1 	bne.w	800ec70 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	699b      	ldr	r3, [r3, #24]
 800ea92:	693a      	ldr	r2, [r7, #16]
 800ea94:	8992      	ldrh	r2, [r2, #12]
 800ea96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea9a:	693a      	ldr	r2, [r7, #16]
 800ea9c:	8952      	ldrh	r2, [r2, #10]
 800ea9e:	3a01      	subs	r2, #1
 800eaa0:	4013      	ands	r3, r2
 800eaa2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d143      	bne.n	800eb32 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	699b      	ldr	r3, [r3, #24]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d10c      	bne.n	800eacc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800eab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d11a      	bne.n	800eaf4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2100      	movs	r1, #0
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fe fa10 	bl	800cee8 <create_chain>
 800eac8:	62b8      	str	r0, [r7, #40]	; 0x28
 800eaca:	e013      	b.n	800eaf4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d007      	beq.n	800eae4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	699b      	ldr	r3, [r3, #24]
 800ead8:	4619      	mov	r1, r3
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f7fe fa9c 	bl	800d018 <clmt_clust>
 800eae0:	62b8      	str	r0, [r7, #40]	; 0x28
 800eae2:	e007      	b.n	800eaf4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800eae4:	68fa      	ldr	r2, [r7, #12]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	69db      	ldr	r3, [r3, #28]
 800eaea:	4619      	mov	r1, r3
 800eaec:	4610      	mov	r0, r2
 800eaee:	f7fe f9fb 	bl	800cee8 <create_chain>
 800eaf2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f000 8109 	beq.w	800ed0e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d104      	bne.n	800eb0c <f_write+0x10c>
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2202      	movs	r2, #2
 800eb06:	755a      	strb	r2, [r3, #21]
 800eb08:	2302      	movs	r3, #2
 800eb0a:	e109      	b.n	800ed20 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb12:	d104      	bne.n	800eb1e <f_write+0x11e>
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2201      	movs	r2, #1
 800eb18:	755a      	strb	r2, [r3, #21]
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	e100      	b.n	800ed20 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb22:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d102      	bne.n	800eb32 <f_write+0x132>
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb30:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	7d1b      	ldrb	r3, [r3, #20]
 800eb36:	b25b      	sxtb	r3, r3
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	da18      	bge.n	800eb6e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	7858      	ldrb	r0, [r3, #1]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6a1a      	ldr	r2, [r3, #32]
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	f7fd fbce 	bl	800c2ec <disk_write>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d004      	beq.n	800eb60 <f_write+0x160>
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	755a      	strb	r2, [r3, #21]
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e0df      	b.n	800ed20 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	7d1b      	ldrb	r3, [r3, #20]
 800eb64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eb6e:	693a      	ldr	r2, [r7, #16]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	69db      	ldr	r3, [r3, #28]
 800eb74:	4619      	mov	r1, r3
 800eb76:	4610      	mov	r0, r2
 800eb78:	f7fd ff44 	bl	800ca04 <clust2sect>
 800eb7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d104      	bne.n	800eb8e <f_write+0x18e>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2202      	movs	r2, #2
 800eb88:	755a      	strb	r2, [r3, #21]
 800eb8a:	2302      	movs	r3, #2
 800eb8c:	e0c8      	b.n	800ed20 <f_write+0x320>
			sect += csect;
 800eb8e:	697a      	ldr	r2, [r7, #20]
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	4413      	add	r3, r2
 800eb94:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	899b      	ldrh	r3, [r3, #12]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800eba2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800eba4:	6a3b      	ldr	r3, [r7, #32]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d043      	beq.n	800ec32 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ebaa:	69ba      	ldr	r2, [r7, #24]
 800ebac:	6a3b      	ldr	r3, [r7, #32]
 800ebae:	4413      	add	r3, r2
 800ebb0:	693a      	ldr	r2, [r7, #16]
 800ebb2:	8952      	ldrh	r2, [r2, #10]
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d905      	bls.n	800ebc4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	895b      	ldrh	r3, [r3, #10]
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	7858      	ldrb	r0, [r3, #1]
 800ebc8:	6a3b      	ldr	r3, [r7, #32]
 800ebca:	697a      	ldr	r2, [r7, #20]
 800ebcc:	69f9      	ldr	r1, [r7, #28]
 800ebce:	f7fd fb8d 	bl	800c2ec <disk_write>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d004      	beq.n	800ebe2 <f_write+0x1e2>
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2201      	movs	r2, #1
 800ebdc:	755a      	strb	r2, [r3, #21]
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e09e      	b.n	800ed20 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	6a1a      	ldr	r2, [r3, #32]
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	1ad3      	subs	r3, r2, r3
 800ebea:	6a3a      	ldr	r2, [r7, #32]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d918      	bls.n	800ec22 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6a1a      	ldr	r2, [r3, #32]
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	693a      	ldr	r2, [r7, #16]
 800ec00:	8992      	ldrh	r2, [r2, #12]
 800ec02:	fb02 f303 	mul.w	r3, r2, r3
 800ec06:	69fa      	ldr	r2, [r7, #28]
 800ec08:	18d1      	adds	r1, r2, r3
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	899b      	ldrh	r3, [r3, #12]
 800ec0e:	461a      	mov	r2, r3
 800ec10:	f7fd fc2c 	bl	800c46c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	7d1b      	ldrb	r3, [r3, #20]
 800ec18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	899b      	ldrh	r3, [r3, #12]
 800ec26:	461a      	mov	r2, r3
 800ec28:	6a3b      	ldr	r3, [r7, #32]
 800ec2a:	fb02 f303 	mul.w	r3, r2, r3
 800ec2e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ec30:	e04b      	b.n	800ecca <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	6a1b      	ldr	r3, [r3, #32]
 800ec36:	697a      	ldr	r2, [r7, #20]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d016      	beq.n	800ec6a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	699a      	ldr	r2, [r3, #24]
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d210      	bcs.n	800ec6a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	7858      	ldrb	r0, [r3, #1]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec52:	2301      	movs	r3, #1
 800ec54:	697a      	ldr	r2, [r7, #20]
 800ec56:	f7fd fb29 	bl	800c2ac <disk_read>
 800ec5a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d004      	beq.n	800ec6a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2201      	movs	r2, #1
 800ec64:	755a      	strb	r2, [r3, #21]
 800ec66:	2301      	movs	r3, #1
 800ec68:	e05a      	b.n	800ed20 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	697a      	ldr	r2, [r7, #20]
 800ec6e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	899b      	ldrh	r3, [r3, #12]
 800ec74:	4618      	mov	r0, r3
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	699b      	ldr	r3, [r3, #24]
 800ec7a:	693a      	ldr	r2, [r7, #16]
 800ec7c:	8992      	ldrh	r2, [r2, #12]
 800ec7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec82:	fb01 f202 	mul.w	r2, r1, r2
 800ec86:	1a9b      	subs	r3, r3, r2
 800ec88:	1ac3      	subs	r3, r0, r3
 800ec8a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ec8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d901      	bls.n	800ec98 <f_write+0x298>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	699b      	ldr	r3, [r3, #24]
 800eca2:	693a      	ldr	r2, [r7, #16]
 800eca4:	8992      	ldrh	r2, [r2, #12]
 800eca6:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecaa:	fb00 f202 	mul.w	r2, r0, r2
 800ecae:	1a9b      	subs	r3, r3, r2
 800ecb0:	440b      	add	r3, r1
 800ecb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecb4:	69f9      	ldr	r1, [r7, #28]
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fd fbd8 	bl	800c46c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	7d1b      	ldrb	r3, [r3, #20]
 800ecc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ecc4:	b2da      	uxtb	r2, r3
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ecca:	69fa      	ldr	r2, [r7, #28]
 800eccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecce:	4413      	add	r3, r2
 800ecd0:	61fb      	str	r3, [r7, #28]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	699a      	ldr	r2, [r3, #24]
 800ecd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd8:	441a      	add	r2, r3
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	619a      	str	r2, [r3, #24]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	68da      	ldr	r2, [r3, #12]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	699b      	ldr	r3, [r3, #24]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	bf38      	it	cc
 800ecea:	461a      	movcc	r2, r3
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	60da      	str	r2, [r3, #12]
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf6:	441a      	add	r2, r3
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	601a      	str	r2, [r3, #0]
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	f47f aeb5 	bne.w	800ea76 <f_write+0x76>
 800ed0c:	e000      	b.n	800ed10 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ed0e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	7d1b      	ldrb	r3, [r3, #20]
 800ed14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3730      	adds	r7, #48	; 0x30
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b086      	sub	sp, #24
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f107 0208 	add.w	r2, r7, #8
 800ed36:	4611      	mov	r1, r2
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7ff fc19 	bl	800e570 <validate>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d168      	bne.n	800ee1a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	7d1b      	ldrb	r3, [r3, #20]
 800ed4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d062      	beq.n	800ee1a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	7d1b      	ldrb	r3, [r3, #20]
 800ed58:	b25b      	sxtb	r3, r3
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	da15      	bge.n	800ed8a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	7858      	ldrb	r0, [r3, #1]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6a1a      	ldr	r2, [r3, #32]
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	f7fd fabd 	bl	800c2ec <disk_write>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d001      	beq.n	800ed7c <f_sync+0x54>
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e04f      	b.n	800ee1c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	7d1b      	ldrb	r3, [r3, #20]
 800ed80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed84:	b2da      	uxtb	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ed8a:	f7fb fa23 	bl	800a1d4 <get_fattime>
 800ed8e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed96:	4619      	mov	r1, r3
 800ed98:	4610      	mov	r0, r2
 800ed9a:	f7fd fd95 	bl	800c8c8 <move_window>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eda2:	7dfb      	ldrb	r3, [r7, #23]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d138      	bne.n	800ee1a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	330b      	adds	r3, #11
 800edb2:	781a      	ldrb	r2, [r3, #0]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	330b      	adds	r3, #11
 800edb8:	f042 0220 	orr.w	r2, r2, #32
 800edbc:	b2d2      	uxtb	r2, r2
 800edbe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6818      	ldr	r0, [r3, #0]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	461a      	mov	r2, r3
 800edca:	68f9      	ldr	r1, [r7, #12]
 800edcc:	f7fe fb21 	bl	800d412 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f103 021c 	add.w	r2, r3, #28
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	4619      	mov	r1, r3
 800eddc:	4610      	mov	r0, r2
 800edde:	f7fd fb19 	bl	800c414 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	3316      	adds	r3, #22
 800ede6:	6939      	ldr	r1, [r7, #16]
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fd fb13 	bl	800c414 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	3312      	adds	r3, #18
 800edf2:	2100      	movs	r1, #0
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fd faf2 	bl	800c3de <st_word>
					fs->wflag = 1;
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	2201      	movs	r2, #1
 800edfe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fd fd8e 	bl	800c924 <sync_fs>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	7d1b      	ldrb	r3, [r3, #20]
 800ee10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee14:	b2da      	uxtb	r2, r3
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ee1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3718      	adds	r7, #24
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f7ff ff7b 	bl	800ed28 <f_sync>
 800ee32:	4603      	mov	r3, r0
 800ee34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ee36:	7bfb      	ldrb	r3, [r7, #15]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d118      	bne.n	800ee6e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f107 0208 	add.w	r2, r7, #8
 800ee42:	4611      	mov	r1, r2
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff fb93 	bl	800e570 <validate>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ee4e:	7bfb      	ldrb	r3, [r7, #15]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10c      	bne.n	800ee6e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fd fc91 	bl	800c780 <dec_lock>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ee62:	7bfb      	ldrb	r3, [r7, #15]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d102      	bne.n	800ee6e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ee6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3710      	adds	r7, #16
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}

0800ee78 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b092      	sub	sp, #72	; 0x48
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ee84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ee88:	f107 030c 	add.w	r3, r7, #12
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff f8e8 	bl	800e064 <find_volume>
 800ee94:	4603      	mov	r3, r0
 800ee96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800ee9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	f040 8099 	bne.w	800efd6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800eea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800eeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeac:	699a      	ldr	r2, [r3, #24]
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	69db      	ldr	r3, [r3, #28]
 800eeb2:	3b02      	subs	r3, #2
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d804      	bhi.n	800eec2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	699a      	ldr	r2, [r3, #24]
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	601a      	str	r2, [r3, #0]
 800eec0:	e089      	b.n	800efd6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800eec2:	2300      	movs	r3, #0
 800eec4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800eec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d128      	bne.n	800ef20 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800eece:	2302      	movs	r3, #2
 800eed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800eed6:	f107 0314 	add.w	r3, r7, #20
 800eeda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fd fdb0 	bl	800ca42 <get_fat>
 800eee2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeea:	d103      	bne.n	800eef4 <f_getfree+0x7c>
 800eeec:	2301      	movs	r3, #1
 800eeee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800eef2:	e063      	b.n	800efbc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800eef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d103      	bne.n	800ef02 <f_getfree+0x8a>
 800eefa:	2302      	movs	r3, #2
 800eefc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ef00:	e05c      	b.n	800efbc <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ef02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d102      	bne.n	800ef0e <f_getfree+0x96>
 800ef08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ef0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef10:	3301      	adds	r3, #1
 800ef12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef16:	69db      	ldr	r3, [r3, #28]
 800ef18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d3db      	bcc.n	800eed6 <f_getfree+0x5e>
 800ef1e:	e04d      	b.n	800efbc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ef20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef22:	69db      	ldr	r3, [r3, #28]
 800ef24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef2a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ef30:	2300      	movs	r3, #0
 800ef32:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ef34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d113      	bne.n	800ef62 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ef3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3e:	1c5a      	adds	r2, r3, #1
 800ef40:	63ba      	str	r2, [r7, #56]	; 0x38
 800ef42:	4619      	mov	r1, r3
 800ef44:	f7fd fcc0 	bl	800c8c8 <move_window>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ef4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d131      	bne.n	800efba <f_getfree+0x142>
							p = fs->win;
 800ef56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef58:	3338      	adds	r3, #56	; 0x38
 800ef5a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5e:	899b      	ldrh	r3, [r3, #12]
 800ef60:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ef62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	2b02      	cmp	r3, #2
 800ef68:	d10f      	bne.n	800ef8a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ef6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef6c:	f7fd f9fc 	bl	800c368 <ld_word>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d102      	bne.n	800ef7c <f_getfree+0x104>
 800ef76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef78:	3301      	adds	r3, #1
 800ef7a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800ef7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7e:	3302      	adds	r3, #2
 800ef80:	633b      	str	r3, [r7, #48]	; 0x30
 800ef82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef84:	3b02      	subs	r3, #2
 800ef86:	637b      	str	r3, [r7, #52]	; 0x34
 800ef88:	e010      	b.n	800efac <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ef8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef8c:	f7fd fa04 	bl	800c398 <ld_dword>
 800ef90:	4603      	mov	r3, r0
 800ef92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d102      	bne.n	800efa0 <f_getfree+0x128>
 800ef9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800efa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa2:	3304      	adds	r3, #4
 800efa4:	633b      	str	r3, [r7, #48]	; 0x30
 800efa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa8:	3b04      	subs	r3, #4
 800efaa:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800efac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efae:	3b01      	subs	r3, #1
 800efb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d1bd      	bne.n	800ef34 <f_getfree+0xbc>
 800efb8:	e000      	b.n	800efbc <f_getfree+0x144>
							if (res != FR_OK) break;
 800efba:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efc0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800efc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efc6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800efc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efca:	791a      	ldrb	r2, [r3, #4]
 800efcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efce:	f042 0201 	orr.w	r2, r2, #1
 800efd2:	b2d2      	uxtb	r2, r2
 800efd4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800efd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3748      	adds	r7, #72	; 0x48
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b084      	sub	sp, #16
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
 800efea:	460b      	mov	r3, r1
 800efec:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800efee:	78fb      	ldrb	r3, [r7, #3]
 800eff0:	2b0a      	cmp	r3, #10
 800eff2:	d103      	bne.n	800effc <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800eff4:	210d      	movs	r1, #13
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7ff fff3 	bl	800efe2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2b00      	cmp	r3, #0
 800f006:	db25      	blt.n	800f054 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	1c5a      	adds	r2, r3, #1
 800f00c:	60fa      	str	r2, [r7, #12]
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	4413      	add	r3, r2
 800f012:	78fa      	ldrb	r2, [r7, #3]
 800f014:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2b3c      	cmp	r3, #60	; 0x3c
 800f01a:	dd12      	ble.n	800f042 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6818      	ldr	r0, [r3, #0]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f103 010c 	add.w	r1, r3, #12
 800f026:	68fa      	ldr	r2, [r7, #12]
 800f028:	f107 0308 	add.w	r3, r7, #8
 800f02c:	f7ff fce8 	bl	800ea00 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	429a      	cmp	r2, r3
 800f036:	d101      	bne.n	800f03c <putc_bfd+0x5a>
 800f038:	2300      	movs	r3, #0
 800f03a:	e001      	b.n	800f040 <putc_bfd+0x5e>
 800f03c:	f04f 33ff 	mov.w	r3, #4294967295
 800f040:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	689b      	ldr	r3, [r3, #8]
 800f04c:	1c5a      	adds	r2, r3, #1
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	609a      	str	r2, [r3, #8]
 800f052:	e000      	b.n	800f056 <putc_bfd+0x74>
	if (i < 0) return;
 800f054:	bf00      	nop
}
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b084      	sub	sp, #16
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	db16      	blt.n	800f09a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6818      	ldr	r0, [r3, #0]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f103 010c 	add.w	r1, r3, #12
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	461a      	mov	r2, r3
 800f07c:	f107 030c 	add.w	r3, r7, #12
 800f080:	f7ff fcbe 	bl	800ea00 <f_write>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d107      	bne.n	800f09a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	68fa      	ldr	r2, [r7, #12]
 800f090:	4293      	cmp	r3, r2
 800f092:	d102      	bne.n	800f09a <putc_flush+0x3e>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	e001      	b.n	800f09e <putc_flush+0x42>
	return EOF;
 800f09a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800f0a6:	b480      	push	{r7}
 800f0a8:	b083      	sub	sp, #12
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
 800f0ae:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	683a      	ldr	r2, [r7, #0]
 800f0b4:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	605a      	str	r2, [r3, #4]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	685a      	ldr	r2, [r3, #4]
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	609a      	str	r2, [r3, #8]
}
 800f0c4:	bf00      	nop
 800f0c6:	370c      	adds	r7, #12
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b096      	sub	sp, #88	; 0x58
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800f0da:	f107 030c 	add.w	r3, r7, #12
 800f0de:	6839      	ldr	r1, [r7, #0]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7ff ffe0 	bl	800f0a6 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800f0e6:	e009      	b.n	800f0fc <f_puts+0x2c>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	1c5a      	adds	r2, r3, #1
 800f0ec:	607a      	str	r2, [r7, #4]
 800f0ee:	781a      	ldrb	r2, [r3, #0]
 800f0f0:	f107 030c 	add.w	r3, r7, #12
 800f0f4:	4611      	mov	r1, r2
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7ff ff73 	bl	800efe2 <putc_bfd>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d1f1      	bne.n	800f0e8 <f_puts+0x18>
	return putc_flush(&pb);
 800f104:	f107 030c 	add.w	r3, r7, #12
 800f108:	4618      	mov	r0, r3
 800f10a:	f7ff ffa7 	bl	800f05c <putc_flush>
 800f10e:	4603      	mov	r3, r0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3758      	adds	r7, #88	; 0x58
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f118:	b480      	push	{r7}
 800f11a:	b087      	sub	sp, #28
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	4613      	mov	r3, r2
 800f124:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f126:	2301      	movs	r3, #1
 800f128:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f12e:	4b1f      	ldr	r3, [pc, #124]	; (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f130:	7a5b      	ldrb	r3, [r3, #9]
 800f132:	b2db      	uxtb	r3, r3
 800f134:	2b00      	cmp	r3, #0
 800f136:	d131      	bne.n	800f19c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f138:	4b1c      	ldr	r3, [pc, #112]	; (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f13a:	7a5b      	ldrb	r3, [r3, #9]
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	461a      	mov	r2, r3
 800f140:	4b1a      	ldr	r3, [pc, #104]	; (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f142:	2100      	movs	r1, #0
 800f144:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f146:	4b19      	ldr	r3, [pc, #100]	; (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f148:	7a5b      	ldrb	r3, [r3, #9]
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	4a17      	ldr	r2, [pc, #92]	; (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	4413      	add	r3, r2
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f156:	4b15      	ldr	r3, [pc, #84]	; (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f158:	7a5b      	ldrb	r3, [r3, #9]
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	461a      	mov	r2, r3
 800f15e:	4b13      	ldr	r3, [pc, #76]	; (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f160:	4413      	add	r3, r2
 800f162:	79fa      	ldrb	r2, [r7, #7]
 800f164:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f166:	4b11      	ldr	r3, [pc, #68]	; (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f168:	7a5b      	ldrb	r3, [r3, #9]
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	1c5a      	adds	r2, r3, #1
 800f16e:	b2d1      	uxtb	r1, r2
 800f170:	4a0e      	ldr	r2, [pc, #56]	; (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f172:	7251      	strb	r1, [r2, #9]
 800f174:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f176:	7dbb      	ldrb	r3, [r7, #22]
 800f178:	3330      	adds	r3, #48	; 0x30
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	3301      	adds	r3, #1
 800f184:	223a      	movs	r2, #58	; 0x3a
 800f186:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	3302      	adds	r3, #2
 800f18c:	222f      	movs	r2, #47	; 0x2f
 800f18e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	3303      	adds	r3, #3
 800f194:	2200      	movs	r2, #0
 800f196:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f198:	2300      	movs	r3, #0
 800f19a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	371c      	adds	r7, #28
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	200030a4 	.word	0x200030a4

0800f1b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f7ff ffaa 	bl	800f118 <FATFS_LinkDriverEx>
 800f1c4:	4603      	mov	r3, r0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
	...

0800f1d0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b085      	sub	sp, #20
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	6039      	str	r1, [r7, #0]
 800f1da:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f1dc:	88fb      	ldrh	r3, [r7, #6]
 800f1de:	2b7f      	cmp	r3, #127	; 0x7f
 800f1e0:	d802      	bhi.n	800f1e8 <ff_convert+0x18>
		c = chr;
 800f1e2:	88fb      	ldrh	r3, [r7, #6]
 800f1e4:	81fb      	strh	r3, [r7, #14]
 800f1e6:	e025      	b.n	800f234 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00b      	beq.n	800f206 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f1ee:	88fb      	ldrh	r3, [r7, #6]
 800f1f0:	2bff      	cmp	r3, #255	; 0xff
 800f1f2:	d805      	bhi.n	800f200 <ff_convert+0x30>
 800f1f4:	88fb      	ldrh	r3, [r7, #6]
 800f1f6:	3b80      	subs	r3, #128	; 0x80
 800f1f8:	4a12      	ldr	r2, [pc, #72]	; (800f244 <ff_convert+0x74>)
 800f1fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1fe:	e000      	b.n	800f202 <ff_convert+0x32>
 800f200:	2300      	movs	r3, #0
 800f202:	81fb      	strh	r3, [r7, #14]
 800f204:	e016      	b.n	800f234 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f206:	2300      	movs	r3, #0
 800f208:	81fb      	strh	r3, [r7, #14]
 800f20a:	e009      	b.n	800f220 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f20c:	89fb      	ldrh	r3, [r7, #14]
 800f20e:	4a0d      	ldr	r2, [pc, #52]	; (800f244 <ff_convert+0x74>)
 800f210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f214:	88fa      	ldrh	r2, [r7, #6]
 800f216:	429a      	cmp	r2, r3
 800f218:	d006      	beq.n	800f228 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f21a:	89fb      	ldrh	r3, [r7, #14]
 800f21c:	3301      	adds	r3, #1
 800f21e:	81fb      	strh	r3, [r7, #14]
 800f220:	89fb      	ldrh	r3, [r7, #14]
 800f222:	2b7f      	cmp	r3, #127	; 0x7f
 800f224:	d9f2      	bls.n	800f20c <ff_convert+0x3c>
 800f226:	e000      	b.n	800f22a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f228:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f22a:	89fb      	ldrh	r3, [r7, #14]
 800f22c:	3380      	adds	r3, #128	; 0x80
 800f22e:	b29b      	uxth	r3, r3
 800f230:	b2db      	uxtb	r3, r3
 800f232:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f234:	89fb      	ldrh	r3, [r7, #14]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3714      	adds	r7, #20
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	08015fd8 	.word	0x08015fd8

0800f248 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f248:	b480      	push	{r7}
 800f24a:	b087      	sub	sp, #28
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	4603      	mov	r3, r0
 800f250:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f252:	88fb      	ldrh	r3, [r7, #6]
 800f254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f258:	d201      	bcs.n	800f25e <ff_wtoupper+0x16>
 800f25a:	4b3e      	ldr	r3, [pc, #248]	; (800f354 <ff_wtoupper+0x10c>)
 800f25c:	e000      	b.n	800f260 <ff_wtoupper+0x18>
 800f25e:	4b3e      	ldr	r3, [pc, #248]	; (800f358 <ff_wtoupper+0x110>)
 800f260:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	1c9a      	adds	r2, r3, #2
 800f266:	617a      	str	r2, [r7, #20]
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f26c:	8a7b      	ldrh	r3, [r7, #18]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d068      	beq.n	800f344 <ff_wtoupper+0xfc>
 800f272:	88fa      	ldrh	r2, [r7, #6]
 800f274:	8a7b      	ldrh	r3, [r7, #18]
 800f276:	429a      	cmp	r2, r3
 800f278:	d364      	bcc.n	800f344 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	1c9a      	adds	r2, r3, #2
 800f27e:	617a      	str	r2, [r7, #20]
 800f280:	881b      	ldrh	r3, [r3, #0]
 800f282:	823b      	strh	r3, [r7, #16]
 800f284:	8a3b      	ldrh	r3, [r7, #16]
 800f286:	0a1b      	lsrs	r3, r3, #8
 800f288:	81fb      	strh	r3, [r7, #14]
 800f28a:	8a3b      	ldrh	r3, [r7, #16]
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f290:	88fa      	ldrh	r2, [r7, #6]
 800f292:	8a79      	ldrh	r1, [r7, #18]
 800f294:	8a3b      	ldrh	r3, [r7, #16]
 800f296:	440b      	add	r3, r1
 800f298:	429a      	cmp	r2, r3
 800f29a:	da49      	bge.n	800f330 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f29c:	89fb      	ldrh	r3, [r7, #14]
 800f29e:	2b08      	cmp	r3, #8
 800f2a0:	d84f      	bhi.n	800f342 <ff_wtoupper+0xfa>
 800f2a2:	a201      	add	r2, pc, #4	; (adr r2, 800f2a8 <ff_wtoupper+0x60>)
 800f2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a8:	0800f2cd 	.word	0x0800f2cd
 800f2ac:	0800f2df 	.word	0x0800f2df
 800f2b0:	0800f2f5 	.word	0x0800f2f5
 800f2b4:	0800f2fd 	.word	0x0800f2fd
 800f2b8:	0800f305 	.word	0x0800f305
 800f2bc:	0800f30d 	.word	0x0800f30d
 800f2c0:	0800f315 	.word	0x0800f315
 800f2c4:	0800f31d 	.word	0x0800f31d
 800f2c8:	0800f325 	.word	0x0800f325
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f2cc:	88fa      	ldrh	r2, [r7, #6]
 800f2ce:	8a7b      	ldrh	r3, [r7, #18]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	005b      	lsls	r3, r3, #1
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	881b      	ldrh	r3, [r3, #0]
 800f2da:	80fb      	strh	r3, [r7, #6]
 800f2dc:	e027      	b.n	800f32e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f2de:	88fa      	ldrh	r2, [r7, #6]
 800f2e0:	8a7b      	ldrh	r3, [r7, #18]
 800f2e2:	1ad3      	subs	r3, r2, r3
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	f003 0301 	and.w	r3, r3, #1
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	88fa      	ldrh	r2, [r7, #6]
 800f2ee:	1ad3      	subs	r3, r2, r3
 800f2f0:	80fb      	strh	r3, [r7, #6]
 800f2f2:	e01c      	b.n	800f32e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f2f4:	88fb      	ldrh	r3, [r7, #6]
 800f2f6:	3b10      	subs	r3, #16
 800f2f8:	80fb      	strh	r3, [r7, #6]
 800f2fa:	e018      	b.n	800f32e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f2fc:	88fb      	ldrh	r3, [r7, #6]
 800f2fe:	3b20      	subs	r3, #32
 800f300:	80fb      	strh	r3, [r7, #6]
 800f302:	e014      	b.n	800f32e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f304:	88fb      	ldrh	r3, [r7, #6]
 800f306:	3b30      	subs	r3, #48	; 0x30
 800f308:	80fb      	strh	r3, [r7, #6]
 800f30a:	e010      	b.n	800f32e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f30c:	88fb      	ldrh	r3, [r7, #6]
 800f30e:	3b1a      	subs	r3, #26
 800f310:	80fb      	strh	r3, [r7, #6]
 800f312:	e00c      	b.n	800f32e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f314:	88fb      	ldrh	r3, [r7, #6]
 800f316:	3308      	adds	r3, #8
 800f318:	80fb      	strh	r3, [r7, #6]
 800f31a:	e008      	b.n	800f32e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f31c:	88fb      	ldrh	r3, [r7, #6]
 800f31e:	3b50      	subs	r3, #80	; 0x50
 800f320:	80fb      	strh	r3, [r7, #6]
 800f322:	e004      	b.n	800f32e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f324:	88fb      	ldrh	r3, [r7, #6]
 800f326:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f32a:	80fb      	strh	r3, [r7, #6]
 800f32c:	bf00      	nop
			}
			break;
 800f32e:	e008      	b.n	800f342 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f330:	89fb      	ldrh	r3, [r7, #14]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d195      	bne.n	800f262 <ff_wtoupper+0x1a>
 800f336:	8a3b      	ldrh	r3, [r7, #16]
 800f338:	005b      	lsls	r3, r3, #1
 800f33a:	697a      	ldr	r2, [r7, #20]
 800f33c:	4413      	add	r3, r2
 800f33e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f340:	e78f      	b.n	800f262 <ff_wtoupper+0x1a>
			break;
 800f342:	bf00      	nop
	}

	return chr;
 800f344:	88fb      	ldrh	r3, [r7, #6]
}
 800f346:	4618      	mov	r0, r3
 800f348:	371c      	adds	r7, #28
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	080160d8 	.word	0x080160d8
 800f358:	080162cc 	.word	0x080162cc

0800f35c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f360:	2200      	movs	r2, #0
 800f362:	4912      	ldr	r1, [pc, #72]	; (800f3ac <MX_USB_DEVICE_Init+0x50>)
 800f364:	4812      	ldr	r0, [pc, #72]	; (800f3b0 <MX_USB_DEVICE_Init+0x54>)
 800f366:	f7fb fc67 	bl	800ac38 <USBD_Init>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d001      	beq.n	800f374 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f370:	f7f3 fe96 	bl	80030a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f374:	490f      	ldr	r1, [pc, #60]	; (800f3b4 <MX_USB_DEVICE_Init+0x58>)
 800f376:	480e      	ldr	r0, [pc, #56]	; (800f3b0 <MX_USB_DEVICE_Init+0x54>)
 800f378:	f7fb fc8e 	bl	800ac98 <USBD_RegisterClass>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d001      	beq.n	800f386 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f382:	f7f3 fe8d 	bl	80030a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f386:	490c      	ldr	r1, [pc, #48]	; (800f3b8 <MX_USB_DEVICE_Init+0x5c>)
 800f388:	4809      	ldr	r0, [pc, #36]	; (800f3b0 <MX_USB_DEVICE_Init+0x54>)
 800f38a:	f7fb fb85 	bl	800aa98 <USBD_CDC_RegisterInterface>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d001      	beq.n	800f398 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f394:	f7f3 fe84 	bl	80030a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f398:	4805      	ldr	r0, [pc, #20]	; (800f3b0 <MX_USB_DEVICE_Init+0x54>)
 800f39a:	f7fb fcb3 	bl	800ad04 <USBD_Start>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f3a4:	f7f3 fe7c 	bl	80030a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f3a8:	bf00      	nop
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	200000c4 	.word	0x200000c4
 800f3b0:	200030b0 	.word	0x200030b0
 800f3b4:	20000030 	.word	0x20000030
 800f3b8:	200000b0 	.word	0x200000b0

0800f3bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	4905      	ldr	r1, [pc, #20]	; (800f3d8 <CDC_Init_FS+0x1c>)
 800f3c4:	4805      	ldr	r0, [pc, #20]	; (800f3dc <CDC_Init_FS+0x20>)
 800f3c6:	f7fb fb81 	bl	800aacc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f3ca:	4905      	ldr	r1, [pc, #20]	; (800f3e0 <CDC_Init_FS+0x24>)
 800f3cc:	4803      	ldr	r0, [pc, #12]	; (800f3dc <CDC_Init_FS+0x20>)
 800f3ce:	f7fb fb9f 	bl	800ab10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f3d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	20003b8c 	.word	0x20003b8c
 800f3dc:	200030b0 	.word	0x200030b0
 800f3e0:	2000338c 	.word	0x2000338c

0800f3e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f3e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	6039      	str	r1, [r7, #0]
 800f3fe:	71fb      	strb	r3, [r7, #7]
 800f400:	4613      	mov	r3, r2
 800f402:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f404:	79fb      	ldrb	r3, [r7, #7]
 800f406:	2b23      	cmp	r3, #35	; 0x23
 800f408:	d84a      	bhi.n	800f4a0 <CDC_Control_FS+0xac>
 800f40a:	a201      	add	r2, pc, #4	; (adr r2, 800f410 <CDC_Control_FS+0x1c>)
 800f40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f410:	0800f4a1 	.word	0x0800f4a1
 800f414:	0800f4a1 	.word	0x0800f4a1
 800f418:	0800f4a1 	.word	0x0800f4a1
 800f41c:	0800f4a1 	.word	0x0800f4a1
 800f420:	0800f4a1 	.word	0x0800f4a1
 800f424:	0800f4a1 	.word	0x0800f4a1
 800f428:	0800f4a1 	.word	0x0800f4a1
 800f42c:	0800f4a1 	.word	0x0800f4a1
 800f430:	0800f4a1 	.word	0x0800f4a1
 800f434:	0800f4a1 	.word	0x0800f4a1
 800f438:	0800f4a1 	.word	0x0800f4a1
 800f43c:	0800f4a1 	.word	0x0800f4a1
 800f440:	0800f4a1 	.word	0x0800f4a1
 800f444:	0800f4a1 	.word	0x0800f4a1
 800f448:	0800f4a1 	.word	0x0800f4a1
 800f44c:	0800f4a1 	.word	0x0800f4a1
 800f450:	0800f4a1 	.word	0x0800f4a1
 800f454:	0800f4a1 	.word	0x0800f4a1
 800f458:	0800f4a1 	.word	0x0800f4a1
 800f45c:	0800f4a1 	.word	0x0800f4a1
 800f460:	0800f4a1 	.word	0x0800f4a1
 800f464:	0800f4a1 	.word	0x0800f4a1
 800f468:	0800f4a1 	.word	0x0800f4a1
 800f46c:	0800f4a1 	.word	0x0800f4a1
 800f470:	0800f4a1 	.word	0x0800f4a1
 800f474:	0800f4a1 	.word	0x0800f4a1
 800f478:	0800f4a1 	.word	0x0800f4a1
 800f47c:	0800f4a1 	.word	0x0800f4a1
 800f480:	0800f4a1 	.word	0x0800f4a1
 800f484:	0800f4a1 	.word	0x0800f4a1
 800f488:	0800f4a1 	.word	0x0800f4a1
 800f48c:	0800f4a1 	.word	0x0800f4a1
 800f490:	0800f4a1 	.word	0x0800f4a1
 800f494:	0800f4a1 	.word	0x0800f4a1
 800f498:	0800f4a1 	.word	0x0800f4a1
 800f49c:	0800f4a1 	.word	0x0800f4a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f4a0:	bf00      	nop
  }

  return (USBD_OK);
 800f4a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f4ba:	6879      	ldr	r1, [r7, #4]
 800f4bc:	4805      	ldr	r0, [pc, #20]	; (800f4d4 <CDC_Receive_FS+0x24>)
 800f4be:	f7fb fb27 	bl	800ab10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f4c2:	4804      	ldr	r0, [pc, #16]	; (800f4d4 <CDC_Receive_FS+0x24>)
 800f4c4:	f7fb fb82 	bl	800abcc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f4c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3708      	adds	r7, #8
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	200030b0 	.word	0x200030b0

0800f4d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f4e8:	4b0d      	ldr	r3, [pc, #52]	; (800f520 <CDC_Transmit_FS+0x48>)
 800f4ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d001      	beq.n	800f4fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	e00b      	b.n	800f516 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f4fe:	887b      	ldrh	r3, [r7, #2]
 800f500:	461a      	mov	r2, r3
 800f502:	6879      	ldr	r1, [r7, #4]
 800f504:	4806      	ldr	r0, [pc, #24]	; (800f520 <CDC_Transmit_FS+0x48>)
 800f506:	f7fb fae1 	bl	800aacc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f50a:	4805      	ldr	r0, [pc, #20]	; (800f520 <CDC_Transmit_FS+0x48>)
 800f50c:	f7fb fb1e 	bl	800ab4c <USBD_CDC_TransmitPacket>
 800f510:	4603      	mov	r3, r0
 800f512:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f514:	7bfb      	ldrb	r3, [r7, #15]
}
 800f516:	4618      	mov	r0, r3
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	200030b0 	.word	0x200030b0

0800f524 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f524:	b480      	push	{r7}
 800f526:	b087      	sub	sp, #28
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	4613      	mov	r3, r2
 800f530:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f532:	2300      	movs	r3, #0
 800f534:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f536:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	371c      	adds	r7, #28
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr
	...

0800f548 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	4603      	mov	r3, r0
 800f550:	6039      	str	r1, [r7, #0]
 800f552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	2212      	movs	r2, #18
 800f558:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f55a:	4b03      	ldr	r3, [pc, #12]	; (800f568 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	370c      	adds	r7, #12
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr
 800f568:	200000e0 	.word	0x200000e0

0800f56c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	4603      	mov	r3, r0
 800f574:	6039      	str	r1, [r7, #0]
 800f576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	2204      	movs	r2, #4
 800f57c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f57e:	4b03      	ldr	r3, [pc, #12]	; (800f58c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f580:	4618      	mov	r0, r3
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr
 800f58c:	200000f4 	.word	0x200000f4

0800f590 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	4603      	mov	r3, r0
 800f598:	6039      	str	r1, [r7, #0]
 800f59a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f59c:	79fb      	ldrb	r3, [r7, #7]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d105      	bne.n	800f5ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f5a2:	683a      	ldr	r2, [r7, #0]
 800f5a4:	4907      	ldr	r1, [pc, #28]	; (800f5c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f5a6:	4808      	ldr	r0, [pc, #32]	; (800f5c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f5a8:	f7fc fd5e 	bl	800c068 <USBD_GetString>
 800f5ac:	e004      	b.n	800f5b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f5ae:	683a      	ldr	r2, [r7, #0]
 800f5b0:	4904      	ldr	r1, [pc, #16]	; (800f5c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f5b2:	4805      	ldr	r0, [pc, #20]	; (800f5c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f5b4:	f7fc fd58 	bl	800c068 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5b8:	4b02      	ldr	r3, [pc, #8]	; (800f5c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3708      	adds	r7, #8
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	2000438c 	.word	0x2000438c
 800f5c8:	08015ed4 	.word	0x08015ed4

0800f5cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	6039      	str	r1, [r7, #0]
 800f5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f5d8:	683a      	ldr	r2, [r7, #0]
 800f5da:	4904      	ldr	r1, [pc, #16]	; (800f5ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f5dc:	4804      	ldr	r0, [pc, #16]	; (800f5f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f5de:	f7fc fd43 	bl	800c068 <USBD_GetString>
  return USBD_StrDesc;
 800f5e2:	4b02      	ldr	r3, [pc, #8]	; (800f5ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	2000438c 	.word	0x2000438c
 800f5f0:	08015eec 	.word	0x08015eec

0800f5f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	6039      	str	r1, [r7, #0]
 800f5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	221a      	movs	r2, #26
 800f604:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f606:	f000 f843 	bl	800f690 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f60a:	4b02      	ldr	r3, [pc, #8]	; (800f614 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	200000f8 	.word	0x200000f8

0800f618 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	4603      	mov	r3, r0
 800f620:	6039      	str	r1, [r7, #0]
 800f622:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f624:	79fb      	ldrb	r3, [r7, #7]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d105      	bne.n	800f636 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f62a:	683a      	ldr	r2, [r7, #0]
 800f62c:	4907      	ldr	r1, [pc, #28]	; (800f64c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f62e:	4808      	ldr	r0, [pc, #32]	; (800f650 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f630:	f7fc fd1a 	bl	800c068 <USBD_GetString>
 800f634:	e004      	b.n	800f640 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f636:	683a      	ldr	r2, [r7, #0]
 800f638:	4904      	ldr	r1, [pc, #16]	; (800f64c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f63a:	4805      	ldr	r0, [pc, #20]	; (800f650 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f63c:	f7fc fd14 	bl	800c068 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f640:	4b02      	ldr	r3, [pc, #8]	; (800f64c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f642:	4618      	mov	r0, r3
 800f644:	3708      	adds	r7, #8
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	2000438c 	.word	0x2000438c
 800f650:	08015f00 	.word	0x08015f00

0800f654 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	4603      	mov	r3, r0
 800f65c:	6039      	str	r1, [r7, #0]
 800f65e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f660:	79fb      	ldrb	r3, [r7, #7]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d105      	bne.n	800f672 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f666:	683a      	ldr	r2, [r7, #0]
 800f668:	4907      	ldr	r1, [pc, #28]	; (800f688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f66a:	4808      	ldr	r0, [pc, #32]	; (800f68c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f66c:	f7fc fcfc 	bl	800c068 <USBD_GetString>
 800f670:	e004      	b.n	800f67c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f672:	683a      	ldr	r2, [r7, #0]
 800f674:	4904      	ldr	r1, [pc, #16]	; (800f688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f676:	4805      	ldr	r0, [pc, #20]	; (800f68c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f678:	f7fc fcf6 	bl	800c068 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f67c:	4b02      	ldr	r3, [pc, #8]	; (800f688 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	2000438c 	.word	0x2000438c
 800f68c:	08015f0c 	.word	0x08015f0c

0800f690 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f696:	4b0f      	ldr	r3, [pc, #60]	; (800f6d4 <Get_SerialNum+0x44>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f69c:	4b0e      	ldr	r3, [pc, #56]	; (800f6d8 <Get_SerialNum+0x48>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f6a2:	4b0e      	ldr	r3, [pc, #56]	; (800f6dc <Get_SerialNum+0x4c>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d009      	beq.n	800f6ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f6b6:	2208      	movs	r2, #8
 800f6b8:	4909      	ldr	r1, [pc, #36]	; (800f6e0 <Get_SerialNum+0x50>)
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f000 f814 	bl	800f6e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f6c0:	2204      	movs	r2, #4
 800f6c2:	4908      	ldr	r1, [pc, #32]	; (800f6e4 <Get_SerialNum+0x54>)
 800f6c4:	68b8      	ldr	r0, [r7, #8]
 800f6c6:	f000 f80f 	bl	800f6e8 <IntToUnicode>
  }
}
 800f6ca:	bf00      	nop
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	1fff7a10 	.word	0x1fff7a10
 800f6d8:	1fff7a14 	.word	0x1fff7a14
 800f6dc:	1fff7a18 	.word	0x1fff7a18
 800f6e0:	200000fa 	.word	0x200000fa
 800f6e4:	2000010a 	.word	0x2000010a

0800f6e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b087      	sub	sp, #28
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	60b9      	str	r1, [r7, #8]
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	75fb      	strb	r3, [r7, #23]
 800f6fe:	e027      	b.n	800f750 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	0f1b      	lsrs	r3, r3, #28
 800f704:	2b09      	cmp	r3, #9
 800f706:	d80b      	bhi.n	800f720 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	0f1b      	lsrs	r3, r3, #28
 800f70c:	b2da      	uxtb	r2, r3
 800f70e:	7dfb      	ldrb	r3, [r7, #23]
 800f710:	005b      	lsls	r3, r3, #1
 800f712:	4619      	mov	r1, r3
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	440b      	add	r3, r1
 800f718:	3230      	adds	r2, #48	; 0x30
 800f71a:	b2d2      	uxtb	r2, r2
 800f71c:	701a      	strb	r2, [r3, #0]
 800f71e:	e00a      	b.n	800f736 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	0f1b      	lsrs	r3, r3, #28
 800f724:	b2da      	uxtb	r2, r3
 800f726:	7dfb      	ldrb	r3, [r7, #23]
 800f728:	005b      	lsls	r3, r3, #1
 800f72a:	4619      	mov	r1, r3
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	440b      	add	r3, r1
 800f730:	3237      	adds	r2, #55	; 0x37
 800f732:	b2d2      	uxtb	r2, r2
 800f734:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	011b      	lsls	r3, r3, #4
 800f73a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f73c:	7dfb      	ldrb	r3, [r7, #23]
 800f73e:	005b      	lsls	r3, r3, #1
 800f740:	3301      	adds	r3, #1
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	4413      	add	r3, r2
 800f746:	2200      	movs	r2, #0
 800f748:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f74a:	7dfb      	ldrb	r3, [r7, #23]
 800f74c:	3301      	adds	r3, #1
 800f74e:	75fb      	strb	r3, [r7, #23]
 800f750:	7dfa      	ldrb	r2, [r7, #23]
 800f752:	79fb      	ldrb	r3, [r7, #7]
 800f754:	429a      	cmp	r2, r3
 800f756:	d3d3      	bcc.n	800f700 <IntToUnicode+0x18>
  }
}
 800f758:	bf00      	nop
 800f75a:	bf00      	nop
 800f75c:	371c      	adds	r7, #28
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr
	...

0800f768 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b08a      	sub	sp, #40	; 0x28
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f770:	f107 0314 	add.w	r3, r7, #20
 800f774:	2200      	movs	r2, #0
 800f776:	601a      	str	r2, [r3, #0]
 800f778:	605a      	str	r2, [r3, #4]
 800f77a:	609a      	str	r2, [r3, #8]
 800f77c:	60da      	str	r2, [r3, #12]
 800f77e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f788:	d13a      	bne.n	800f800 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f78a:	2300      	movs	r3, #0
 800f78c:	613b      	str	r3, [r7, #16]
 800f78e:	4b1e      	ldr	r3, [pc, #120]	; (800f808 <HAL_PCD_MspInit+0xa0>)
 800f790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f792:	4a1d      	ldr	r2, [pc, #116]	; (800f808 <HAL_PCD_MspInit+0xa0>)
 800f794:	f043 0301 	orr.w	r3, r3, #1
 800f798:	6313      	str	r3, [r2, #48]	; 0x30
 800f79a:	4b1b      	ldr	r3, [pc, #108]	; (800f808 <HAL_PCD_MspInit+0xa0>)
 800f79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f79e:	f003 0301 	and.w	r3, r3, #1
 800f7a2:	613b      	str	r3, [r7, #16]
 800f7a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f7a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f7aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7ac:	2302      	movs	r3, #2
 800f7ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f7b8:	230a      	movs	r3, #10
 800f7ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7bc:	f107 0314 	add.w	r3, r7, #20
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	4812      	ldr	r0, [pc, #72]	; (800f80c <HAL_PCD_MspInit+0xa4>)
 800f7c4:	f7f4 fda8 	bl	8004318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f7c8:	4b0f      	ldr	r3, [pc, #60]	; (800f808 <HAL_PCD_MspInit+0xa0>)
 800f7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7cc:	4a0e      	ldr	r2, [pc, #56]	; (800f808 <HAL_PCD_MspInit+0xa0>)
 800f7ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7d2:	6353      	str	r3, [r2, #52]	; 0x34
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	60fb      	str	r3, [r7, #12]
 800f7d8:	4b0b      	ldr	r3, [pc, #44]	; (800f808 <HAL_PCD_MspInit+0xa0>)
 800f7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7dc:	4a0a      	ldr	r2, [pc, #40]	; (800f808 <HAL_PCD_MspInit+0xa0>)
 800f7de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f7e2:	6453      	str	r3, [r2, #68]	; 0x44
 800f7e4:	4b08      	ldr	r3, [pc, #32]	; (800f808 <HAL_PCD_MspInit+0xa0>)
 800f7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7ec:	60fb      	str	r3, [r7, #12]
 800f7ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	2100      	movs	r1, #0
 800f7f4:	2043      	movs	r0, #67	; 0x43
 800f7f6:	f7f4 f9e8 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f7fa:	2043      	movs	r0, #67	; 0x43
 800f7fc:	f7f4 fa01 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f800:	bf00      	nop
 800f802:	3728      	adds	r7, #40	; 0x28
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}
 800f808:	40023800 	.word	0x40023800
 800f80c:	40020000 	.word	0x40020000

0800f810 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800f824:	4619      	mov	r1, r3
 800f826:	4610      	mov	r0, r2
 800f828:	f7fb fab9 	bl	800ad9e <USBD_LL_SetupStage>
}
 800f82c:	bf00      	nop
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	460b      	mov	r3, r1
 800f83e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f846:	78fa      	ldrb	r2, [r7, #3]
 800f848:	6879      	ldr	r1, [r7, #4]
 800f84a:	4613      	mov	r3, r2
 800f84c:	00db      	lsls	r3, r3, #3
 800f84e:	4413      	add	r3, r2
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	440b      	add	r3, r1
 800f854:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	78fb      	ldrb	r3, [r7, #3]
 800f85c:	4619      	mov	r1, r3
 800f85e:	f7fb faf3 	bl	800ae48 <USBD_LL_DataOutStage>
}
 800f862:	bf00      	nop
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	460b      	mov	r3, r1
 800f874:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f87c:	78fa      	ldrb	r2, [r7, #3]
 800f87e:	6879      	ldr	r1, [r7, #4]
 800f880:	4613      	mov	r3, r2
 800f882:	00db      	lsls	r3, r3, #3
 800f884:	4413      	add	r3, r2
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	440b      	add	r3, r1
 800f88a:	3320      	adds	r3, #32
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	78fb      	ldrb	r3, [r7, #3]
 800f890:	4619      	mov	r1, r3
 800f892:	f7fb fb8c 	bl	800afae <USBD_LL_DataInStage>
}
 800f896:	bf00      	nop
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b082      	sub	sp, #8
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7fb fcc6 	bl	800b23e <USBD_LL_SOF>
}
 800f8b2:	bf00      	nop
 800f8b4:	3708      	adds	r7, #8
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}

0800f8ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b084      	sub	sp, #16
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	79db      	ldrb	r3, [r3, #7]
 800f8ca:	2b02      	cmp	r3, #2
 800f8cc:	d001      	beq.n	800f8d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f8ce:	f7f3 fbe7 	bl	80030a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f8d8:	7bfa      	ldrb	r2, [r7, #15]
 800f8da:	4611      	mov	r1, r2
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fb fc6a 	bl	800b1b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7fb fc12 	bl	800b112 <USBD_LL_Reset>
}
 800f8ee:	bf00      	nop
 800f8f0:	3710      	adds	r7, #16
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
	...

0800f8f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f906:	4618      	mov	r0, r3
 800f908:	f7fb fc65 	bl	800b1d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	6812      	ldr	r2, [r2, #0]
 800f91a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f91e:	f043 0301 	orr.w	r3, r3, #1
 800f922:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	7adb      	ldrb	r3, [r3, #11]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d005      	beq.n	800f938 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f92c:	4b04      	ldr	r3, [pc, #16]	; (800f940 <HAL_PCD_SuspendCallback+0x48>)
 800f92e:	691b      	ldr	r3, [r3, #16]
 800f930:	4a03      	ldr	r2, [pc, #12]	; (800f940 <HAL_PCD_SuspendCallback+0x48>)
 800f932:	f043 0306 	orr.w	r3, r3, #6
 800f936:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f938:	bf00      	nop
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}
 800f940:	e000ed00 	.word	0xe000ed00

0800f944 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f952:	4618      	mov	r0, r3
 800f954:	f7fb fc5b 	bl	800b20e <USBD_LL_Resume>
}
 800f958:	bf00      	nop
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	460b      	mov	r3, r1
 800f96a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f972:	78fa      	ldrb	r2, [r7, #3]
 800f974:	4611      	mov	r1, r2
 800f976:	4618      	mov	r0, r3
 800f978:	f7fb fcb3 	bl	800b2e2 <USBD_LL_IsoOUTIncomplete>
}
 800f97c:	bf00      	nop
 800f97e:	3708      	adds	r7, #8
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	460b      	mov	r3, r1
 800f98e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f996:	78fa      	ldrb	r2, [r7, #3]
 800f998:	4611      	mov	r1, r2
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fb fc6f 	bl	800b27e <USBD_LL_IsoINIncomplete>
}
 800f9a0:	bf00      	nop
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fb fcc5 	bl	800b346 <USBD_LL_DevConnected>
}
 800f9bc:	bf00      	nop
 800f9be:	3708      	adds	r7, #8
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7fb fcc2 	bl	800b35c <USBD_LL_DevDisconnected>
}
 800f9d8:	bf00      	nop
 800f9da:	3708      	adds	r7, #8
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d13c      	bne.n	800fa6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f9f0:	4a20      	ldr	r2, [pc, #128]	; (800fa74 <USBD_LL_Init+0x94>)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4a1e      	ldr	r2, [pc, #120]	; (800fa74 <USBD_LL_Init+0x94>)
 800f9fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa00:	4b1c      	ldr	r3, [pc, #112]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fa06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fa08:	4b1a      	ldr	r3, [pc, #104]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa0a:	2204      	movs	r2, #4
 800fa0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fa0e:	4b19      	ldr	r3, [pc, #100]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa10:	2202      	movs	r2, #2
 800fa12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fa14:	4b17      	ldr	r3, [pc, #92]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa16:	2200      	movs	r2, #0
 800fa18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fa1a:	4b16      	ldr	r3, [pc, #88]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa1c:	2202      	movs	r2, #2
 800fa1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fa20:	4b14      	ldr	r3, [pc, #80]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa22:	2200      	movs	r2, #0
 800fa24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fa26:	4b13      	ldr	r3, [pc, #76]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa28:	2200      	movs	r2, #0
 800fa2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fa2c:	4b11      	ldr	r3, [pc, #68]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fa32:	4b10      	ldr	r3, [pc, #64]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fa38:	4b0e      	ldr	r3, [pc, #56]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fa3e:	480d      	ldr	r0, [pc, #52]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa40:	f7f5 fe46 	bl	80056d0 <HAL_PCD_Init>
 800fa44:	4603      	mov	r3, r0
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d001      	beq.n	800fa4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fa4a:	f7f3 fb29 	bl	80030a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fa4e:	2180      	movs	r1, #128	; 0x80
 800fa50:	4808      	ldr	r0, [pc, #32]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa52:	f7f7 f870 	bl	8006b36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fa56:	2240      	movs	r2, #64	; 0x40
 800fa58:	2100      	movs	r1, #0
 800fa5a:	4806      	ldr	r0, [pc, #24]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa5c:	f7f7 f824 	bl	8006aa8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fa60:	2280      	movs	r2, #128	; 0x80
 800fa62:	2101      	movs	r1, #1
 800fa64:	4803      	ldr	r0, [pc, #12]	; (800fa74 <USBD_LL_Init+0x94>)
 800fa66:	f7f7 f81f 	bl	8006aa8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fa6a:	2300      	movs	r3, #0
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	2000458c 	.word	0x2000458c

0800fa78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa80:	2300      	movs	r3, #0
 800fa82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa84:	2300      	movs	r3, #0
 800fa86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7f5 ff2d 	bl	80058ee <HAL_PCD_Start>
 800fa94:	4603      	mov	r3, r0
 800fa96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa98:	7bfb      	ldrb	r3, [r7, #15]
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f000 f942 	bl	800fd24 <USBD_Get_USB_Status>
 800faa0:	4603      	mov	r3, r0
 800faa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3710      	adds	r7, #16
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800faae:	b580      	push	{r7, lr}
 800fab0:	b084      	sub	sp, #16
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
 800fab6:	4608      	mov	r0, r1
 800fab8:	4611      	mov	r1, r2
 800faba:	461a      	mov	r2, r3
 800fabc:	4603      	mov	r3, r0
 800fabe:	70fb      	strb	r3, [r7, #3]
 800fac0:	460b      	mov	r3, r1
 800fac2:	70bb      	strb	r3, [r7, #2]
 800fac4:	4613      	mov	r3, r2
 800fac6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac8:	2300      	movs	r3, #0
 800faca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800facc:	2300      	movs	r3, #0
 800face:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fad6:	78bb      	ldrb	r3, [r7, #2]
 800fad8:	883a      	ldrh	r2, [r7, #0]
 800fada:	78f9      	ldrb	r1, [r7, #3]
 800fadc:	f7f6 fc01 	bl	80062e2 <HAL_PCD_EP_Open>
 800fae0:	4603      	mov	r3, r0
 800fae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fae4:	7bfb      	ldrb	r3, [r7, #15]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f000 f91c 	bl	800fd24 <USBD_Get_USB_Status>
 800faec:	4603      	mov	r3, r0
 800faee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b084      	sub	sp, #16
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	460b      	mov	r3, r1
 800fb04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb06:	2300      	movs	r3, #0
 800fb08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb14:	78fa      	ldrb	r2, [r7, #3]
 800fb16:	4611      	mov	r1, r2
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7f6 fc4a 	bl	80063b2 <HAL_PCD_EP_Close>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb22:	7bfb      	ldrb	r3, [r7, #15]
 800fb24:	4618      	mov	r0, r3
 800fb26:	f000 f8fd 	bl	800fd24 <USBD_Get_USB_Status>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3710      	adds	r7, #16
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	460b      	mov	r3, r1
 800fb42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb44:	2300      	movs	r3, #0
 800fb46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb52:	78fa      	ldrb	r2, [r7, #3]
 800fb54:	4611      	mov	r1, r2
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7f6 fd02 	bl	8006560 <HAL_PCD_EP_SetStall>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb60:	7bfb      	ldrb	r3, [r7, #15]
 800fb62:	4618      	mov	r0, r3
 800fb64:	f000 f8de 	bl	800fd24 <USBD_Get_USB_Status>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b084      	sub	sp, #16
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	460b      	mov	r3, r1
 800fb80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb82:	2300      	movs	r3, #0
 800fb84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb86:	2300      	movs	r3, #0
 800fb88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb90:	78fa      	ldrb	r2, [r7, #3]
 800fb92:	4611      	mov	r1, r2
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7f6 fd46 	bl	8006626 <HAL_PCD_EP_ClrStall>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb9e:	7bfb      	ldrb	r3, [r7, #15]
 800fba0:	4618      	mov	r0, r3
 800fba2:	f000 f8bf 	bl	800fd24 <USBD_Get_USB_Status>
 800fba6:	4603      	mov	r3, r0
 800fba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3710      	adds	r7, #16
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b085      	sub	sp, #20
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fbc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	da0b      	bge.n	800fbe8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fbd0:	78fb      	ldrb	r3, [r7, #3]
 800fbd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbd6:	68f9      	ldr	r1, [r7, #12]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	00db      	lsls	r3, r3, #3
 800fbdc:	4413      	add	r3, r2
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	440b      	add	r3, r1
 800fbe2:	3316      	adds	r3, #22
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	e00b      	b.n	800fc00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fbe8:	78fb      	ldrb	r3, [r7, #3]
 800fbea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbee:	68f9      	ldr	r1, [r7, #12]
 800fbf0:	4613      	mov	r3, r2
 800fbf2:	00db      	lsls	r3, r3, #3
 800fbf4:	4413      	add	r3, r2
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	440b      	add	r3, r1
 800fbfa:	f203 2356 	addw	r3, r3, #598	; 0x256
 800fbfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3714      	adds	r7, #20
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr

0800fc0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	460b      	mov	r3, r1
 800fc16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc26:	78fa      	ldrb	r2, [r7, #3]
 800fc28:	4611      	mov	r1, r2
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7f6 fb35 	bl	800629a <HAL_PCD_SetAddress>
 800fc30:	4603      	mov	r3, r0
 800fc32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc34:	7bfb      	ldrb	r3, [r7, #15]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f000 f874 	bl	800fd24 <USBD_Get_USB_Status>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc40:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b086      	sub	sp, #24
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	60f8      	str	r0, [r7, #12]
 800fc52:	607a      	str	r2, [r7, #4]
 800fc54:	603b      	str	r3, [r7, #0]
 800fc56:	460b      	mov	r3, r1
 800fc58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc68:	7af9      	ldrb	r1, [r7, #11]
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	f7f6 fc3d 	bl	80064ec <HAL_PCD_EP_Transmit>
 800fc72:	4603      	mov	r3, r0
 800fc74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc76:	7dfb      	ldrb	r3, [r7, #23]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f000 f853 	bl	800fd24 <USBD_Get_USB_Status>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc82:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3718      	adds	r7, #24
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b086      	sub	sp, #24
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	607a      	str	r2, [r7, #4]
 800fc96:	603b      	str	r3, [r7, #0]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fca0:	2300      	movs	r3, #0
 800fca2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fcaa:	7af9      	ldrb	r1, [r7, #11]
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	f7f6 fbc9 	bl	8006446 <HAL_PCD_EP_Receive>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcb8:	7dfb      	ldrb	r3, [r7, #23]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f000 f832 	bl	800fd24 <USBD_Get_USB_Status>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fcc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3718      	adds	r7, #24
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b082      	sub	sp, #8
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
 800fcd6:	460b      	mov	r3, r1
 800fcd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fce0:	78fa      	ldrb	r2, [r7, #3]
 800fce2:	4611      	mov	r1, r2
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7f6 fbe9 	bl	80064bc <HAL_PCD_EP_GetRxCount>
 800fcea:	4603      	mov	r3, r0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fcfc:	4b03      	ldr	r3, [pc, #12]	; (800fd0c <USBD_static_malloc+0x18>)
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	370c      	adds	r7, #12
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	20004a70 	.word	0x20004a70

0800fd10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b083      	sub	sp, #12
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]

}
 800fd18:	bf00      	nop
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	2b03      	cmp	r3, #3
 800fd36:	d817      	bhi.n	800fd68 <USBD_Get_USB_Status+0x44>
 800fd38:	a201      	add	r2, pc, #4	; (adr r2, 800fd40 <USBD_Get_USB_Status+0x1c>)
 800fd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd3e:	bf00      	nop
 800fd40:	0800fd51 	.word	0x0800fd51
 800fd44:	0800fd57 	.word	0x0800fd57
 800fd48:	0800fd5d 	.word	0x0800fd5d
 800fd4c:	0800fd63 	.word	0x0800fd63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fd50:	2300      	movs	r3, #0
 800fd52:	73fb      	strb	r3, [r7, #15]
    break;
 800fd54:	e00b      	b.n	800fd6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fd56:	2303      	movs	r3, #3
 800fd58:	73fb      	strb	r3, [r7, #15]
    break;
 800fd5a:	e008      	b.n	800fd6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	73fb      	strb	r3, [r7, #15]
    break;
 800fd60:	e005      	b.n	800fd6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fd62:	2303      	movs	r3, #3
 800fd64:	73fb      	strb	r3, [r7, #15]
    break;
 800fd66:	e002      	b.n	800fd6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fd68:	2303      	movs	r3, #3
 800fd6a:	73fb      	strb	r3, [r7, #15]
    break;
 800fd6c:	bf00      	nop
  }
  return usb_status;
 800fd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3714      	adds	r7, #20
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <malloc>:
 800fd7c:	4b02      	ldr	r3, [pc, #8]	; (800fd88 <malloc+0xc>)
 800fd7e:	4601      	mov	r1, r0
 800fd80:	6818      	ldr	r0, [r3, #0]
 800fd82:	f000 b82b 	b.w	800fddc <_malloc_r>
 800fd86:	bf00      	nop
 800fd88:	2000016c 	.word	0x2000016c

0800fd8c <free>:
 800fd8c:	4b02      	ldr	r3, [pc, #8]	; (800fd98 <free+0xc>)
 800fd8e:	4601      	mov	r1, r0
 800fd90:	6818      	ldr	r0, [r3, #0]
 800fd92:	f001 bfbf 	b.w	8011d14 <_free_r>
 800fd96:	bf00      	nop
 800fd98:	2000016c 	.word	0x2000016c

0800fd9c <sbrk_aligned>:
 800fd9c:	b570      	push	{r4, r5, r6, lr}
 800fd9e:	4e0e      	ldr	r6, [pc, #56]	; (800fdd8 <sbrk_aligned+0x3c>)
 800fda0:	460c      	mov	r4, r1
 800fda2:	6831      	ldr	r1, [r6, #0]
 800fda4:	4605      	mov	r5, r0
 800fda6:	b911      	cbnz	r1, 800fdae <sbrk_aligned+0x12>
 800fda8:	f001 f8e4 	bl	8010f74 <_sbrk_r>
 800fdac:	6030      	str	r0, [r6, #0]
 800fdae:	4621      	mov	r1, r4
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	f001 f8df 	bl	8010f74 <_sbrk_r>
 800fdb6:	1c43      	adds	r3, r0, #1
 800fdb8:	d00a      	beq.n	800fdd0 <sbrk_aligned+0x34>
 800fdba:	1cc4      	adds	r4, r0, #3
 800fdbc:	f024 0403 	bic.w	r4, r4, #3
 800fdc0:	42a0      	cmp	r0, r4
 800fdc2:	d007      	beq.n	800fdd4 <sbrk_aligned+0x38>
 800fdc4:	1a21      	subs	r1, r4, r0
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f001 f8d4 	bl	8010f74 <_sbrk_r>
 800fdcc:	3001      	adds	r0, #1
 800fdce:	d101      	bne.n	800fdd4 <sbrk_aligned+0x38>
 800fdd0:	f04f 34ff 	mov.w	r4, #4294967295
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	bd70      	pop	{r4, r5, r6, pc}
 800fdd8:	20004c94 	.word	0x20004c94

0800fddc <_malloc_r>:
 800fddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fde0:	1ccd      	adds	r5, r1, #3
 800fde2:	f025 0503 	bic.w	r5, r5, #3
 800fde6:	3508      	adds	r5, #8
 800fde8:	2d0c      	cmp	r5, #12
 800fdea:	bf38      	it	cc
 800fdec:	250c      	movcc	r5, #12
 800fdee:	2d00      	cmp	r5, #0
 800fdf0:	4607      	mov	r7, r0
 800fdf2:	db01      	blt.n	800fdf8 <_malloc_r+0x1c>
 800fdf4:	42a9      	cmp	r1, r5
 800fdf6:	d905      	bls.n	800fe04 <_malloc_r+0x28>
 800fdf8:	230c      	movs	r3, #12
 800fdfa:	603b      	str	r3, [r7, #0]
 800fdfc:	2600      	movs	r6, #0
 800fdfe:	4630      	mov	r0, r6
 800fe00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fed8 <_malloc_r+0xfc>
 800fe08:	f000 f868 	bl	800fedc <__malloc_lock>
 800fe0c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe10:	461c      	mov	r4, r3
 800fe12:	bb5c      	cbnz	r4, 800fe6c <_malloc_r+0x90>
 800fe14:	4629      	mov	r1, r5
 800fe16:	4638      	mov	r0, r7
 800fe18:	f7ff ffc0 	bl	800fd9c <sbrk_aligned>
 800fe1c:	1c43      	adds	r3, r0, #1
 800fe1e:	4604      	mov	r4, r0
 800fe20:	d155      	bne.n	800fece <_malloc_r+0xf2>
 800fe22:	f8d8 4000 	ldr.w	r4, [r8]
 800fe26:	4626      	mov	r6, r4
 800fe28:	2e00      	cmp	r6, #0
 800fe2a:	d145      	bne.n	800feb8 <_malloc_r+0xdc>
 800fe2c:	2c00      	cmp	r4, #0
 800fe2e:	d048      	beq.n	800fec2 <_malloc_r+0xe6>
 800fe30:	6823      	ldr	r3, [r4, #0]
 800fe32:	4631      	mov	r1, r6
 800fe34:	4638      	mov	r0, r7
 800fe36:	eb04 0903 	add.w	r9, r4, r3
 800fe3a:	f001 f89b 	bl	8010f74 <_sbrk_r>
 800fe3e:	4581      	cmp	r9, r0
 800fe40:	d13f      	bne.n	800fec2 <_malloc_r+0xe6>
 800fe42:	6821      	ldr	r1, [r4, #0]
 800fe44:	1a6d      	subs	r5, r5, r1
 800fe46:	4629      	mov	r1, r5
 800fe48:	4638      	mov	r0, r7
 800fe4a:	f7ff ffa7 	bl	800fd9c <sbrk_aligned>
 800fe4e:	3001      	adds	r0, #1
 800fe50:	d037      	beq.n	800fec2 <_malloc_r+0xe6>
 800fe52:	6823      	ldr	r3, [r4, #0]
 800fe54:	442b      	add	r3, r5
 800fe56:	6023      	str	r3, [r4, #0]
 800fe58:	f8d8 3000 	ldr.w	r3, [r8]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d038      	beq.n	800fed2 <_malloc_r+0xf6>
 800fe60:	685a      	ldr	r2, [r3, #4]
 800fe62:	42a2      	cmp	r2, r4
 800fe64:	d12b      	bne.n	800febe <_malloc_r+0xe2>
 800fe66:	2200      	movs	r2, #0
 800fe68:	605a      	str	r2, [r3, #4]
 800fe6a:	e00f      	b.n	800fe8c <_malloc_r+0xb0>
 800fe6c:	6822      	ldr	r2, [r4, #0]
 800fe6e:	1b52      	subs	r2, r2, r5
 800fe70:	d41f      	bmi.n	800feb2 <_malloc_r+0xd6>
 800fe72:	2a0b      	cmp	r2, #11
 800fe74:	d917      	bls.n	800fea6 <_malloc_r+0xca>
 800fe76:	1961      	adds	r1, r4, r5
 800fe78:	42a3      	cmp	r3, r4
 800fe7a:	6025      	str	r5, [r4, #0]
 800fe7c:	bf18      	it	ne
 800fe7e:	6059      	strne	r1, [r3, #4]
 800fe80:	6863      	ldr	r3, [r4, #4]
 800fe82:	bf08      	it	eq
 800fe84:	f8c8 1000 	streq.w	r1, [r8]
 800fe88:	5162      	str	r2, [r4, r5]
 800fe8a:	604b      	str	r3, [r1, #4]
 800fe8c:	4638      	mov	r0, r7
 800fe8e:	f104 060b 	add.w	r6, r4, #11
 800fe92:	f000 f829 	bl	800fee8 <__malloc_unlock>
 800fe96:	f026 0607 	bic.w	r6, r6, #7
 800fe9a:	1d23      	adds	r3, r4, #4
 800fe9c:	1af2      	subs	r2, r6, r3
 800fe9e:	d0ae      	beq.n	800fdfe <_malloc_r+0x22>
 800fea0:	1b9b      	subs	r3, r3, r6
 800fea2:	50a3      	str	r3, [r4, r2]
 800fea4:	e7ab      	b.n	800fdfe <_malloc_r+0x22>
 800fea6:	42a3      	cmp	r3, r4
 800fea8:	6862      	ldr	r2, [r4, #4]
 800feaa:	d1dd      	bne.n	800fe68 <_malloc_r+0x8c>
 800feac:	f8c8 2000 	str.w	r2, [r8]
 800feb0:	e7ec      	b.n	800fe8c <_malloc_r+0xb0>
 800feb2:	4623      	mov	r3, r4
 800feb4:	6864      	ldr	r4, [r4, #4]
 800feb6:	e7ac      	b.n	800fe12 <_malloc_r+0x36>
 800feb8:	4634      	mov	r4, r6
 800feba:	6876      	ldr	r6, [r6, #4]
 800febc:	e7b4      	b.n	800fe28 <_malloc_r+0x4c>
 800febe:	4613      	mov	r3, r2
 800fec0:	e7cc      	b.n	800fe5c <_malloc_r+0x80>
 800fec2:	230c      	movs	r3, #12
 800fec4:	603b      	str	r3, [r7, #0]
 800fec6:	4638      	mov	r0, r7
 800fec8:	f000 f80e 	bl	800fee8 <__malloc_unlock>
 800fecc:	e797      	b.n	800fdfe <_malloc_r+0x22>
 800fece:	6025      	str	r5, [r4, #0]
 800fed0:	e7dc      	b.n	800fe8c <_malloc_r+0xb0>
 800fed2:	605b      	str	r3, [r3, #4]
 800fed4:	deff      	udf	#255	; 0xff
 800fed6:	bf00      	nop
 800fed8:	20004c90 	.word	0x20004c90

0800fedc <__malloc_lock>:
 800fedc:	4801      	ldr	r0, [pc, #4]	; (800fee4 <__malloc_lock+0x8>)
 800fede:	f001 b896 	b.w	801100e <__retarget_lock_acquire_recursive>
 800fee2:	bf00      	nop
 800fee4:	20004dd8 	.word	0x20004dd8

0800fee8 <__malloc_unlock>:
 800fee8:	4801      	ldr	r0, [pc, #4]	; (800fef0 <__malloc_unlock+0x8>)
 800feea:	f001 b891 	b.w	8011010 <__retarget_lock_release_recursive>
 800feee:	bf00      	nop
 800fef0:	20004dd8 	.word	0x20004dd8

0800fef4 <__cvt>:
 800fef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fef8:	ec55 4b10 	vmov	r4, r5, d0
 800fefc:	2d00      	cmp	r5, #0
 800fefe:	460e      	mov	r6, r1
 800ff00:	4619      	mov	r1, r3
 800ff02:	462b      	mov	r3, r5
 800ff04:	bfbb      	ittet	lt
 800ff06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ff0a:	461d      	movlt	r5, r3
 800ff0c:	2300      	movge	r3, #0
 800ff0e:	232d      	movlt	r3, #45	; 0x2d
 800ff10:	700b      	strb	r3, [r1, #0]
 800ff12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ff18:	4691      	mov	r9, r2
 800ff1a:	f023 0820 	bic.w	r8, r3, #32
 800ff1e:	bfbc      	itt	lt
 800ff20:	4622      	movlt	r2, r4
 800ff22:	4614      	movlt	r4, r2
 800ff24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff28:	d005      	beq.n	800ff36 <__cvt+0x42>
 800ff2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ff2e:	d100      	bne.n	800ff32 <__cvt+0x3e>
 800ff30:	3601      	adds	r6, #1
 800ff32:	2102      	movs	r1, #2
 800ff34:	e000      	b.n	800ff38 <__cvt+0x44>
 800ff36:	2103      	movs	r1, #3
 800ff38:	ab03      	add	r3, sp, #12
 800ff3a:	9301      	str	r3, [sp, #4]
 800ff3c:	ab02      	add	r3, sp, #8
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	ec45 4b10 	vmov	d0, r4, r5
 800ff44:	4653      	mov	r3, sl
 800ff46:	4632      	mov	r2, r6
 800ff48:	f001 f8f2 	bl	8011130 <_dtoa_r>
 800ff4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ff50:	4607      	mov	r7, r0
 800ff52:	d102      	bne.n	800ff5a <__cvt+0x66>
 800ff54:	f019 0f01 	tst.w	r9, #1
 800ff58:	d022      	beq.n	800ffa0 <__cvt+0xac>
 800ff5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff5e:	eb07 0906 	add.w	r9, r7, r6
 800ff62:	d110      	bne.n	800ff86 <__cvt+0x92>
 800ff64:	783b      	ldrb	r3, [r7, #0]
 800ff66:	2b30      	cmp	r3, #48	; 0x30
 800ff68:	d10a      	bne.n	800ff80 <__cvt+0x8c>
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	4620      	mov	r0, r4
 800ff70:	4629      	mov	r1, r5
 800ff72:	f7f0 fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff76:	b918      	cbnz	r0, 800ff80 <__cvt+0x8c>
 800ff78:	f1c6 0601 	rsb	r6, r6, #1
 800ff7c:	f8ca 6000 	str.w	r6, [sl]
 800ff80:	f8da 3000 	ldr.w	r3, [sl]
 800ff84:	4499      	add	r9, r3
 800ff86:	2200      	movs	r2, #0
 800ff88:	2300      	movs	r3, #0
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	4629      	mov	r1, r5
 800ff8e:	f7f0 fda3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff92:	b108      	cbz	r0, 800ff98 <__cvt+0xa4>
 800ff94:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff98:	2230      	movs	r2, #48	; 0x30
 800ff9a:	9b03      	ldr	r3, [sp, #12]
 800ff9c:	454b      	cmp	r3, r9
 800ff9e:	d307      	bcc.n	800ffb0 <__cvt+0xbc>
 800ffa0:	9b03      	ldr	r3, [sp, #12]
 800ffa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffa4:	1bdb      	subs	r3, r3, r7
 800ffa6:	4638      	mov	r0, r7
 800ffa8:	6013      	str	r3, [r2, #0]
 800ffaa:	b004      	add	sp, #16
 800ffac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffb0:	1c59      	adds	r1, r3, #1
 800ffb2:	9103      	str	r1, [sp, #12]
 800ffb4:	701a      	strb	r2, [r3, #0]
 800ffb6:	e7f0      	b.n	800ff9a <__cvt+0xa6>

0800ffb8 <__exponent>:
 800ffb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2900      	cmp	r1, #0
 800ffbe:	bfb8      	it	lt
 800ffc0:	4249      	neglt	r1, r1
 800ffc2:	f803 2b02 	strb.w	r2, [r3], #2
 800ffc6:	bfb4      	ite	lt
 800ffc8:	222d      	movlt	r2, #45	; 0x2d
 800ffca:	222b      	movge	r2, #43	; 0x2b
 800ffcc:	2909      	cmp	r1, #9
 800ffce:	7042      	strb	r2, [r0, #1]
 800ffd0:	dd2a      	ble.n	8010028 <__exponent+0x70>
 800ffd2:	f10d 0207 	add.w	r2, sp, #7
 800ffd6:	4617      	mov	r7, r2
 800ffd8:	260a      	movs	r6, #10
 800ffda:	4694      	mov	ip, r2
 800ffdc:	fb91 f5f6 	sdiv	r5, r1, r6
 800ffe0:	fb06 1415 	mls	r4, r6, r5, r1
 800ffe4:	3430      	adds	r4, #48	; 0x30
 800ffe6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ffea:	460c      	mov	r4, r1
 800ffec:	2c63      	cmp	r4, #99	; 0x63
 800ffee:	f102 32ff 	add.w	r2, r2, #4294967295
 800fff2:	4629      	mov	r1, r5
 800fff4:	dcf1      	bgt.n	800ffda <__exponent+0x22>
 800fff6:	3130      	adds	r1, #48	; 0x30
 800fff8:	f1ac 0402 	sub.w	r4, ip, #2
 800fffc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010000:	1c41      	adds	r1, r0, #1
 8010002:	4622      	mov	r2, r4
 8010004:	42ba      	cmp	r2, r7
 8010006:	d30a      	bcc.n	801001e <__exponent+0x66>
 8010008:	f10d 0209 	add.w	r2, sp, #9
 801000c:	eba2 020c 	sub.w	r2, r2, ip
 8010010:	42bc      	cmp	r4, r7
 8010012:	bf88      	it	hi
 8010014:	2200      	movhi	r2, #0
 8010016:	4413      	add	r3, r2
 8010018:	1a18      	subs	r0, r3, r0
 801001a:	b003      	add	sp, #12
 801001c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801001e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010022:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010026:	e7ed      	b.n	8010004 <__exponent+0x4c>
 8010028:	2330      	movs	r3, #48	; 0x30
 801002a:	3130      	adds	r1, #48	; 0x30
 801002c:	7083      	strb	r3, [r0, #2]
 801002e:	70c1      	strb	r1, [r0, #3]
 8010030:	1d03      	adds	r3, r0, #4
 8010032:	e7f1      	b.n	8010018 <__exponent+0x60>

08010034 <_printf_float>:
 8010034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010038:	ed2d 8b02 	vpush	{d8}
 801003c:	b08d      	sub	sp, #52	; 0x34
 801003e:	460c      	mov	r4, r1
 8010040:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010044:	4616      	mov	r6, r2
 8010046:	461f      	mov	r7, r3
 8010048:	4605      	mov	r5, r0
 801004a:	f000 ff5b 	bl	8010f04 <_localeconv_r>
 801004e:	f8d0 a000 	ldr.w	sl, [r0]
 8010052:	4650      	mov	r0, sl
 8010054:	f7f0 f914 	bl	8000280 <strlen>
 8010058:	2300      	movs	r3, #0
 801005a:	930a      	str	r3, [sp, #40]	; 0x28
 801005c:	6823      	ldr	r3, [r4, #0]
 801005e:	9305      	str	r3, [sp, #20]
 8010060:	f8d8 3000 	ldr.w	r3, [r8]
 8010064:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010068:	3307      	adds	r3, #7
 801006a:	f023 0307 	bic.w	r3, r3, #7
 801006e:	f103 0208 	add.w	r2, r3, #8
 8010072:	f8c8 2000 	str.w	r2, [r8]
 8010076:	e9d3 8900 	ldrd	r8, r9, [r3]
 801007a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801007e:	9307      	str	r3, [sp, #28]
 8010080:	f8cd 8018 	str.w	r8, [sp, #24]
 8010084:	ee08 0a10 	vmov	s16, r0
 8010088:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801008c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010090:	4b9e      	ldr	r3, [pc, #632]	; (801030c <_printf_float+0x2d8>)
 8010092:	f04f 32ff 	mov.w	r2, #4294967295
 8010096:	f7f0 fd51 	bl	8000b3c <__aeabi_dcmpun>
 801009a:	bb88      	cbnz	r0, 8010100 <_printf_float+0xcc>
 801009c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100a0:	4b9a      	ldr	r3, [pc, #616]	; (801030c <_printf_float+0x2d8>)
 80100a2:	f04f 32ff 	mov.w	r2, #4294967295
 80100a6:	f7f0 fd2b 	bl	8000b00 <__aeabi_dcmple>
 80100aa:	bb48      	cbnz	r0, 8010100 <_printf_float+0xcc>
 80100ac:	2200      	movs	r2, #0
 80100ae:	2300      	movs	r3, #0
 80100b0:	4640      	mov	r0, r8
 80100b2:	4649      	mov	r1, r9
 80100b4:	f7f0 fd1a 	bl	8000aec <__aeabi_dcmplt>
 80100b8:	b110      	cbz	r0, 80100c0 <_printf_float+0x8c>
 80100ba:	232d      	movs	r3, #45	; 0x2d
 80100bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100c0:	4a93      	ldr	r2, [pc, #588]	; (8010310 <_printf_float+0x2dc>)
 80100c2:	4b94      	ldr	r3, [pc, #592]	; (8010314 <_printf_float+0x2e0>)
 80100c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80100c8:	bf94      	ite	ls
 80100ca:	4690      	movls	r8, r2
 80100cc:	4698      	movhi	r8, r3
 80100ce:	2303      	movs	r3, #3
 80100d0:	6123      	str	r3, [r4, #16]
 80100d2:	9b05      	ldr	r3, [sp, #20]
 80100d4:	f023 0304 	bic.w	r3, r3, #4
 80100d8:	6023      	str	r3, [r4, #0]
 80100da:	f04f 0900 	mov.w	r9, #0
 80100de:	9700      	str	r7, [sp, #0]
 80100e0:	4633      	mov	r3, r6
 80100e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80100e4:	4621      	mov	r1, r4
 80100e6:	4628      	mov	r0, r5
 80100e8:	f000 f9da 	bl	80104a0 <_printf_common>
 80100ec:	3001      	adds	r0, #1
 80100ee:	f040 8090 	bne.w	8010212 <_printf_float+0x1de>
 80100f2:	f04f 30ff 	mov.w	r0, #4294967295
 80100f6:	b00d      	add	sp, #52	; 0x34
 80100f8:	ecbd 8b02 	vpop	{d8}
 80100fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010100:	4642      	mov	r2, r8
 8010102:	464b      	mov	r3, r9
 8010104:	4640      	mov	r0, r8
 8010106:	4649      	mov	r1, r9
 8010108:	f7f0 fd18 	bl	8000b3c <__aeabi_dcmpun>
 801010c:	b140      	cbz	r0, 8010120 <_printf_float+0xec>
 801010e:	464b      	mov	r3, r9
 8010110:	2b00      	cmp	r3, #0
 8010112:	bfbc      	itt	lt
 8010114:	232d      	movlt	r3, #45	; 0x2d
 8010116:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801011a:	4a7f      	ldr	r2, [pc, #508]	; (8010318 <_printf_float+0x2e4>)
 801011c:	4b7f      	ldr	r3, [pc, #508]	; (801031c <_printf_float+0x2e8>)
 801011e:	e7d1      	b.n	80100c4 <_printf_float+0x90>
 8010120:	6863      	ldr	r3, [r4, #4]
 8010122:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010126:	9206      	str	r2, [sp, #24]
 8010128:	1c5a      	adds	r2, r3, #1
 801012a:	d13f      	bne.n	80101ac <_printf_float+0x178>
 801012c:	2306      	movs	r3, #6
 801012e:	6063      	str	r3, [r4, #4]
 8010130:	9b05      	ldr	r3, [sp, #20]
 8010132:	6861      	ldr	r1, [r4, #4]
 8010134:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010138:	2300      	movs	r3, #0
 801013a:	9303      	str	r3, [sp, #12]
 801013c:	ab0a      	add	r3, sp, #40	; 0x28
 801013e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010142:	ab09      	add	r3, sp, #36	; 0x24
 8010144:	ec49 8b10 	vmov	d0, r8, r9
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	6022      	str	r2, [r4, #0]
 801014c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010150:	4628      	mov	r0, r5
 8010152:	f7ff fecf 	bl	800fef4 <__cvt>
 8010156:	9b06      	ldr	r3, [sp, #24]
 8010158:	9909      	ldr	r1, [sp, #36]	; 0x24
 801015a:	2b47      	cmp	r3, #71	; 0x47
 801015c:	4680      	mov	r8, r0
 801015e:	d108      	bne.n	8010172 <_printf_float+0x13e>
 8010160:	1cc8      	adds	r0, r1, #3
 8010162:	db02      	blt.n	801016a <_printf_float+0x136>
 8010164:	6863      	ldr	r3, [r4, #4]
 8010166:	4299      	cmp	r1, r3
 8010168:	dd41      	ble.n	80101ee <_printf_float+0x1ba>
 801016a:	f1ab 0302 	sub.w	r3, fp, #2
 801016e:	fa5f fb83 	uxtb.w	fp, r3
 8010172:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010176:	d820      	bhi.n	80101ba <_printf_float+0x186>
 8010178:	3901      	subs	r1, #1
 801017a:	465a      	mov	r2, fp
 801017c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010180:	9109      	str	r1, [sp, #36]	; 0x24
 8010182:	f7ff ff19 	bl	800ffb8 <__exponent>
 8010186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010188:	1813      	adds	r3, r2, r0
 801018a:	2a01      	cmp	r2, #1
 801018c:	4681      	mov	r9, r0
 801018e:	6123      	str	r3, [r4, #16]
 8010190:	dc02      	bgt.n	8010198 <_printf_float+0x164>
 8010192:	6822      	ldr	r2, [r4, #0]
 8010194:	07d2      	lsls	r2, r2, #31
 8010196:	d501      	bpl.n	801019c <_printf_float+0x168>
 8010198:	3301      	adds	r3, #1
 801019a:	6123      	str	r3, [r4, #16]
 801019c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d09c      	beq.n	80100de <_printf_float+0xaa>
 80101a4:	232d      	movs	r3, #45	; 0x2d
 80101a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101aa:	e798      	b.n	80100de <_printf_float+0xaa>
 80101ac:	9a06      	ldr	r2, [sp, #24]
 80101ae:	2a47      	cmp	r2, #71	; 0x47
 80101b0:	d1be      	bne.n	8010130 <_printf_float+0xfc>
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1bc      	bne.n	8010130 <_printf_float+0xfc>
 80101b6:	2301      	movs	r3, #1
 80101b8:	e7b9      	b.n	801012e <_printf_float+0xfa>
 80101ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80101be:	d118      	bne.n	80101f2 <_printf_float+0x1be>
 80101c0:	2900      	cmp	r1, #0
 80101c2:	6863      	ldr	r3, [r4, #4]
 80101c4:	dd0b      	ble.n	80101de <_printf_float+0x1aa>
 80101c6:	6121      	str	r1, [r4, #16]
 80101c8:	b913      	cbnz	r3, 80101d0 <_printf_float+0x19c>
 80101ca:	6822      	ldr	r2, [r4, #0]
 80101cc:	07d0      	lsls	r0, r2, #31
 80101ce:	d502      	bpl.n	80101d6 <_printf_float+0x1a2>
 80101d0:	3301      	adds	r3, #1
 80101d2:	440b      	add	r3, r1
 80101d4:	6123      	str	r3, [r4, #16]
 80101d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80101d8:	f04f 0900 	mov.w	r9, #0
 80101dc:	e7de      	b.n	801019c <_printf_float+0x168>
 80101de:	b913      	cbnz	r3, 80101e6 <_printf_float+0x1b2>
 80101e0:	6822      	ldr	r2, [r4, #0]
 80101e2:	07d2      	lsls	r2, r2, #31
 80101e4:	d501      	bpl.n	80101ea <_printf_float+0x1b6>
 80101e6:	3302      	adds	r3, #2
 80101e8:	e7f4      	b.n	80101d4 <_printf_float+0x1a0>
 80101ea:	2301      	movs	r3, #1
 80101ec:	e7f2      	b.n	80101d4 <_printf_float+0x1a0>
 80101ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80101f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101f4:	4299      	cmp	r1, r3
 80101f6:	db05      	blt.n	8010204 <_printf_float+0x1d0>
 80101f8:	6823      	ldr	r3, [r4, #0]
 80101fa:	6121      	str	r1, [r4, #16]
 80101fc:	07d8      	lsls	r0, r3, #31
 80101fe:	d5ea      	bpl.n	80101d6 <_printf_float+0x1a2>
 8010200:	1c4b      	adds	r3, r1, #1
 8010202:	e7e7      	b.n	80101d4 <_printf_float+0x1a0>
 8010204:	2900      	cmp	r1, #0
 8010206:	bfd4      	ite	le
 8010208:	f1c1 0202 	rsble	r2, r1, #2
 801020c:	2201      	movgt	r2, #1
 801020e:	4413      	add	r3, r2
 8010210:	e7e0      	b.n	80101d4 <_printf_float+0x1a0>
 8010212:	6823      	ldr	r3, [r4, #0]
 8010214:	055a      	lsls	r2, r3, #21
 8010216:	d407      	bmi.n	8010228 <_printf_float+0x1f4>
 8010218:	6923      	ldr	r3, [r4, #16]
 801021a:	4642      	mov	r2, r8
 801021c:	4631      	mov	r1, r6
 801021e:	4628      	mov	r0, r5
 8010220:	47b8      	blx	r7
 8010222:	3001      	adds	r0, #1
 8010224:	d12c      	bne.n	8010280 <_printf_float+0x24c>
 8010226:	e764      	b.n	80100f2 <_printf_float+0xbe>
 8010228:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801022c:	f240 80e0 	bls.w	80103f0 <_printf_float+0x3bc>
 8010230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010234:	2200      	movs	r2, #0
 8010236:	2300      	movs	r3, #0
 8010238:	f7f0 fc4e 	bl	8000ad8 <__aeabi_dcmpeq>
 801023c:	2800      	cmp	r0, #0
 801023e:	d034      	beq.n	80102aa <_printf_float+0x276>
 8010240:	4a37      	ldr	r2, [pc, #220]	; (8010320 <_printf_float+0x2ec>)
 8010242:	2301      	movs	r3, #1
 8010244:	4631      	mov	r1, r6
 8010246:	4628      	mov	r0, r5
 8010248:	47b8      	blx	r7
 801024a:	3001      	adds	r0, #1
 801024c:	f43f af51 	beq.w	80100f2 <_printf_float+0xbe>
 8010250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010254:	429a      	cmp	r2, r3
 8010256:	db02      	blt.n	801025e <_printf_float+0x22a>
 8010258:	6823      	ldr	r3, [r4, #0]
 801025a:	07d8      	lsls	r0, r3, #31
 801025c:	d510      	bpl.n	8010280 <_printf_float+0x24c>
 801025e:	ee18 3a10 	vmov	r3, s16
 8010262:	4652      	mov	r2, sl
 8010264:	4631      	mov	r1, r6
 8010266:	4628      	mov	r0, r5
 8010268:	47b8      	blx	r7
 801026a:	3001      	adds	r0, #1
 801026c:	f43f af41 	beq.w	80100f2 <_printf_float+0xbe>
 8010270:	f04f 0800 	mov.w	r8, #0
 8010274:	f104 091a 	add.w	r9, r4, #26
 8010278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801027a:	3b01      	subs	r3, #1
 801027c:	4543      	cmp	r3, r8
 801027e:	dc09      	bgt.n	8010294 <_printf_float+0x260>
 8010280:	6823      	ldr	r3, [r4, #0]
 8010282:	079b      	lsls	r3, r3, #30
 8010284:	f100 8107 	bmi.w	8010496 <_printf_float+0x462>
 8010288:	68e0      	ldr	r0, [r4, #12]
 801028a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801028c:	4298      	cmp	r0, r3
 801028e:	bfb8      	it	lt
 8010290:	4618      	movlt	r0, r3
 8010292:	e730      	b.n	80100f6 <_printf_float+0xc2>
 8010294:	2301      	movs	r3, #1
 8010296:	464a      	mov	r2, r9
 8010298:	4631      	mov	r1, r6
 801029a:	4628      	mov	r0, r5
 801029c:	47b8      	blx	r7
 801029e:	3001      	adds	r0, #1
 80102a0:	f43f af27 	beq.w	80100f2 <_printf_float+0xbe>
 80102a4:	f108 0801 	add.w	r8, r8, #1
 80102a8:	e7e6      	b.n	8010278 <_printf_float+0x244>
 80102aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	dc39      	bgt.n	8010324 <_printf_float+0x2f0>
 80102b0:	4a1b      	ldr	r2, [pc, #108]	; (8010320 <_printf_float+0x2ec>)
 80102b2:	2301      	movs	r3, #1
 80102b4:	4631      	mov	r1, r6
 80102b6:	4628      	mov	r0, r5
 80102b8:	47b8      	blx	r7
 80102ba:	3001      	adds	r0, #1
 80102bc:	f43f af19 	beq.w	80100f2 <_printf_float+0xbe>
 80102c0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80102c4:	4313      	orrs	r3, r2
 80102c6:	d102      	bne.n	80102ce <_printf_float+0x29a>
 80102c8:	6823      	ldr	r3, [r4, #0]
 80102ca:	07d9      	lsls	r1, r3, #31
 80102cc:	d5d8      	bpl.n	8010280 <_printf_float+0x24c>
 80102ce:	ee18 3a10 	vmov	r3, s16
 80102d2:	4652      	mov	r2, sl
 80102d4:	4631      	mov	r1, r6
 80102d6:	4628      	mov	r0, r5
 80102d8:	47b8      	blx	r7
 80102da:	3001      	adds	r0, #1
 80102dc:	f43f af09 	beq.w	80100f2 <_printf_float+0xbe>
 80102e0:	f04f 0900 	mov.w	r9, #0
 80102e4:	f104 0a1a 	add.w	sl, r4, #26
 80102e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ea:	425b      	negs	r3, r3
 80102ec:	454b      	cmp	r3, r9
 80102ee:	dc01      	bgt.n	80102f4 <_printf_float+0x2c0>
 80102f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102f2:	e792      	b.n	801021a <_printf_float+0x1e6>
 80102f4:	2301      	movs	r3, #1
 80102f6:	4652      	mov	r2, sl
 80102f8:	4631      	mov	r1, r6
 80102fa:	4628      	mov	r0, r5
 80102fc:	47b8      	blx	r7
 80102fe:	3001      	adds	r0, #1
 8010300:	f43f aef7 	beq.w	80100f2 <_printf_float+0xbe>
 8010304:	f109 0901 	add.w	r9, r9, #1
 8010308:	e7ee      	b.n	80102e8 <_printf_float+0x2b4>
 801030a:	bf00      	nop
 801030c:	7fefffff 	.word	0x7fefffff
 8010310:	08016388 	.word	0x08016388
 8010314:	0801638c 	.word	0x0801638c
 8010318:	08016390 	.word	0x08016390
 801031c:	08016394 	.word	0x08016394
 8010320:	08016720 	.word	0x08016720
 8010324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010328:	429a      	cmp	r2, r3
 801032a:	bfa8      	it	ge
 801032c:	461a      	movge	r2, r3
 801032e:	2a00      	cmp	r2, #0
 8010330:	4691      	mov	r9, r2
 8010332:	dc37      	bgt.n	80103a4 <_printf_float+0x370>
 8010334:	f04f 0b00 	mov.w	fp, #0
 8010338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801033c:	f104 021a 	add.w	r2, r4, #26
 8010340:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010342:	9305      	str	r3, [sp, #20]
 8010344:	eba3 0309 	sub.w	r3, r3, r9
 8010348:	455b      	cmp	r3, fp
 801034a:	dc33      	bgt.n	80103b4 <_printf_float+0x380>
 801034c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010350:	429a      	cmp	r2, r3
 8010352:	db3b      	blt.n	80103cc <_printf_float+0x398>
 8010354:	6823      	ldr	r3, [r4, #0]
 8010356:	07da      	lsls	r2, r3, #31
 8010358:	d438      	bmi.n	80103cc <_printf_float+0x398>
 801035a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801035e:	eba2 0903 	sub.w	r9, r2, r3
 8010362:	9b05      	ldr	r3, [sp, #20]
 8010364:	1ad2      	subs	r2, r2, r3
 8010366:	4591      	cmp	r9, r2
 8010368:	bfa8      	it	ge
 801036a:	4691      	movge	r9, r2
 801036c:	f1b9 0f00 	cmp.w	r9, #0
 8010370:	dc35      	bgt.n	80103de <_printf_float+0x3aa>
 8010372:	f04f 0800 	mov.w	r8, #0
 8010376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801037a:	f104 0a1a 	add.w	sl, r4, #26
 801037e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010382:	1a9b      	subs	r3, r3, r2
 8010384:	eba3 0309 	sub.w	r3, r3, r9
 8010388:	4543      	cmp	r3, r8
 801038a:	f77f af79 	ble.w	8010280 <_printf_float+0x24c>
 801038e:	2301      	movs	r3, #1
 8010390:	4652      	mov	r2, sl
 8010392:	4631      	mov	r1, r6
 8010394:	4628      	mov	r0, r5
 8010396:	47b8      	blx	r7
 8010398:	3001      	adds	r0, #1
 801039a:	f43f aeaa 	beq.w	80100f2 <_printf_float+0xbe>
 801039e:	f108 0801 	add.w	r8, r8, #1
 80103a2:	e7ec      	b.n	801037e <_printf_float+0x34a>
 80103a4:	4613      	mov	r3, r2
 80103a6:	4631      	mov	r1, r6
 80103a8:	4642      	mov	r2, r8
 80103aa:	4628      	mov	r0, r5
 80103ac:	47b8      	blx	r7
 80103ae:	3001      	adds	r0, #1
 80103b0:	d1c0      	bne.n	8010334 <_printf_float+0x300>
 80103b2:	e69e      	b.n	80100f2 <_printf_float+0xbe>
 80103b4:	2301      	movs	r3, #1
 80103b6:	4631      	mov	r1, r6
 80103b8:	4628      	mov	r0, r5
 80103ba:	9205      	str	r2, [sp, #20]
 80103bc:	47b8      	blx	r7
 80103be:	3001      	adds	r0, #1
 80103c0:	f43f ae97 	beq.w	80100f2 <_printf_float+0xbe>
 80103c4:	9a05      	ldr	r2, [sp, #20]
 80103c6:	f10b 0b01 	add.w	fp, fp, #1
 80103ca:	e7b9      	b.n	8010340 <_printf_float+0x30c>
 80103cc:	ee18 3a10 	vmov	r3, s16
 80103d0:	4652      	mov	r2, sl
 80103d2:	4631      	mov	r1, r6
 80103d4:	4628      	mov	r0, r5
 80103d6:	47b8      	blx	r7
 80103d8:	3001      	adds	r0, #1
 80103da:	d1be      	bne.n	801035a <_printf_float+0x326>
 80103dc:	e689      	b.n	80100f2 <_printf_float+0xbe>
 80103de:	9a05      	ldr	r2, [sp, #20]
 80103e0:	464b      	mov	r3, r9
 80103e2:	4442      	add	r2, r8
 80103e4:	4631      	mov	r1, r6
 80103e6:	4628      	mov	r0, r5
 80103e8:	47b8      	blx	r7
 80103ea:	3001      	adds	r0, #1
 80103ec:	d1c1      	bne.n	8010372 <_printf_float+0x33e>
 80103ee:	e680      	b.n	80100f2 <_printf_float+0xbe>
 80103f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103f2:	2a01      	cmp	r2, #1
 80103f4:	dc01      	bgt.n	80103fa <_printf_float+0x3c6>
 80103f6:	07db      	lsls	r3, r3, #31
 80103f8:	d53a      	bpl.n	8010470 <_printf_float+0x43c>
 80103fa:	2301      	movs	r3, #1
 80103fc:	4642      	mov	r2, r8
 80103fe:	4631      	mov	r1, r6
 8010400:	4628      	mov	r0, r5
 8010402:	47b8      	blx	r7
 8010404:	3001      	adds	r0, #1
 8010406:	f43f ae74 	beq.w	80100f2 <_printf_float+0xbe>
 801040a:	ee18 3a10 	vmov	r3, s16
 801040e:	4652      	mov	r2, sl
 8010410:	4631      	mov	r1, r6
 8010412:	4628      	mov	r0, r5
 8010414:	47b8      	blx	r7
 8010416:	3001      	adds	r0, #1
 8010418:	f43f ae6b 	beq.w	80100f2 <_printf_float+0xbe>
 801041c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010420:	2200      	movs	r2, #0
 8010422:	2300      	movs	r3, #0
 8010424:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010428:	f7f0 fb56 	bl	8000ad8 <__aeabi_dcmpeq>
 801042c:	b9d8      	cbnz	r0, 8010466 <_printf_float+0x432>
 801042e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010432:	f108 0201 	add.w	r2, r8, #1
 8010436:	4631      	mov	r1, r6
 8010438:	4628      	mov	r0, r5
 801043a:	47b8      	blx	r7
 801043c:	3001      	adds	r0, #1
 801043e:	d10e      	bne.n	801045e <_printf_float+0x42a>
 8010440:	e657      	b.n	80100f2 <_printf_float+0xbe>
 8010442:	2301      	movs	r3, #1
 8010444:	4652      	mov	r2, sl
 8010446:	4631      	mov	r1, r6
 8010448:	4628      	mov	r0, r5
 801044a:	47b8      	blx	r7
 801044c:	3001      	adds	r0, #1
 801044e:	f43f ae50 	beq.w	80100f2 <_printf_float+0xbe>
 8010452:	f108 0801 	add.w	r8, r8, #1
 8010456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010458:	3b01      	subs	r3, #1
 801045a:	4543      	cmp	r3, r8
 801045c:	dcf1      	bgt.n	8010442 <_printf_float+0x40e>
 801045e:	464b      	mov	r3, r9
 8010460:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010464:	e6da      	b.n	801021c <_printf_float+0x1e8>
 8010466:	f04f 0800 	mov.w	r8, #0
 801046a:	f104 0a1a 	add.w	sl, r4, #26
 801046e:	e7f2      	b.n	8010456 <_printf_float+0x422>
 8010470:	2301      	movs	r3, #1
 8010472:	4642      	mov	r2, r8
 8010474:	e7df      	b.n	8010436 <_printf_float+0x402>
 8010476:	2301      	movs	r3, #1
 8010478:	464a      	mov	r2, r9
 801047a:	4631      	mov	r1, r6
 801047c:	4628      	mov	r0, r5
 801047e:	47b8      	blx	r7
 8010480:	3001      	adds	r0, #1
 8010482:	f43f ae36 	beq.w	80100f2 <_printf_float+0xbe>
 8010486:	f108 0801 	add.w	r8, r8, #1
 801048a:	68e3      	ldr	r3, [r4, #12]
 801048c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801048e:	1a5b      	subs	r3, r3, r1
 8010490:	4543      	cmp	r3, r8
 8010492:	dcf0      	bgt.n	8010476 <_printf_float+0x442>
 8010494:	e6f8      	b.n	8010288 <_printf_float+0x254>
 8010496:	f04f 0800 	mov.w	r8, #0
 801049a:	f104 0919 	add.w	r9, r4, #25
 801049e:	e7f4      	b.n	801048a <_printf_float+0x456>

080104a0 <_printf_common>:
 80104a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104a4:	4616      	mov	r6, r2
 80104a6:	4699      	mov	r9, r3
 80104a8:	688a      	ldr	r2, [r1, #8]
 80104aa:	690b      	ldr	r3, [r1, #16]
 80104ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104b0:	4293      	cmp	r3, r2
 80104b2:	bfb8      	it	lt
 80104b4:	4613      	movlt	r3, r2
 80104b6:	6033      	str	r3, [r6, #0]
 80104b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104bc:	4607      	mov	r7, r0
 80104be:	460c      	mov	r4, r1
 80104c0:	b10a      	cbz	r2, 80104c6 <_printf_common+0x26>
 80104c2:	3301      	adds	r3, #1
 80104c4:	6033      	str	r3, [r6, #0]
 80104c6:	6823      	ldr	r3, [r4, #0]
 80104c8:	0699      	lsls	r1, r3, #26
 80104ca:	bf42      	ittt	mi
 80104cc:	6833      	ldrmi	r3, [r6, #0]
 80104ce:	3302      	addmi	r3, #2
 80104d0:	6033      	strmi	r3, [r6, #0]
 80104d2:	6825      	ldr	r5, [r4, #0]
 80104d4:	f015 0506 	ands.w	r5, r5, #6
 80104d8:	d106      	bne.n	80104e8 <_printf_common+0x48>
 80104da:	f104 0a19 	add.w	sl, r4, #25
 80104de:	68e3      	ldr	r3, [r4, #12]
 80104e0:	6832      	ldr	r2, [r6, #0]
 80104e2:	1a9b      	subs	r3, r3, r2
 80104e4:	42ab      	cmp	r3, r5
 80104e6:	dc26      	bgt.n	8010536 <_printf_common+0x96>
 80104e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104ec:	1e13      	subs	r3, r2, #0
 80104ee:	6822      	ldr	r2, [r4, #0]
 80104f0:	bf18      	it	ne
 80104f2:	2301      	movne	r3, #1
 80104f4:	0692      	lsls	r2, r2, #26
 80104f6:	d42b      	bmi.n	8010550 <_printf_common+0xb0>
 80104f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104fc:	4649      	mov	r1, r9
 80104fe:	4638      	mov	r0, r7
 8010500:	47c0      	blx	r8
 8010502:	3001      	adds	r0, #1
 8010504:	d01e      	beq.n	8010544 <_printf_common+0xa4>
 8010506:	6823      	ldr	r3, [r4, #0]
 8010508:	6922      	ldr	r2, [r4, #16]
 801050a:	f003 0306 	and.w	r3, r3, #6
 801050e:	2b04      	cmp	r3, #4
 8010510:	bf02      	ittt	eq
 8010512:	68e5      	ldreq	r5, [r4, #12]
 8010514:	6833      	ldreq	r3, [r6, #0]
 8010516:	1aed      	subeq	r5, r5, r3
 8010518:	68a3      	ldr	r3, [r4, #8]
 801051a:	bf0c      	ite	eq
 801051c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010520:	2500      	movne	r5, #0
 8010522:	4293      	cmp	r3, r2
 8010524:	bfc4      	itt	gt
 8010526:	1a9b      	subgt	r3, r3, r2
 8010528:	18ed      	addgt	r5, r5, r3
 801052a:	2600      	movs	r6, #0
 801052c:	341a      	adds	r4, #26
 801052e:	42b5      	cmp	r5, r6
 8010530:	d11a      	bne.n	8010568 <_printf_common+0xc8>
 8010532:	2000      	movs	r0, #0
 8010534:	e008      	b.n	8010548 <_printf_common+0xa8>
 8010536:	2301      	movs	r3, #1
 8010538:	4652      	mov	r2, sl
 801053a:	4649      	mov	r1, r9
 801053c:	4638      	mov	r0, r7
 801053e:	47c0      	blx	r8
 8010540:	3001      	adds	r0, #1
 8010542:	d103      	bne.n	801054c <_printf_common+0xac>
 8010544:	f04f 30ff 	mov.w	r0, #4294967295
 8010548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801054c:	3501      	adds	r5, #1
 801054e:	e7c6      	b.n	80104de <_printf_common+0x3e>
 8010550:	18e1      	adds	r1, r4, r3
 8010552:	1c5a      	adds	r2, r3, #1
 8010554:	2030      	movs	r0, #48	; 0x30
 8010556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801055a:	4422      	add	r2, r4
 801055c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010564:	3302      	adds	r3, #2
 8010566:	e7c7      	b.n	80104f8 <_printf_common+0x58>
 8010568:	2301      	movs	r3, #1
 801056a:	4622      	mov	r2, r4
 801056c:	4649      	mov	r1, r9
 801056e:	4638      	mov	r0, r7
 8010570:	47c0      	blx	r8
 8010572:	3001      	adds	r0, #1
 8010574:	d0e6      	beq.n	8010544 <_printf_common+0xa4>
 8010576:	3601      	adds	r6, #1
 8010578:	e7d9      	b.n	801052e <_printf_common+0x8e>
	...

0801057c <_printf_i>:
 801057c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010580:	7e0f      	ldrb	r7, [r1, #24]
 8010582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010584:	2f78      	cmp	r7, #120	; 0x78
 8010586:	4691      	mov	r9, r2
 8010588:	4680      	mov	r8, r0
 801058a:	460c      	mov	r4, r1
 801058c:	469a      	mov	sl, r3
 801058e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010592:	d807      	bhi.n	80105a4 <_printf_i+0x28>
 8010594:	2f62      	cmp	r7, #98	; 0x62
 8010596:	d80a      	bhi.n	80105ae <_printf_i+0x32>
 8010598:	2f00      	cmp	r7, #0
 801059a:	f000 80d4 	beq.w	8010746 <_printf_i+0x1ca>
 801059e:	2f58      	cmp	r7, #88	; 0x58
 80105a0:	f000 80c0 	beq.w	8010724 <_printf_i+0x1a8>
 80105a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80105ac:	e03a      	b.n	8010624 <_printf_i+0xa8>
 80105ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80105b2:	2b15      	cmp	r3, #21
 80105b4:	d8f6      	bhi.n	80105a4 <_printf_i+0x28>
 80105b6:	a101      	add	r1, pc, #4	; (adr r1, 80105bc <_printf_i+0x40>)
 80105b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105bc:	08010615 	.word	0x08010615
 80105c0:	08010629 	.word	0x08010629
 80105c4:	080105a5 	.word	0x080105a5
 80105c8:	080105a5 	.word	0x080105a5
 80105cc:	080105a5 	.word	0x080105a5
 80105d0:	080105a5 	.word	0x080105a5
 80105d4:	08010629 	.word	0x08010629
 80105d8:	080105a5 	.word	0x080105a5
 80105dc:	080105a5 	.word	0x080105a5
 80105e0:	080105a5 	.word	0x080105a5
 80105e4:	080105a5 	.word	0x080105a5
 80105e8:	0801072d 	.word	0x0801072d
 80105ec:	08010655 	.word	0x08010655
 80105f0:	080106e7 	.word	0x080106e7
 80105f4:	080105a5 	.word	0x080105a5
 80105f8:	080105a5 	.word	0x080105a5
 80105fc:	0801074f 	.word	0x0801074f
 8010600:	080105a5 	.word	0x080105a5
 8010604:	08010655 	.word	0x08010655
 8010608:	080105a5 	.word	0x080105a5
 801060c:	080105a5 	.word	0x080105a5
 8010610:	080106ef 	.word	0x080106ef
 8010614:	682b      	ldr	r3, [r5, #0]
 8010616:	1d1a      	adds	r2, r3, #4
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	602a      	str	r2, [r5, #0]
 801061c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010624:	2301      	movs	r3, #1
 8010626:	e09f      	b.n	8010768 <_printf_i+0x1ec>
 8010628:	6820      	ldr	r0, [r4, #0]
 801062a:	682b      	ldr	r3, [r5, #0]
 801062c:	0607      	lsls	r7, r0, #24
 801062e:	f103 0104 	add.w	r1, r3, #4
 8010632:	6029      	str	r1, [r5, #0]
 8010634:	d501      	bpl.n	801063a <_printf_i+0xbe>
 8010636:	681e      	ldr	r6, [r3, #0]
 8010638:	e003      	b.n	8010642 <_printf_i+0xc6>
 801063a:	0646      	lsls	r6, r0, #25
 801063c:	d5fb      	bpl.n	8010636 <_printf_i+0xba>
 801063e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010642:	2e00      	cmp	r6, #0
 8010644:	da03      	bge.n	801064e <_printf_i+0xd2>
 8010646:	232d      	movs	r3, #45	; 0x2d
 8010648:	4276      	negs	r6, r6
 801064a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801064e:	485a      	ldr	r0, [pc, #360]	; (80107b8 <_printf_i+0x23c>)
 8010650:	230a      	movs	r3, #10
 8010652:	e012      	b.n	801067a <_printf_i+0xfe>
 8010654:	682b      	ldr	r3, [r5, #0]
 8010656:	6820      	ldr	r0, [r4, #0]
 8010658:	1d19      	adds	r1, r3, #4
 801065a:	6029      	str	r1, [r5, #0]
 801065c:	0605      	lsls	r5, r0, #24
 801065e:	d501      	bpl.n	8010664 <_printf_i+0xe8>
 8010660:	681e      	ldr	r6, [r3, #0]
 8010662:	e002      	b.n	801066a <_printf_i+0xee>
 8010664:	0641      	lsls	r1, r0, #25
 8010666:	d5fb      	bpl.n	8010660 <_printf_i+0xe4>
 8010668:	881e      	ldrh	r6, [r3, #0]
 801066a:	4853      	ldr	r0, [pc, #332]	; (80107b8 <_printf_i+0x23c>)
 801066c:	2f6f      	cmp	r7, #111	; 0x6f
 801066e:	bf0c      	ite	eq
 8010670:	2308      	moveq	r3, #8
 8010672:	230a      	movne	r3, #10
 8010674:	2100      	movs	r1, #0
 8010676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801067a:	6865      	ldr	r5, [r4, #4]
 801067c:	60a5      	str	r5, [r4, #8]
 801067e:	2d00      	cmp	r5, #0
 8010680:	bfa2      	ittt	ge
 8010682:	6821      	ldrge	r1, [r4, #0]
 8010684:	f021 0104 	bicge.w	r1, r1, #4
 8010688:	6021      	strge	r1, [r4, #0]
 801068a:	b90e      	cbnz	r6, 8010690 <_printf_i+0x114>
 801068c:	2d00      	cmp	r5, #0
 801068e:	d04b      	beq.n	8010728 <_printf_i+0x1ac>
 8010690:	4615      	mov	r5, r2
 8010692:	fbb6 f1f3 	udiv	r1, r6, r3
 8010696:	fb03 6711 	mls	r7, r3, r1, r6
 801069a:	5dc7      	ldrb	r7, [r0, r7]
 801069c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80106a0:	4637      	mov	r7, r6
 80106a2:	42bb      	cmp	r3, r7
 80106a4:	460e      	mov	r6, r1
 80106a6:	d9f4      	bls.n	8010692 <_printf_i+0x116>
 80106a8:	2b08      	cmp	r3, #8
 80106aa:	d10b      	bne.n	80106c4 <_printf_i+0x148>
 80106ac:	6823      	ldr	r3, [r4, #0]
 80106ae:	07de      	lsls	r6, r3, #31
 80106b0:	d508      	bpl.n	80106c4 <_printf_i+0x148>
 80106b2:	6923      	ldr	r3, [r4, #16]
 80106b4:	6861      	ldr	r1, [r4, #4]
 80106b6:	4299      	cmp	r1, r3
 80106b8:	bfde      	ittt	le
 80106ba:	2330      	movle	r3, #48	; 0x30
 80106bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80106c4:	1b52      	subs	r2, r2, r5
 80106c6:	6122      	str	r2, [r4, #16]
 80106c8:	f8cd a000 	str.w	sl, [sp]
 80106cc:	464b      	mov	r3, r9
 80106ce:	aa03      	add	r2, sp, #12
 80106d0:	4621      	mov	r1, r4
 80106d2:	4640      	mov	r0, r8
 80106d4:	f7ff fee4 	bl	80104a0 <_printf_common>
 80106d8:	3001      	adds	r0, #1
 80106da:	d14a      	bne.n	8010772 <_printf_i+0x1f6>
 80106dc:	f04f 30ff 	mov.w	r0, #4294967295
 80106e0:	b004      	add	sp, #16
 80106e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106e6:	6823      	ldr	r3, [r4, #0]
 80106e8:	f043 0320 	orr.w	r3, r3, #32
 80106ec:	6023      	str	r3, [r4, #0]
 80106ee:	4833      	ldr	r0, [pc, #204]	; (80107bc <_printf_i+0x240>)
 80106f0:	2778      	movs	r7, #120	; 0x78
 80106f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80106f6:	6823      	ldr	r3, [r4, #0]
 80106f8:	6829      	ldr	r1, [r5, #0]
 80106fa:	061f      	lsls	r7, r3, #24
 80106fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8010700:	d402      	bmi.n	8010708 <_printf_i+0x18c>
 8010702:	065f      	lsls	r7, r3, #25
 8010704:	bf48      	it	mi
 8010706:	b2b6      	uxthmi	r6, r6
 8010708:	07df      	lsls	r7, r3, #31
 801070a:	bf48      	it	mi
 801070c:	f043 0320 	orrmi.w	r3, r3, #32
 8010710:	6029      	str	r1, [r5, #0]
 8010712:	bf48      	it	mi
 8010714:	6023      	strmi	r3, [r4, #0]
 8010716:	b91e      	cbnz	r6, 8010720 <_printf_i+0x1a4>
 8010718:	6823      	ldr	r3, [r4, #0]
 801071a:	f023 0320 	bic.w	r3, r3, #32
 801071e:	6023      	str	r3, [r4, #0]
 8010720:	2310      	movs	r3, #16
 8010722:	e7a7      	b.n	8010674 <_printf_i+0xf8>
 8010724:	4824      	ldr	r0, [pc, #144]	; (80107b8 <_printf_i+0x23c>)
 8010726:	e7e4      	b.n	80106f2 <_printf_i+0x176>
 8010728:	4615      	mov	r5, r2
 801072a:	e7bd      	b.n	80106a8 <_printf_i+0x12c>
 801072c:	682b      	ldr	r3, [r5, #0]
 801072e:	6826      	ldr	r6, [r4, #0]
 8010730:	6961      	ldr	r1, [r4, #20]
 8010732:	1d18      	adds	r0, r3, #4
 8010734:	6028      	str	r0, [r5, #0]
 8010736:	0635      	lsls	r5, r6, #24
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	d501      	bpl.n	8010740 <_printf_i+0x1c4>
 801073c:	6019      	str	r1, [r3, #0]
 801073e:	e002      	b.n	8010746 <_printf_i+0x1ca>
 8010740:	0670      	lsls	r0, r6, #25
 8010742:	d5fb      	bpl.n	801073c <_printf_i+0x1c0>
 8010744:	8019      	strh	r1, [r3, #0]
 8010746:	2300      	movs	r3, #0
 8010748:	6123      	str	r3, [r4, #16]
 801074a:	4615      	mov	r5, r2
 801074c:	e7bc      	b.n	80106c8 <_printf_i+0x14c>
 801074e:	682b      	ldr	r3, [r5, #0]
 8010750:	1d1a      	adds	r2, r3, #4
 8010752:	602a      	str	r2, [r5, #0]
 8010754:	681d      	ldr	r5, [r3, #0]
 8010756:	6862      	ldr	r2, [r4, #4]
 8010758:	2100      	movs	r1, #0
 801075a:	4628      	mov	r0, r5
 801075c:	f7ef fd40 	bl	80001e0 <memchr>
 8010760:	b108      	cbz	r0, 8010766 <_printf_i+0x1ea>
 8010762:	1b40      	subs	r0, r0, r5
 8010764:	6060      	str	r0, [r4, #4]
 8010766:	6863      	ldr	r3, [r4, #4]
 8010768:	6123      	str	r3, [r4, #16]
 801076a:	2300      	movs	r3, #0
 801076c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010770:	e7aa      	b.n	80106c8 <_printf_i+0x14c>
 8010772:	6923      	ldr	r3, [r4, #16]
 8010774:	462a      	mov	r2, r5
 8010776:	4649      	mov	r1, r9
 8010778:	4640      	mov	r0, r8
 801077a:	47d0      	blx	sl
 801077c:	3001      	adds	r0, #1
 801077e:	d0ad      	beq.n	80106dc <_printf_i+0x160>
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	079b      	lsls	r3, r3, #30
 8010784:	d413      	bmi.n	80107ae <_printf_i+0x232>
 8010786:	68e0      	ldr	r0, [r4, #12]
 8010788:	9b03      	ldr	r3, [sp, #12]
 801078a:	4298      	cmp	r0, r3
 801078c:	bfb8      	it	lt
 801078e:	4618      	movlt	r0, r3
 8010790:	e7a6      	b.n	80106e0 <_printf_i+0x164>
 8010792:	2301      	movs	r3, #1
 8010794:	4632      	mov	r2, r6
 8010796:	4649      	mov	r1, r9
 8010798:	4640      	mov	r0, r8
 801079a:	47d0      	blx	sl
 801079c:	3001      	adds	r0, #1
 801079e:	d09d      	beq.n	80106dc <_printf_i+0x160>
 80107a0:	3501      	adds	r5, #1
 80107a2:	68e3      	ldr	r3, [r4, #12]
 80107a4:	9903      	ldr	r1, [sp, #12]
 80107a6:	1a5b      	subs	r3, r3, r1
 80107a8:	42ab      	cmp	r3, r5
 80107aa:	dcf2      	bgt.n	8010792 <_printf_i+0x216>
 80107ac:	e7eb      	b.n	8010786 <_printf_i+0x20a>
 80107ae:	2500      	movs	r5, #0
 80107b0:	f104 0619 	add.w	r6, r4, #25
 80107b4:	e7f5      	b.n	80107a2 <_printf_i+0x226>
 80107b6:	bf00      	nop
 80107b8:	08016398 	.word	0x08016398
 80107bc:	080163a9 	.word	0x080163a9

080107c0 <_scanf_float>:
 80107c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c4:	b087      	sub	sp, #28
 80107c6:	4617      	mov	r7, r2
 80107c8:	9303      	str	r3, [sp, #12]
 80107ca:	688b      	ldr	r3, [r1, #8]
 80107cc:	1e5a      	subs	r2, r3, #1
 80107ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80107d2:	bf83      	ittte	hi
 80107d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80107d8:	195b      	addhi	r3, r3, r5
 80107da:	9302      	strhi	r3, [sp, #8]
 80107dc:	2300      	movls	r3, #0
 80107de:	bf86      	itte	hi
 80107e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80107e4:	608b      	strhi	r3, [r1, #8]
 80107e6:	9302      	strls	r3, [sp, #8]
 80107e8:	680b      	ldr	r3, [r1, #0]
 80107ea:	468b      	mov	fp, r1
 80107ec:	2500      	movs	r5, #0
 80107ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80107f2:	f84b 3b1c 	str.w	r3, [fp], #28
 80107f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80107fa:	4680      	mov	r8, r0
 80107fc:	460c      	mov	r4, r1
 80107fe:	465e      	mov	r6, fp
 8010800:	46aa      	mov	sl, r5
 8010802:	46a9      	mov	r9, r5
 8010804:	9501      	str	r5, [sp, #4]
 8010806:	68a2      	ldr	r2, [r4, #8]
 8010808:	b152      	cbz	r2, 8010820 <_scanf_float+0x60>
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	2b4e      	cmp	r3, #78	; 0x4e
 8010810:	d864      	bhi.n	80108dc <_scanf_float+0x11c>
 8010812:	2b40      	cmp	r3, #64	; 0x40
 8010814:	d83c      	bhi.n	8010890 <_scanf_float+0xd0>
 8010816:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801081a:	b2c8      	uxtb	r0, r1
 801081c:	280e      	cmp	r0, #14
 801081e:	d93a      	bls.n	8010896 <_scanf_float+0xd6>
 8010820:	f1b9 0f00 	cmp.w	r9, #0
 8010824:	d003      	beq.n	801082e <_scanf_float+0x6e>
 8010826:	6823      	ldr	r3, [r4, #0]
 8010828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801082c:	6023      	str	r3, [r4, #0]
 801082e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010832:	f1ba 0f01 	cmp.w	sl, #1
 8010836:	f200 8113 	bhi.w	8010a60 <_scanf_float+0x2a0>
 801083a:	455e      	cmp	r6, fp
 801083c:	f200 8105 	bhi.w	8010a4a <_scanf_float+0x28a>
 8010840:	2501      	movs	r5, #1
 8010842:	4628      	mov	r0, r5
 8010844:	b007      	add	sp, #28
 8010846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801084e:	2a0d      	cmp	r2, #13
 8010850:	d8e6      	bhi.n	8010820 <_scanf_float+0x60>
 8010852:	a101      	add	r1, pc, #4	; (adr r1, 8010858 <_scanf_float+0x98>)
 8010854:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010858:	08010997 	.word	0x08010997
 801085c:	08010821 	.word	0x08010821
 8010860:	08010821 	.word	0x08010821
 8010864:	08010821 	.word	0x08010821
 8010868:	080109f7 	.word	0x080109f7
 801086c:	080109cf 	.word	0x080109cf
 8010870:	08010821 	.word	0x08010821
 8010874:	08010821 	.word	0x08010821
 8010878:	080109a5 	.word	0x080109a5
 801087c:	08010821 	.word	0x08010821
 8010880:	08010821 	.word	0x08010821
 8010884:	08010821 	.word	0x08010821
 8010888:	08010821 	.word	0x08010821
 801088c:	0801095d 	.word	0x0801095d
 8010890:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010894:	e7db      	b.n	801084e <_scanf_float+0x8e>
 8010896:	290e      	cmp	r1, #14
 8010898:	d8c2      	bhi.n	8010820 <_scanf_float+0x60>
 801089a:	a001      	add	r0, pc, #4	; (adr r0, 80108a0 <_scanf_float+0xe0>)
 801089c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80108a0:	0801094f 	.word	0x0801094f
 80108a4:	08010821 	.word	0x08010821
 80108a8:	0801094f 	.word	0x0801094f
 80108ac:	080109e3 	.word	0x080109e3
 80108b0:	08010821 	.word	0x08010821
 80108b4:	080108fd 	.word	0x080108fd
 80108b8:	08010939 	.word	0x08010939
 80108bc:	08010939 	.word	0x08010939
 80108c0:	08010939 	.word	0x08010939
 80108c4:	08010939 	.word	0x08010939
 80108c8:	08010939 	.word	0x08010939
 80108cc:	08010939 	.word	0x08010939
 80108d0:	08010939 	.word	0x08010939
 80108d4:	08010939 	.word	0x08010939
 80108d8:	08010939 	.word	0x08010939
 80108dc:	2b6e      	cmp	r3, #110	; 0x6e
 80108de:	d809      	bhi.n	80108f4 <_scanf_float+0x134>
 80108e0:	2b60      	cmp	r3, #96	; 0x60
 80108e2:	d8b2      	bhi.n	801084a <_scanf_float+0x8a>
 80108e4:	2b54      	cmp	r3, #84	; 0x54
 80108e6:	d077      	beq.n	80109d8 <_scanf_float+0x218>
 80108e8:	2b59      	cmp	r3, #89	; 0x59
 80108ea:	d199      	bne.n	8010820 <_scanf_float+0x60>
 80108ec:	2d07      	cmp	r5, #7
 80108ee:	d197      	bne.n	8010820 <_scanf_float+0x60>
 80108f0:	2508      	movs	r5, #8
 80108f2:	e029      	b.n	8010948 <_scanf_float+0x188>
 80108f4:	2b74      	cmp	r3, #116	; 0x74
 80108f6:	d06f      	beq.n	80109d8 <_scanf_float+0x218>
 80108f8:	2b79      	cmp	r3, #121	; 0x79
 80108fa:	e7f6      	b.n	80108ea <_scanf_float+0x12a>
 80108fc:	6821      	ldr	r1, [r4, #0]
 80108fe:	05c8      	lsls	r0, r1, #23
 8010900:	d51a      	bpl.n	8010938 <_scanf_float+0x178>
 8010902:	9b02      	ldr	r3, [sp, #8]
 8010904:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010908:	6021      	str	r1, [r4, #0]
 801090a:	f109 0901 	add.w	r9, r9, #1
 801090e:	b11b      	cbz	r3, 8010918 <_scanf_float+0x158>
 8010910:	3b01      	subs	r3, #1
 8010912:	3201      	adds	r2, #1
 8010914:	9302      	str	r3, [sp, #8]
 8010916:	60a2      	str	r2, [r4, #8]
 8010918:	68a3      	ldr	r3, [r4, #8]
 801091a:	3b01      	subs	r3, #1
 801091c:	60a3      	str	r3, [r4, #8]
 801091e:	6923      	ldr	r3, [r4, #16]
 8010920:	3301      	adds	r3, #1
 8010922:	6123      	str	r3, [r4, #16]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	3b01      	subs	r3, #1
 8010928:	2b00      	cmp	r3, #0
 801092a:	607b      	str	r3, [r7, #4]
 801092c:	f340 8084 	ble.w	8010a38 <_scanf_float+0x278>
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	3301      	adds	r3, #1
 8010934:	603b      	str	r3, [r7, #0]
 8010936:	e766      	b.n	8010806 <_scanf_float+0x46>
 8010938:	eb1a 0f05 	cmn.w	sl, r5
 801093c:	f47f af70 	bne.w	8010820 <_scanf_float+0x60>
 8010940:	6822      	ldr	r2, [r4, #0]
 8010942:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010946:	6022      	str	r2, [r4, #0]
 8010948:	f806 3b01 	strb.w	r3, [r6], #1
 801094c:	e7e4      	b.n	8010918 <_scanf_float+0x158>
 801094e:	6822      	ldr	r2, [r4, #0]
 8010950:	0610      	lsls	r0, r2, #24
 8010952:	f57f af65 	bpl.w	8010820 <_scanf_float+0x60>
 8010956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801095a:	e7f4      	b.n	8010946 <_scanf_float+0x186>
 801095c:	f1ba 0f00 	cmp.w	sl, #0
 8010960:	d10e      	bne.n	8010980 <_scanf_float+0x1c0>
 8010962:	f1b9 0f00 	cmp.w	r9, #0
 8010966:	d10e      	bne.n	8010986 <_scanf_float+0x1c6>
 8010968:	6822      	ldr	r2, [r4, #0]
 801096a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801096e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010972:	d108      	bne.n	8010986 <_scanf_float+0x1c6>
 8010974:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010978:	6022      	str	r2, [r4, #0]
 801097a:	f04f 0a01 	mov.w	sl, #1
 801097e:	e7e3      	b.n	8010948 <_scanf_float+0x188>
 8010980:	f1ba 0f02 	cmp.w	sl, #2
 8010984:	d055      	beq.n	8010a32 <_scanf_float+0x272>
 8010986:	2d01      	cmp	r5, #1
 8010988:	d002      	beq.n	8010990 <_scanf_float+0x1d0>
 801098a:	2d04      	cmp	r5, #4
 801098c:	f47f af48 	bne.w	8010820 <_scanf_float+0x60>
 8010990:	3501      	adds	r5, #1
 8010992:	b2ed      	uxtb	r5, r5
 8010994:	e7d8      	b.n	8010948 <_scanf_float+0x188>
 8010996:	f1ba 0f01 	cmp.w	sl, #1
 801099a:	f47f af41 	bne.w	8010820 <_scanf_float+0x60>
 801099e:	f04f 0a02 	mov.w	sl, #2
 80109a2:	e7d1      	b.n	8010948 <_scanf_float+0x188>
 80109a4:	b97d      	cbnz	r5, 80109c6 <_scanf_float+0x206>
 80109a6:	f1b9 0f00 	cmp.w	r9, #0
 80109aa:	f47f af3c 	bne.w	8010826 <_scanf_float+0x66>
 80109ae:	6822      	ldr	r2, [r4, #0]
 80109b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80109b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80109b8:	f47f af39 	bne.w	801082e <_scanf_float+0x6e>
 80109bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80109c0:	6022      	str	r2, [r4, #0]
 80109c2:	2501      	movs	r5, #1
 80109c4:	e7c0      	b.n	8010948 <_scanf_float+0x188>
 80109c6:	2d03      	cmp	r5, #3
 80109c8:	d0e2      	beq.n	8010990 <_scanf_float+0x1d0>
 80109ca:	2d05      	cmp	r5, #5
 80109cc:	e7de      	b.n	801098c <_scanf_float+0x1cc>
 80109ce:	2d02      	cmp	r5, #2
 80109d0:	f47f af26 	bne.w	8010820 <_scanf_float+0x60>
 80109d4:	2503      	movs	r5, #3
 80109d6:	e7b7      	b.n	8010948 <_scanf_float+0x188>
 80109d8:	2d06      	cmp	r5, #6
 80109da:	f47f af21 	bne.w	8010820 <_scanf_float+0x60>
 80109de:	2507      	movs	r5, #7
 80109e0:	e7b2      	b.n	8010948 <_scanf_float+0x188>
 80109e2:	6822      	ldr	r2, [r4, #0]
 80109e4:	0591      	lsls	r1, r2, #22
 80109e6:	f57f af1b 	bpl.w	8010820 <_scanf_float+0x60>
 80109ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80109ee:	6022      	str	r2, [r4, #0]
 80109f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80109f4:	e7a8      	b.n	8010948 <_scanf_float+0x188>
 80109f6:	6822      	ldr	r2, [r4, #0]
 80109f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80109fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010a00:	d006      	beq.n	8010a10 <_scanf_float+0x250>
 8010a02:	0550      	lsls	r0, r2, #21
 8010a04:	f57f af0c 	bpl.w	8010820 <_scanf_float+0x60>
 8010a08:	f1b9 0f00 	cmp.w	r9, #0
 8010a0c:	f43f af0f 	beq.w	801082e <_scanf_float+0x6e>
 8010a10:	0591      	lsls	r1, r2, #22
 8010a12:	bf58      	it	pl
 8010a14:	9901      	ldrpl	r1, [sp, #4]
 8010a16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a1a:	bf58      	it	pl
 8010a1c:	eba9 0101 	subpl.w	r1, r9, r1
 8010a20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010a24:	bf58      	it	pl
 8010a26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010a2a:	6022      	str	r2, [r4, #0]
 8010a2c:	f04f 0900 	mov.w	r9, #0
 8010a30:	e78a      	b.n	8010948 <_scanf_float+0x188>
 8010a32:	f04f 0a03 	mov.w	sl, #3
 8010a36:	e787      	b.n	8010948 <_scanf_float+0x188>
 8010a38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010a3c:	4639      	mov	r1, r7
 8010a3e:	4640      	mov	r0, r8
 8010a40:	4798      	blx	r3
 8010a42:	2800      	cmp	r0, #0
 8010a44:	f43f aedf 	beq.w	8010806 <_scanf_float+0x46>
 8010a48:	e6ea      	b.n	8010820 <_scanf_float+0x60>
 8010a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a52:	463a      	mov	r2, r7
 8010a54:	4640      	mov	r0, r8
 8010a56:	4798      	blx	r3
 8010a58:	6923      	ldr	r3, [r4, #16]
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	6123      	str	r3, [r4, #16]
 8010a5e:	e6ec      	b.n	801083a <_scanf_float+0x7a>
 8010a60:	1e6b      	subs	r3, r5, #1
 8010a62:	2b06      	cmp	r3, #6
 8010a64:	d825      	bhi.n	8010ab2 <_scanf_float+0x2f2>
 8010a66:	2d02      	cmp	r5, #2
 8010a68:	d836      	bhi.n	8010ad8 <_scanf_float+0x318>
 8010a6a:	455e      	cmp	r6, fp
 8010a6c:	f67f aee8 	bls.w	8010840 <_scanf_float+0x80>
 8010a70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a78:	463a      	mov	r2, r7
 8010a7a:	4640      	mov	r0, r8
 8010a7c:	4798      	blx	r3
 8010a7e:	6923      	ldr	r3, [r4, #16]
 8010a80:	3b01      	subs	r3, #1
 8010a82:	6123      	str	r3, [r4, #16]
 8010a84:	e7f1      	b.n	8010a6a <_scanf_float+0x2aa>
 8010a86:	9802      	ldr	r0, [sp, #8]
 8010a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010a90:	9002      	str	r0, [sp, #8]
 8010a92:	463a      	mov	r2, r7
 8010a94:	4640      	mov	r0, r8
 8010a96:	4798      	blx	r3
 8010a98:	6923      	ldr	r3, [r4, #16]
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	6123      	str	r3, [r4, #16]
 8010a9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010aa2:	fa5f fa8a 	uxtb.w	sl, sl
 8010aa6:	f1ba 0f02 	cmp.w	sl, #2
 8010aaa:	d1ec      	bne.n	8010a86 <_scanf_float+0x2c6>
 8010aac:	3d03      	subs	r5, #3
 8010aae:	b2ed      	uxtb	r5, r5
 8010ab0:	1b76      	subs	r6, r6, r5
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	05da      	lsls	r2, r3, #23
 8010ab6:	d52f      	bpl.n	8010b18 <_scanf_float+0x358>
 8010ab8:	055b      	lsls	r3, r3, #21
 8010aba:	d510      	bpl.n	8010ade <_scanf_float+0x31e>
 8010abc:	455e      	cmp	r6, fp
 8010abe:	f67f aebf 	bls.w	8010840 <_scanf_float+0x80>
 8010ac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010aca:	463a      	mov	r2, r7
 8010acc:	4640      	mov	r0, r8
 8010ace:	4798      	blx	r3
 8010ad0:	6923      	ldr	r3, [r4, #16]
 8010ad2:	3b01      	subs	r3, #1
 8010ad4:	6123      	str	r3, [r4, #16]
 8010ad6:	e7f1      	b.n	8010abc <_scanf_float+0x2fc>
 8010ad8:	46aa      	mov	sl, r5
 8010ada:	9602      	str	r6, [sp, #8]
 8010adc:	e7df      	b.n	8010a9e <_scanf_float+0x2de>
 8010ade:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010ae2:	6923      	ldr	r3, [r4, #16]
 8010ae4:	2965      	cmp	r1, #101	; 0x65
 8010ae6:	f103 33ff 	add.w	r3, r3, #4294967295
 8010aea:	f106 35ff 	add.w	r5, r6, #4294967295
 8010aee:	6123      	str	r3, [r4, #16]
 8010af0:	d00c      	beq.n	8010b0c <_scanf_float+0x34c>
 8010af2:	2945      	cmp	r1, #69	; 0x45
 8010af4:	d00a      	beq.n	8010b0c <_scanf_float+0x34c>
 8010af6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010afa:	463a      	mov	r2, r7
 8010afc:	4640      	mov	r0, r8
 8010afe:	4798      	blx	r3
 8010b00:	6923      	ldr	r3, [r4, #16]
 8010b02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010b06:	3b01      	subs	r3, #1
 8010b08:	1eb5      	subs	r5, r6, #2
 8010b0a:	6123      	str	r3, [r4, #16]
 8010b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b10:	463a      	mov	r2, r7
 8010b12:	4640      	mov	r0, r8
 8010b14:	4798      	blx	r3
 8010b16:	462e      	mov	r6, r5
 8010b18:	6825      	ldr	r5, [r4, #0]
 8010b1a:	f015 0510 	ands.w	r5, r5, #16
 8010b1e:	d158      	bne.n	8010bd2 <_scanf_float+0x412>
 8010b20:	7035      	strb	r5, [r6, #0]
 8010b22:	6823      	ldr	r3, [r4, #0]
 8010b24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b2c:	d11c      	bne.n	8010b68 <_scanf_float+0x3a8>
 8010b2e:	9b01      	ldr	r3, [sp, #4]
 8010b30:	454b      	cmp	r3, r9
 8010b32:	eba3 0209 	sub.w	r2, r3, r9
 8010b36:	d124      	bne.n	8010b82 <_scanf_float+0x3c2>
 8010b38:	2200      	movs	r2, #0
 8010b3a:	4659      	mov	r1, fp
 8010b3c:	4640      	mov	r0, r8
 8010b3e:	f002 fbef 	bl	8013320 <_strtod_r>
 8010b42:	9b03      	ldr	r3, [sp, #12]
 8010b44:	6821      	ldr	r1, [r4, #0]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	f011 0f02 	tst.w	r1, #2
 8010b4c:	ec57 6b10 	vmov	r6, r7, d0
 8010b50:	f103 0204 	add.w	r2, r3, #4
 8010b54:	d020      	beq.n	8010b98 <_scanf_float+0x3d8>
 8010b56:	9903      	ldr	r1, [sp, #12]
 8010b58:	600a      	str	r2, [r1, #0]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	e9c3 6700 	strd	r6, r7, [r3]
 8010b60:	68e3      	ldr	r3, [r4, #12]
 8010b62:	3301      	adds	r3, #1
 8010b64:	60e3      	str	r3, [r4, #12]
 8010b66:	e66c      	b.n	8010842 <_scanf_float+0x82>
 8010b68:	9b04      	ldr	r3, [sp, #16]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d0e4      	beq.n	8010b38 <_scanf_float+0x378>
 8010b6e:	9905      	ldr	r1, [sp, #20]
 8010b70:	230a      	movs	r3, #10
 8010b72:	462a      	mov	r2, r5
 8010b74:	3101      	adds	r1, #1
 8010b76:	4640      	mov	r0, r8
 8010b78:	f002 fc5a 	bl	8013430 <_strtol_r>
 8010b7c:	9b04      	ldr	r3, [sp, #16]
 8010b7e:	9e05      	ldr	r6, [sp, #20]
 8010b80:	1ac2      	subs	r2, r0, r3
 8010b82:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010b86:	429e      	cmp	r6, r3
 8010b88:	bf28      	it	cs
 8010b8a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010b8e:	4912      	ldr	r1, [pc, #72]	; (8010bd8 <_scanf_float+0x418>)
 8010b90:	4630      	mov	r0, r6
 8010b92:	f000 f8e7 	bl	8010d64 <siprintf>
 8010b96:	e7cf      	b.n	8010b38 <_scanf_float+0x378>
 8010b98:	f011 0f04 	tst.w	r1, #4
 8010b9c:	9903      	ldr	r1, [sp, #12]
 8010b9e:	600a      	str	r2, [r1, #0]
 8010ba0:	d1db      	bne.n	8010b5a <_scanf_float+0x39a>
 8010ba2:	f8d3 8000 	ldr.w	r8, [r3]
 8010ba6:	ee10 2a10 	vmov	r2, s0
 8010baa:	ee10 0a10 	vmov	r0, s0
 8010bae:	463b      	mov	r3, r7
 8010bb0:	4639      	mov	r1, r7
 8010bb2:	f7ef ffc3 	bl	8000b3c <__aeabi_dcmpun>
 8010bb6:	b128      	cbz	r0, 8010bc4 <_scanf_float+0x404>
 8010bb8:	4808      	ldr	r0, [pc, #32]	; (8010bdc <_scanf_float+0x41c>)
 8010bba:	f000 fa2b 	bl	8011014 <nanf>
 8010bbe:	ed88 0a00 	vstr	s0, [r8]
 8010bc2:	e7cd      	b.n	8010b60 <_scanf_float+0x3a0>
 8010bc4:	4630      	mov	r0, r6
 8010bc6:	4639      	mov	r1, r7
 8010bc8:	f7f0 f816 	bl	8000bf8 <__aeabi_d2f>
 8010bcc:	f8c8 0000 	str.w	r0, [r8]
 8010bd0:	e7c6      	b.n	8010b60 <_scanf_float+0x3a0>
 8010bd2:	2500      	movs	r5, #0
 8010bd4:	e635      	b.n	8010842 <_scanf_float+0x82>
 8010bd6:	bf00      	nop
 8010bd8:	080163ba 	.word	0x080163ba
 8010bdc:	08016768 	.word	0x08016768

08010be0 <std>:
 8010be0:	2300      	movs	r3, #0
 8010be2:	b510      	push	{r4, lr}
 8010be4:	4604      	mov	r4, r0
 8010be6:	e9c0 3300 	strd	r3, r3, [r0]
 8010bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bee:	6083      	str	r3, [r0, #8]
 8010bf0:	8181      	strh	r1, [r0, #12]
 8010bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8010bf4:	81c2      	strh	r2, [r0, #14]
 8010bf6:	6183      	str	r3, [r0, #24]
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	2208      	movs	r2, #8
 8010bfc:	305c      	adds	r0, #92	; 0x5c
 8010bfe:	f000 f942 	bl	8010e86 <memset>
 8010c02:	4b0d      	ldr	r3, [pc, #52]	; (8010c38 <std+0x58>)
 8010c04:	6263      	str	r3, [r4, #36]	; 0x24
 8010c06:	4b0d      	ldr	r3, [pc, #52]	; (8010c3c <std+0x5c>)
 8010c08:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c0a:	4b0d      	ldr	r3, [pc, #52]	; (8010c40 <std+0x60>)
 8010c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c0e:	4b0d      	ldr	r3, [pc, #52]	; (8010c44 <std+0x64>)
 8010c10:	6323      	str	r3, [r4, #48]	; 0x30
 8010c12:	4b0d      	ldr	r3, [pc, #52]	; (8010c48 <std+0x68>)
 8010c14:	6224      	str	r4, [r4, #32]
 8010c16:	429c      	cmp	r4, r3
 8010c18:	d006      	beq.n	8010c28 <std+0x48>
 8010c1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010c1e:	4294      	cmp	r4, r2
 8010c20:	d002      	beq.n	8010c28 <std+0x48>
 8010c22:	33d0      	adds	r3, #208	; 0xd0
 8010c24:	429c      	cmp	r4, r3
 8010c26:	d105      	bne.n	8010c34 <std+0x54>
 8010c28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c30:	f000 b9ec 	b.w	801100c <__retarget_lock_init_recursive>
 8010c34:	bd10      	pop	{r4, pc}
 8010c36:	bf00      	nop
 8010c38:	08010dfd 	.word	0x08010dfd
 8010c3c:	08010e23 	.word	0x08010e23
 8010c40:	08010e5b 	.word	0x08010e5b
 8010c44:	08010e7f 	.word	0x08010e7f
 8010c48:	20004c98 	.word	0x20004c98

08010c4c <stdio_exit_handler>:
 8010c4c:	4a02      	ldr	r2, [pc, #8]	; (8010c58 <stdio_exit_handler+0xc>)
 8010c4e:	4903      	ldr	r1, [pc, #12]	; (8010c5c <stdio_exit_handler+0x10>)
 8010c50:	4803      	ldr	r0, [pc, #12]	; (8010c60 <stdio_exit_handler+0x14>)
 8010c52:	f000 b869 	b.w	8010d28 <_fwalk_sglue>
 8010c56:	bf00      	nop
 8010c58:	20000114 	.word	0x20000114
 8010c5c:	08013e31 	.word	0x08013e31
 8010c60:	20000120 	.word	0x20000120

08010c64 <cleanup_stdio>:
 8010c64:	6841      	ldr	r1, [r0, #4]
 8010c66:	4b0c      	ldr	r3, [pc, #48]	; (8010c98 <cleanup_stdio+0x34>)
 8010c68:	4299      	cmp	r1, r3
 8010c6a:	b510      	push	{r4, lr}
 8010c6c:	4604      	mov	r4, r0
 8010c6e:	d001      	beq.n	8010c74 <cleanup_stdio+0x10>
 8010c70:	f003 f8de 	bl	8013e30 <_fflush_r>
 8010c74:	68a1      	ldr	r1, [r4, #8]
 8010c76:	4b09      	ldr	r3, [pc, #36]	; (8010c9c <cleanup_stdio+0x38>)
 8010c78:	4299      	cmp	r1, r3
 8010c7a:	d002      	beq.n	8010c82 <cleanup_stdio+0x1e>
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f003 f8d7 	bl	8013e30 <_fflush_r>
 8010c82:	68e1      	ldr	r1, [r4, #12]
 8010c84:	4b06      	ldr	r3, [pc, #24]	; (8010ca0 <cleanup_stdio+0x3c>)
 8010c86:	4299      	cmp	r1, r3
 8010c88:	d004      	beq.n	8010c94 <cleanup_stdio+0x30>
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c90:	f003 b8ce 	b.w	8013e30 <_fflush_r>
 8010c94:	bd10      	pop	{r4, pc}
 8010c96:	bf00      	nop
 8010c98:	20004c98 	.word	0x20004c98
 8010c9c:	20004d00 	.word	0x20004d00
 8010ca0:	20004d68 	.word	0x20004d68

08010ca4 <global_stdio_init.part.0>:
 8010ca4:	b510      	push	{r4, lr}
 8010ca6:	4b0b      	ldr	r3, [pc, #44]	; (8010cd4 <global_stdio_init.part.0+0x30>)
 8010ca8:	4c0b      	ldr	r4, [pc, #44]	; (8010cd8 <global_stdio_init.part.0+0x34>)
 8010caa:	4a0c      	ldr	r2, [pc, #48]	; (8010cdc <global_stdio_init.part.0+0x38>)
 8010cac:	601a      	str	r2, [r3, #0]
 8010cae:	4620      	mov	r0, r4
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	2104      	movs	r1, #4
 8010cb4:	f7ff ff94 	bl	8010be0 <std>
 8010cb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	2109      	movs	r1, #9
 8010cc0:	f7ff ff8e 	bl	8010be0 <std>
 8010cc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010cc8:	2202      	movs	r2, #2
 8010cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cce:	2112      	movs	r1, #18
 8010cd0:	f7ff bf86 	b.w	8010be0 <std>
 8010cd4:	20004dd0 	.word	0x20004dd0
 8010cd8:	20004c98 	.word	0x20004c98
 8010cdc:	08010c4d 	.word	0x08010c4d

08010ce0 <__sfp_lock_acquire>:
 8010ce0:	4801      	ldr	r0, [pc, #4]	; (8010ce8 <__sfp_lock_acquire+0x8>)
 8010ce2:	f000 b994 	b.w	801100e <__retarget_lock_acquire_recursive>
 8010ce6:	bf00      	nop
 8010ce8:	20004dd9 	.word	0x20004dd9

08010cec <__sfp_lock_release>:
 8010cec:	4801      	ldr	r0, [pc, #4]	; (8010cf4 <__sfp_lock_release+0x8>)
 8010cee:	f000 b98f 	b.w	8011010 <__retarget_lock_release_recursive>
 8010cf2:	bf00      	nop
 8010cf4:	20004dd9 	.word	0x20004dd9

08010cf8 <__sinit>:
 8010cf8:	b510      	push	{r4, lr}
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	f7ff fff0 	bl	8010ce0 <__sfp_lock_acquire>
 8010d00:	6a23      	ldr	r3, [r4, #32]
 8010d02:	b11b      	cbz	r3, 8010d0c <__sinit+0x14>
 8010d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d08:	f7ff bff0 	b.w	8010cec <__sfp_lock_release>
 8010d0c:	4b04      	ldr	r3, [pc, #16]	; (8010d20 <__sinit+0x28>)
 8010d0e:	6223      	str	r3, [r4, #32]
 8010d10:	4b04      	ldr	r3, [pc, #16]	; (8010d24 <__sinit+0x2c>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d1f5      	bne.n	8010d04 <__sinit+0xc>
 8010d18:	f7ff ffc4 	bl	8010ca4 <global_stdio_init.part.0>
 8010d1c:	e7f2      	b.n	8010d04 <__sinit+0xc>
 8010d1e:	bf00      	nop
 8010d20:	08010c65 	.word	0x08010c65
 8010d24:	20004dd0 	.word	0x20004dd0

08010d28 <_fwalk_sglue>:
 8010d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d2c:	4607      	mov	r7, r0
 8010d2e:	4688      	mov	r8, r1
 8010d30:	4614      	mov	r4, r2
 8010d32:	2600      	movs	r6, #0
 8010d34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d38:	f1b9 0901 	subs.w	r9, r9, #1
 8010d3c:	d505      	bpl.n	8010d4a <_fwalk_sglue+0x22>
 8010d3e:	6824      	ldr	r4, [r4, #0]
 8010d40:	2c00      	cmp	r4, #0
 8010d42:	d1f7      	bne.n	8010d34 <_fwalk_sglue+0xc>
 8010d44:	4630      	mov	r0, r6
 8010d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d4a:	89ab      	ldrh	r3, [r5, #12]
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d907      	bls.n	8010d60 <_fwalk_sglue+0x38>
 8010d50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d54:	3301      	adds	r3, #1
 8010d56:	d003      	beq.n	8010d60 <_fwalk_sglue+0x38>
 8010d58:	4629      	mov	r1, r5
 8010d5a:	4638      	mov	r0, r7
 8010d5c:	47c0      	blx	r8
 8010d5e:	4306      	orrs	r6, r0
 8010d60:	3568      	adds	r5, #104	; 0x68
 8010d62:	e7e9      	b.n	8010d38 <_fwalk_sglue+0x10>

08010d64 <siprintf>:
 8010d64:	b40e      	push	{r1, r2, r3}
 8010d66:	b500      	push	{lr}
 8010d68:	b09c      	sub	sp, #112	; 0x70
 8010d6a:	ab1d      	add	r3, sp, #116	; 0x74
 8010d6c:	9002      	str	r0, [sp, #8]
 8010d6e:	9006      	str	r0, [sp, #24]
 8010d70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d74:	4809      	ldr	r0, [pc, #36]	; (8010d9c <siprintf+0x38>)
 8010d76:	9107      	str	r1, [sp, #28]
 8010d78:	9104      	str	r1, [sp, #16]
 8010d7a:	4909      	ldr	r1, [pc, #36]	; (8010da0 <siprintf+0x3c>)
 8010d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d80:	9105      	str	r1, [sp, #20]
 8010d82:	6800      	ldr	r0, [r0, #0]
 8010d84:	9301      	str	r3, [sp, #4]
 8010d86:	a902      	add	r1, sp, #8
 8010d88:	f002 fbae 	bl	80134e8 <_svfiprintf_r>
 8010d8c:	9b02      	ldr	r3, [sp, #8]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	701a      	strb	r2, [r3, #0]
 8010d92:	b01c      	add	sp, #112	; 0x70
 8010d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d98:	b003      	add	sp, #12
 8010d9a:	4770      	bx	lr
 8010d9c:	2000016c 	.word	0x2000016c
 8010da0:	ffff0208 	.word	0xffff0208

08010da4 <siscanf>:
 8010da4:	b40e      	push	{r1, r2, r3}
 8010da6:	b510      	push	{r4, lr}
 8010da8:	b09f      	sub	sp, #124	; 0x7c
 8010daa:	ac21      	add	r4, sp, #132	; 0x84
 8010dac:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010db0:	f854 2b04 	ldr.w	r2, [r4], #4
 8010db4:	9201      	str	r2, [sp, #4]
 8010db6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010dba:	9004      	str	r0, [sp, #16]
 8010dbc:	9008      	str	r0, [sp, #32]
 8010dbe:	f7ef fa5f 	bl	8000280 <strlen>
 8010dc2:	4b0c      	ldr	r3, [pc, #48]	; (8010df4 <siscanf+0x50>)
 8010dc4:	9005      	str	r0, [sp, #20]
 8010dc6:	9009      	str	r0, [sp, #36]	; 0x24
 8010dc8:	930d      	str	r3, [sp, #52]	; 0x34
 8010dca:	480b      	ldr	r0, [pc, #44]	; (8010df8 <siscanf+0x54>)
 8010dcc:	9a01      	ldr	r2, [sp, #4]
 8010dce:	6800      	ldr	r0, [r0, #0]
 8010dd0:	9403      	str	r4, [sp, #12]
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	9311      	str	r3, [sp, #68]	; 0x44
 8010dd6:	9316      	str	r3, [sp, #88]	; 0x58
 8010dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ddc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010de0:	a904      	add	r1, sp, #16
 8010de2:	4623      	mov	r3, r4
 8010de4:	f002 fcd8 	bl	8013798 <__ssvfiscanf_r>
 8010de8:	b01f      	add	sp, #124	; 0x7c
 8010dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dee:	b003      	add	sp, #12
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	08010e1f 	.word	0x08010e1f
 8010df8:	2000016c 	.word	0x2000016c

08010dfc <__sread>:
 8010dfc:	b510      	push	{r4, lr}
 8010dfe:	460c      	mov	r4, r1
 8010e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e04:	f000 f8a4 	bl	8010f50 <_read_r>
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	bfab      	itete	ge
 8010e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8010e10:	181b      	addge	r3, r3, r0
 8010e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e16:	bfac      	ite	ge
 8010e18:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e1a:	81a3      	strhlt	r3, [r4, #12]
 8010e1c:	bd10      	pop	{r4, pc}

08010e1e <__seofread>:
 8010e1e:	2000      	movs	r0, #0
 8010e20:	4770      	bx	lr

08010e22 <__swrite>:
 8010e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e26:	461f      	mov	r7, r3
 8010e28:	898b      	ldrh	r3, [r1, #12]
 8010e2a:	05db      	lsls	r3, r3, #23
 8010e2c:	4605      	mov	r5, r0
 8010e2e:	460c      	mov	r4, r1
 8010e30:	4616      	mov	r6, r2
 8010e32:	d505      	bpl.n	8010e40 <__swrite+0x1e>
 8010e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e38:	2302      	movs	r3, #2
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f000 f876 	bl	8010f2c <_lseek_r>
 8010e40:	89a3      	ldrh	r3, [r4, #12]
 8010e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e4a:	81a3      	strh	r3, [r4, #12]
 8010e4c:	4632      	mov	r2, r6
 8010e4e:	463b      	mov	r3, r7
 8010e50:	4628      	mov	r0, r5
 8010e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e56:	f000 b89d 	b.w	8010f94 <_write_r>

08010e5a <__sseek>:
 8010e5a:	b510      	push	{r4, lr}
 8010e5c:	460c      	mov	r4, r1
 8010e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e62:	f000 f863 	bl	8010f2c <_lseek_r>
 8010e66:	1c43      	adds	r3, r0, #1
 8010e68:	89a3      	ldrh	r3, [r4, #12]
 8010e6a:	bf15      	itete	ne
 8010e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e76:	81a3      	strheq	r3, [r4, #12]
 8010e78:	bf18      	it	ne
 8010e7a:	81a3      	strhne	r3, [r4, #12]
 8010e7c:	bd10      	pop	{r4, pc}

08010e7e <__sclose>:
 8010e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e82:	f000 b843 	b.w	8010f0c <_close_r>

08010e86 <memset>:
 8010e86:	4402      	add	r2, r0
 8010e88:	4603      	mov	r3, r0
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	d100      	bne.n	8010e90 <memset+0xa>
 8010e8e:	4770      	bx	lr
 8010e90:	f803 1b01 	strb.w	r1, [r3], #1
 8010e94:	e7f9      	b.n	8010e8a <memset+0x4>

08010e96 <strchr>:
 8010e96:	b2c9      	uxtb	r1, r1
 8010e98:	4603      	mov	r3, r0
 8010e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e9e:	b11a      	cbz	r2, 8010ea8 <strchr+0x12>
 8010ea0:	428a      	cmp	r2, r1
 8010ea2:	d1f9      	bne.n	8010e98 <strchr+0x2>
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	4770      	bx	lr
 8010ea8:	2900      	cmp	r1, #0
 8010eaa:	bf18      	it	ne
 8010eac:	2300      	movne	r3, #0
 8010eae:	e7f9      	b.n	8010ea4 <strchr+0xe>

08010eb0 <strncpy>:
 8010eb0:	b510      	push	{r4, lr}
 8010eb2:	3901      	subs	r1, #1
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	b132      	cbz	r2, 8010ec6 <strncpy+0x16>
 8010eb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ebc:	f803 4b01 	strb.w	r4, [r3], #1
 8010ec0:	3a01      	subs	r2, #1
 8010ec2:	2c00      	cmp	r4, #0
 8010ec4:	d1f7      	bne.n	8010eb6 <strncpy+0x6>
 8010ec6:	441a      	add	r2, r3
 8010ec8:	2100      	movs	r1, #0
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d100      	bne.n	8010ed0 <strncpy+0x20>
 8010ece:	bd10      	pop	{r4, pc}
 8010ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8010ed4:	e7f9      	b.n	8010eca <strncpy+0x1a>

08010ed6 <strstr>:
 8010ed6:	780a      	ldrb	r2, [r1, #0]
 8010ed8:	b570      	push	{r4, r5, r6, lr}
 8010eda:	b96a      	cbnz	r2, 8010ef8 <strstr+0x22>
 8010edc:	bd70      	pop	{r4, r5, r6, pc}
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d109      	bne.n	8010ef6 <strstr+0x20>
 8010ee2:	460c      	mov	r4, r1
 8010ee4:	4605      	mov	r5, r0
 8010ee6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d0f6      	beq.n	8010edc <strstr+0x6>
 8010eee:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010ef2:	429e      	cmp	r6, r3
 8010ef4:	d0f7      	beq.n	8010ee6 <strstr+0x10>
 8010ef6:	3001      	adds	r0, #1
 8010ef8:	7803      	ldrb	r3, [r0, #0]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d1ef      	bne.n	8010ede <strstr+0x8>
 8010efe:	4618      	mov	r0, r3
 8010f00:	e7ec      	b.n	8010edc <strstr+0x6>
	...

08010f04 <_localeconv_r>:
 8010f04:	4800      	ldr	r0, [pc, #0]	; (8010f08 <_localeconv_r+0x4>)
 8010f06:	4770      	bx	lr
 8010f08:	20000260 	.word	0x20000260

08010f0c <_close_r>:
 8010f0c:	b538      	push	{r3, r4, r5, lr}
 8010f0e:	4d06      	ldr	r5, [pc, #24]	; (8010f28 <_close_r+0x1c>)
 8010f10:	2300      	movs	r3, #0
 8010f12:	4604      	mov	r4, r0
 8010f14:	4608      	mov	r0, r1
 8010f16:	602b      	str	r3, [r5, #0]
 8010f18:	f7f2 fc3f 	bl	800379a <_close>
 8010f1c:	1c43      	adds	r3, r0, #1
 8010f1e:	d102      	bne.n	8010f26 <_close_r+0x1a>
 8010f20:	682b      	ldr	r3, [r5, #0]
 8010f22:	b103      	cbz	r3, 8010f26 <_close_r+0x1a>
 8010f24:	6023      	str	r3, [r4, #0]
 8010f26:	bd38      	pop	{r3, r4, r5, pc}
 8010f28:	20004dd4 	.word	0x20004dd4

08010f2c <_lseek_r>:
 8010f2c:	b538      	push	{r3, r4, r5, lr}
 8010f2e:	4d07      	ldr	r5, [pc, #28]	; (8010f4c <_lseek_r+0x20>)
 8010f30:	4604      	mov	r4, r0
 8010f32:	4608      	mov	r0, r1
 8010f34:	4611      	mov	r1, r2
 8010f36:	2200      	movs	r2, #0
 8010f38:	602a      	str	r2, [r5, #0]
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	f7f2 fc54 	bl	80037e8 <_lseek>
 8010f40:	1c43      	adds	r3, r0, #1
 8010f42:	d102      	bne.n	8010f4a <_lseek_r+0x1e>
 8010f44:	682b      	ldr	r3, [r5, #0]
 8010f46:	b103      	cbz	r3, 8010f4a <_lseek_r+0x1e>
 8010f48:	6023      	str	r3, [r4, #0]
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}
 8010f4c:	20004dd4 	.word	0x20004dd4

08010f50 <_read_r>:
 8010f50:	b538      	push	{r3, r4, r5, lr}
 8010f52:	4d07      	ldr	r5, [pc, #28]	; (8010f70 <_read_r+0x20>)
 8010f54:	4604      	mov	r4, r0
 8010f56:	4608      	mov	r0, r1
 8010f58:	4611      	mov	r1, r2
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	602a      	str	r2, [r5, #0]
 8010f5e:	461a      	mov	r2, r3
 8010f60:	f7f2 fbe2 	bl	8003728 <_read>
 8010f64:	1c43      	adds	r3, r0, #1
 8010f66:	d102      	bne.n	8010f6e <_read_r+0x1e>
 8010f68:	682b      	ldr	r3, [r5, #0]
 8010f6a:	b103      	cbz	r3, 8010f6e <_read_r+0x1e>
 8010f6c:	6023      	str	r3, [r4, #0]
 8010f6e:	bd38      	pop	{r3, r4, r5, pc}
 8010f70:	20004dd4 	.word	0x20004dd4

08010f74 <_sbrk_r>:
 8010f74:	b538      	push	{r3, r4, r5, lr}
 8010f76:	4d06      	ldr	r5, [pc, #24]	; (8010f90 <_sbrk_r+0x1c>)
 8010f78:	2300      	movs	r3, #0
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	4608      	mov	r0, r1
 8010f7e:	602b      	str	r3, [r5, #0]
 8010f80:	f7f2 fc40 	bl	8003804 <_sbrk>
 8010f84:	1c43      	adds	r3, r0, #1
 8010f86:	d102      	bne.n	8010f8e <_sbrk_r+0x1a>
 8010f88:	682b      	ldr	r3, [r5, #0]
 8010f8a:	b103      	cbz	r3, 8010f8e <_sbrk_r+0x1a>
 8010f8c:	6023      	str	r3, [r4, #0]
 8010f8e:	bd38      	pop	{r3, r4, r5, pc}
 8010f90:	20004dd4 	.word	0x20004dd4

08010f94 <_write_r>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	4d07      	ldr	r5, [pc, #28]	; (8010fb4 <_write_r+0x20>)
 8010f98:	4604      	mov	r4, r0
 8010f9a:	4608      	mov	r0, r1
 8010f9c:	4611      	mov	r1, r2
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	602a      	str	r2, [r5, #0]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	f7f2 fbdd 	bl	8003762 <_write>
 8010fa8:	1c43      	adds	r3, r0, #1
 8010faa:	d102      	bne.n	8010fb2 <_write_r+0x1e>
 8010fac:	682b      	ldr	r3, [r5, #0]
 8010fae:	b103      	cbz	r3, 8010fb2 <_write_r+0x1e>
 8010fb0:	6023      	str	r3, [r4, #0]
 8010fb2:	bd38      	pop	{r3, r4, r5, pc}
 8010fb4:	20004dd4 	.word	0x20004dd4

08010fb8 <__errno>:
 8010fb8:	4b01      	ldr	r3, [pc, #4]	; (8010fc0 <__errno+0x8>)
 8010fba:	6818      	ldr	r0, [r3, #0]
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	2000016c 	.word	0x2000016c

08010fc4 <__libc_init_array>:
 8010fc4:	b570      	push	{r4, r5, r6, lr}
 8010fc6:	4d0d      	ldr	r5, [pc, #52]	; (8010ffc <__libc_init_array+0x38>)
 8010fc8:	4c0d      	ldr	r4, [pc, #52]	; (8011000 <__libc_init_array+0x3c>)
 8010fca:	1b64      	subs	r4, r4, r5
 8010fcc:	10a4      	asrs	r4, r4, #2
 8010fce:	2600      	movs	r6, #0
 8010fd0:	42a6      	cmp	r6, r4
 8010fd2:	d109      	bne.n	8010fe8 <__libc_init_array+0x24>
 8010fd4:	4d0b      	ldr	r5, [pc, #44]	; (8011004 <__libc_init_array+0x40>)
 8010fd6:	4c0c      	ldr	r4, [pc, #48]	; (8011008 <__libc_init_array+0x44>)
 8010fd8:	f004 fe52 	bl	8015c80 <_init>
 8010fdc:	1b64      	subs	r4, r4, r5
 8010fde:	10a4      	asrs	r4, r4, #2
 8010fe0:	2600      	movs	r6, #0
 8010fe2:	42a6      	cmp	r6, r4
 8010fe4:	d105      	bne.n	8010ff2 <__libc_init_array+0x2e>
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}
 8010fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fec:	4798      	blx	r3
 8010fee:	3601      	adds	r6, #1
 8010ff0:	e7ee      	b.n	8010fd0 <__libc_init_array+0xc>
 8010ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ff6:	4798      	blx	r3
 8010ff8:	3601      	adds	r6, #1
 8010ffa:	e7f2      	b.n	8010fe2 <__libc_init_array+0x1e>
 8010ffc:	08016808 	.word	0x08016808
 8011000:	08016808 	.word	0x08016808
 8011004:	08016808 	.word	0x08016808
 8011008:	0801680c 	.word	0x0801680c

0801100c <__retarget_lock_init_recursive>:
 801100c:	4770      	bx	lr

0801100e <__retarget_lock_acquire_recursive>:
 801100e:	4770      	bx	lr

08011010 <__retarget_lock_release_recursive>:
 8011010:	4770      	bx	lr
	...

08011014 <nanf>:
 8011014:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801101c <nanf+0x8>
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop
 801101c:	7fc00000 	.word	0x7fc00000

08011020 <quorem>:
 8011020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011024:	6903      	ldr	r3, [r0, #16]
 8011026:	690c      	ldr	r4, [r1, #16]
 8011028:	42a3      	cmp	r3, r4
 801102a:	4607      	mov	r7, r0
 801102c:	db7e      	blt.n	801112c <quorem+0x10c>
 801102e:	3c01      	subs	r4, #1
 8011030:	f101 0814 	add.w	r8, r1, #20
 8011034:	f100 0514 	add.w	r5, r0, #20
 8011038:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801103c:	9301      	str	r3, [sp, #4]
 801103e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011046:	3301      	adds	r3, #1
 8011048:	429a      	cmp	r2, r3
 801104a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801104e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011052:	fbb2 f6f3 	udiv	r6, r2, r3
 8011056:	d331      	bcc.n	80110bc <quorem+0x9c>
 8011058:	f04f 0e00 	mov.w	lr, #0
 801105c:	4640      	mov	r0, r8
 801105e:	46ac      	mov	ip, r5
 8011060:	46f2      	mov	sl, lr
 8011062:	f850 2b04 	ldr.w	r2, [r0], #4
 8011066:	b293      	uxth	r3, r2
 8011068:	fb06 e303 	mla	r3, r6, r3, lr
 801106c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011070:	0c1a      	lsrs	r2, r3, #16
 8011072:	b29b      	uxth	r3, r3
 8011074:	ebaa 0303 	sub.w	r3, sl, r3
 8011078:	f8dc a000 	ldr.w	sl, [ip]
 801107c:	fa13 f38a 	uxtah	r3, r3, sl
 8011080:	fb06 220e 	mla	r2, r6, lr, r2
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	9b00      	ldr	r3, [sp, #0]
 8011088:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801108c:	b292      	uxth	r2, r2
 801108e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011092:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011096:	f8bd 3000 	ldrh.w	r3, [sp]
 801109a:	4581      	cmp	r9, r0
 801109c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110a0:	f84c 3b04 	str.w	r3, [ip], #4
 80110a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80110a8:	d2db      	bcs.n	8011062 <quorem+0x42>
 80110aa:	f855 300b 	ldr.w	r3, [r5, fp]
 80110ae:	b92b      	cbnz	r3, 80110bc <quorem+0x9c>
 80110b0:	9b01      	ldr	r3, [sp, #4]
 80110b2:	3b04      	subs	r3, #4
 80110b4:	429d      	cmp	r5, r3
 80110b6:	461a      	mov	r2, r3
 80110b8:	d32c      	bcc.n	8011114 <quorem+0xf4>
 80110ba:	613c      	str	r4, [r7, #16]
 80110bc:	4638      	mov	r0, r7
 80110be:	f001 f93b 	bl	8012338 <__mcmp>
 80110c2:	2800      	cmp	r0, #0
 80110c4:	db22      	blt.n	801110c <quorem+0xec>
 80110c6:	3601      	adds	r6, #1
 80110c8:	4629      	mov	r1, r5
 80110ca:	2000      	movs	r0, #0
 80110cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80110d0:	f8d1 c000 	ldr.w	ip, [r1]
 80110d4:	b293      	uxth	r3, r2
 80110d6:	1ac3      	subs	r3, r0, r3
 80110d8:	0c12      	lsrs	r2, r2, #16
 80110da:	fa13 f38c 	uxtah	r3, r3, ip
 80110de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80110e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110ec:	45c1      	cmp	r9, r8
 80110ee:	f841 3b04 	str.w	r3, [r1], #4
 80110f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80110f6:	d2e9      	bcs.n	80110cc <quorem+0xac>
 80110f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80110fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011100:	b922      	cbnz	r2, 801110c <quorem+0xec>
 8011102:	3b04      	subs	r3, #4
 8011104:	429d      	cmp	r5, r3
 8011106:	461a      	mov	r2, r3
 8011108:	d30a      	bcc.n	8011120 <quorem+0x100>
 801110a:	613c      	str	r4, [r7, #16]
 801110c:	4630      	mov	r0, r6
 801110e:	b003      	add	sp, #12
 8011110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011114:	6812      	ldr	r2, [r2, #0]
 8011116:	3b04      	subs	r3, #4
 8011118:	2a00      	cmp	r2, #0
 801111a:	d1ce      	bne.n	80110ba <quorem+0x9a>
 801111c:	3c01      	subs	r4, #1
 801111e:	e7c9      	b.n	80110b4 <quorem+0x94>
 8011120:	6812      	ldr	r2, [r2, #0]
 8011122:	3b04      	subs	r3, #4
 8011124:	2a00      	cmp	r2, #0
 8011126:	d1f0      	bne.n	801110a <quorem+0xea>
 8011128:	3c01      	subs	r4, #1
 801112a:	e7eb      	b.n	8011104 <quorem+0xe4>
 801112c:	2000      	movs	r0, #0
 801112e:	e7ee      	b.n	801110e <quorem+0xee>

08011130 <_dtoa_r>:
 8011130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011134:	ed2d 8b04 	vpush	{d8-d9}
 8011138:	69c5      	ldr	r5, [r0, #28]
 801113a:	b093      	sub	sp, #76	; 0x4c
 801113c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011140:	ec57 6b10 	vmov	r6, r7, d0
 8011144:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011148:	9107      	str	r1, [sp, #28]
 801114a:	4604      	mov	r4, r0
 801114c:	920a      	str	r2, [sp, #40]	; 0x28
 801114e:	930d      	str	r3, [sp, #52]	; 0x34
 8011150:	b975      	cbnz	r5, 8011170 <_dtoa_r+0x40>
 8011152:	2010      	movs	r0, #16
 8011154:	f7fe fe12 	bl	800fd7c <malloc>
 8011158:	4602      	mov	r2, r0
 801115a:	61e0      	str	r0, [r4, #28]
 801115c:	b920      	cbnz	r0, 8011168 <_dtoa_r+0x38>
 801115e:	4bae      	ldr	r3, [pc, #696]	; (8011418 <_dtoa_r+0x2e8>)
 8011160:	21ef      	movs	r1, #239	; 0xef
 8011162:	48ae      	ldr	r0, [pc, #696]	; (801141c <_dtoa_r+0x2ec>)
 8011164:	f002 ff44 	bl	8013ff0 <__assert_func>
 8011168:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801116c:	6005      	str	r5, [r0, #0]
 801116e:	60c5      	str	r5, [r0, #12]
 8011170:	69e3      	ldr	r3, [r4, #28]
 8011172:	6819      	ldr	r1, [r3, #0]
 8011174:	b151      	cbz	r1, 801118c <_dtoa_r+0x5c>
 8011176:	685a      	ldr	r2, [r3, #4]
 8011178:	604a      	str	r2, [r1, #4]
 801117a:	2301      	movs	r3, #1
 801117c:	4093      	lsls	r3, r2
 801117e:	608b      	str	r3, [r1, #8]
 8011180:	4620      	mov	r0, r4
 8011182:	f000 fe53 	bl	8011e2c <_Bfree>
 8011186:	69e3      	ldr	r3, [r4, #28]
 8011188:	2200      	movs	r2, #0
 801118a:	601a      	str	r2, [r3, #0]
 801118c:	1e3b      	subs	r3, r7, #0
 801118e:	bfbb      	ittet	lt
 8011190:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011194:	9303      	strlt	r3, [sp, #12]
 8011196:	2300      	movge	r3, #0
 8011198:	2201      	movlt	r2, #1
 801119a:	bfac      	ite	ge
 801119c:	f8c8 3000 	strge.w	r3, [r8]
 80111a0:	f8c8 2000 	strlt.w	r2, [r8]
 80111a4:	4b9e      	ldr	r3, [pc, #632]	; (8011420 <_dtoa_r+0x2f0>)
 80111a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80111aa:	ea33 0308 	bics.w	r3, r3, r8
 80111ae:	d11b      	bne.n	80111e8 <_dtoa_r+0xb8>
 80111b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80111b6:	6013      	str	r3, [r2, #0]
 80111b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80111bc:	4333      	orrs	r3, r6
 80111be:	f000 8593 	beq.w	8011ce8 <_dtoa_r+0xbb8>
 80111c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111c4:	b963      	cbnz	r3, 80111e0 <_dtoa_r+0xb0>
 80111c6:	4b97      	ldr	r3, [pc, #604]	; (8011424 <_dtoa_r+0x2f4>)
 80111c8:	e027      	b.n	801121a <_dtoa_r+0xea>
 80111ca:	4b97      	ldr	r3, [pc, #604]	; (8011428 <_dtoa_r+0x2f8>)
 80111cc:	9300      	str	r3, [sp, #0]
 80111ce:	3308      	adds	r3, #8
 80111d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80111d2:	6013      	str	r3, [r2, #0]
 80111d4:	9800      	ldr	r0, [sp, #0]
 80111d6:	b013      	add	sp, #76	; 0x4c
 80111d8:	ecbd 8b04 	vpop	{d8-d9}
 80111dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111e0:	4b90      	ldr	r3, [pc, #576]	; (8011424 <_dtoa_r+0x2f4>)
 80111e2:	9300      	str	r3, [sp, #0]
 80111e4:	3303      	adds	r3, #3
 80111e6:	e7f3      	b.n	80111d0 <_dtoa_r+0xa0>
 80111e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80111ec:	2200      	movs	r2, #0
 80111ee:	ec51 0b17 	vmov	r0, r1, d7
 80111f2:	eeb0 8a47 	vmov.f32	s16, s14
 80111f6:	eef0 8a67 	vmov.f32	s17, s15
 80111fa:	2300      	movs	r3, #0
 80111fc:	f7ef fc6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8011200:	4681      	mov	r9, r0
 8011202:	b160      	cbz	r0, 801121e <_dtoa_r+0xee>
 8011204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011206:	2301      	movs	r3, #1
 8011208:	6013      	str	r3, [r2, #0]
 801120a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801120c:	2b00      	cmp	r3, #0
 801120e:	f000 8568 	beq.w	8011ce2 <_dtoa_r+0xbb2>
 8011212:	4b86      	ldr	r3, [pc, #536]	; (801142c <_dtoa_r+0x2fc>)
 8011214:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011216:	6013      	str	r3, [r2, #0]
 8011218:	3b01      	subs	r3, #1
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	e7da      	b.n	80111d4 <_dtoa_r+0xa4>
 801121e:	aa10      	add	r2, sp, #64	; 0x40
 8011220:	a911      	add	r1, sp, #68	; 0x44
 8011222:	4620      	mov	r0, r4
 8011224:	eeb0 0a48 	vmov.f32	s0, s16
 8011228:	eef0 0a68 	vmov.f32	s1, s17
 801122c:	f001 f99a 	bl	8012564 <__d2b>
 8011230:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011234:	4682      	mov	sl, r0
 8011236:	2d00      	cmp	r5, #0
 8011238:	d07f      	beq.n	801133a <_dtoa_r+0x20a>
 801123a:	ee18 3a90 	vmov	r3, s17
 801123e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011242:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011246:	ec51 0b18 	vmov	r0, r1, d8
 801124a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801124e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011252:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011256:	4619      	mov	r1, r3
 8011258:	2200      	movs	r2, #0
 801125a:	4b75      	ldr	r3, [pc, #468]	; (8011430 <_dtoa_r+0x300>)
 801125c:	f7ef f81c 	bl	8000298 <__aeabi_dsub>
 8011260:	a367      	add	r3, pc, #412	; (adr r3, 8011400 <_dtoa_r+0x2d0>)
 8011262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011266:	f7ef f9cf 	bl	8000608 <__aeabi_dmul>
 801126a:	a367      	add	r3, pc, #412	; (adr r3, 8011408 <_dtoa_r+0x2d8>)
 801126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011270:	f7ef f814 	bl	800029c <__adddf3>
 8011274:	4606      	mov	r6, r0
 8011276:	4628      	mov	r0, r5
 8011278:	460f      	mov	r7, r1
 801127a:	f7ef f95b 	bl	8000534 <__aeabi_i2d>
 801127e:	a364      	add	r3, pc, #400	; (adr r3, 8011410 <_dtoa_r+0x2e0>)
 8011280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011284:	f7ef f9c0 	bl	8000608 <__aeabi_dmul>
 8011288:	4602      	mov	r2, r0
 801128a:	460b      	mov	r3, r1
 801128c:	4630      	mov	r0, r6
 801128e:	4639      	mov	r1, r7
 8011290:	f7ef f804 	bl	800029c <__adddf3>
 8011294:	4606      	mov	r6, r0
 8011296:	460f      	mov	r7, r1
 8011298:	f7ef fc66 	bl	8000b68 <__aeabi_d2iz>
 801129c:	2200      	movs	r2, #0
 801129e:	4683      	mov	fp, r0
 80112a0:	2300      	movs	r3, #0
 80112a2:	4630      	mov	r0, r6
 80112a4:	4639      	mov	r1, r7
 80112a6:	f7ef fc21 	bl	8000aec <__aeabi_dcmplt>
 80112aa:	b148      	cbz	r0, 80112c0 <_dtoa_r+0x190>
 80112ac:	4658      	mov	r0, fp
 80112ae:	f7ef f941 	bl	8000534 <__aeabi_i2d>
 80112b2:	4632      	mov	r2, r6
 80112b4:	463b      	mov	r3, r7
 80112b6:	f7ef fc0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80112ba:	b908      	cbnz	r0, 80112c0 <_dtoa_r+0x190>
 80112bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80112c0:	f1bb 0f16 	cmp.w	fp, #22
 80112c4:	d857      	bhi.n	8011376 <_dtoa_r+0x246>
 80112c6:	4b5b      	ldr	r3, [pc, #364]	; (8011434 <_dtoa_r+0x304>)
 80112c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80112cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d0:	ec51 0b18 	vmov	r0, r1, d8
 80112d4:	f7ef fc0a 	bl	8000aec <__aeabi_dcmplt>
 80112d8:	2800      	cmp	r0, #0
 80112da:	d04e      	beq.n	801137a <_dtoa_r+0x24a>
 80112dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80112e0:	2300      	movs	r3, #0
 80112e2:	930c      	str	r3, [sp, #48]	; 0x30
 80112e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112e6:	1b5b      	subs	r3, r3, r5
 80112e8:	1e5a      	subs	r2, r3, #1
 80112ea:	bf45      	ittet	mi
 80112ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80112f0:	9305      	strmi	r3, [sp, #20]
 80112f2:	2300      	movpl	r3, #0
 80112f4:	2300      	movmi	r3, #0
 80112f6:	9206      	str	r2, [sp, #24]
 80112f8:	bf54      	ite	pl
 80112fa:	9305      	strpl	r3, [sp, #20]
 80112fc:	9306      	strmi	r3, [sp, #24]
 80112fe:	f1bb 0f00 	cmp.w	fp, #0
 8011302:	db3c      	blt.n	801137e <_dtoa_r+0x24e>
 8011304:	9b06      	ldr	r3, [sp, #24]
 8011306:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801130a:	445b      	add	r3, fp
 801130c:	9306      	str	r3, [sp, #24]
 801130e:	2300      	movs	r3, #0
 8011310:	9308      	str	r3, [sp, #32]
 8011312:	9b07      	ldr	r3, [sp, #28]
 8011314:	2b09      	cmp	r3, #9
 8011316:	d868      	bhi.n	80113ea <_dtoa_r+0x2ba>
 8011318:	2b05      	cmp	r3, #5
 801131a:	bfc4      	itt	gt
 801131c:	3b04      	subgt	r3, #4
 801131e:	9307      	strgt	r3, [sp, #28]
 8011320:	9b07      	ldr	r3, [sp, #28]
 8011322:	f1a3 0302 	sub.w	r3, r3, #2
 8011326:	bfcc      	ite	gt
 8011328:	2500      	movgt	r5, #0
 801132a:	2501      	movle	r5, #1
 801132c:	2b03      	cmp	r3, #3
 801132e:	f200 8085 	bhi.w	801143c <_dtoa_r+0x30c>
 8011332:	e8df f003 	tbb	[pc, r3]
 8011336:	3b2e      	.short	0x3b2e
 8011338:	5839      	.short	0x5839
 801133a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801133e:	441d      	add	r5, r3
 8011340:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011344:	2b20      	cmp	r3, #32
 8011346:	bfc1      	itttt	gt
 8011348:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801134c:	fa08 f803 	lslgt.w	r8, r8, r3
 8011350:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8011354:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011358:	bfd6      	itet	le
 801135a:	f1c3 0320 	rsble	r3, r3, #32
 801135e:	ea48 0003 	orrgt.w	r0, r8, r3
 8011362:	fa06 f003 	lslle.w	r0, r6, r3
 8011366:	f7ef f8d5 	bl	8000514 <__aeabi_ui2d>
 801136a:	2201      	movs	r2, #1
 801136c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011370:	3d01      	subs	r5, #1
 8011372:	920e      	str	r2, [sp, #56]	; 0x38
 8011374:	e76f      	b.n	8011256 <_dtoa_r+0x126>
 8011376:	2301      	movs	r3, #1
 8011378:	e7b3      	b.n	80112e2 <_dtoa_r+0x1b2>
 801137a:	900c      	str	r0, [sp, #48]	; 0x30
 801137c:	e7b2      	b.n	80112e4 <_dtoa_r+0x1b4>
 801137e:	9b05      	ldr	r3, [sp, #20]
 8011380:	eba3 030b 	sub.w	r3, r3, fp
 8011384:	9305      	str	r3, [sp, #20]
 8011386:	f1cb 0300 	rsb	r3, fp, #0
 801138a:	9308      	str	r3, [sp, #32]
 801138c:	2300      	movs	r3, #0
 801138e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011390:	e7bf      	b.n	8011312 <_dtoa_r+0x1e2>
 8011392:	2300      	movs	r3, #0
 8011394:	9309      	str	r3, [sp, #36]	; 0x24
 8011396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011398:	2b00      	cmp	r3, #0
 801139a:	dc52      	bgt.n	8011442 <_dtoa_r+0x312>
 801139c:	2301      	movs	r3, #1
 801139e:	9301      	str	r3, [sp, #4]
 80113a0:	9304      	str	r3, [sp, #16]
 80113a2:	461a      	mov	r2, r3
 80113a4:	920a      	str	r2, [sp, #40]	; 0x28
 80113a6:	e00b      	b.n	80113c0 <_dtoa_r+0x290>
 80113a8:	2301      	movs	r3, #1
 80113aa:	e7f3      	b.n	8011394 <_dtoa_r+0x264>
 80113ac:	2300      	movs	r3, #0
 80113ae:	9309      	str	r3, [sp, #36]	; 0x24
 80113b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113b2:	445b      	add	r3, fp
 80113b4:	9301      	str	r3, [sp, #4]
 80113b6:	3301      	adds	r3, #1
 80113b8:	2b01      	cmp	r3, #1
 80113ba:	9304      	str	r3, [sp, #16]
 80113bc:	bfb8      	it	lt
 80113be:	2301      	movlt	r3, #1
 80113c0:	69e0      	ldr	r0, [r4, #28]
 80113c2:	2100      	movs	r1, #0
 80113c4:	2204      	movs	r2, #4
 80113c6:	f102 0614 	add.w	r6, r2, #20
 80113ca:	429e      	cmp	r6, r3
 80113cc:	d93d      	bls.n	801144a <_dtoa_r+0x31a>
 80113ce:	6041      	str	r1, [r0, #4]
 80113d0:	4620      	mov	r0, r4
 80113d2:	f000 fceb 	bl	8011dac <_Balloc>
 80113d6:	9000      	str	r0, [sp, #0]
 80113d8:	2800      	cmp	r0, #0
 80113da:	d139      	bne.n	8011450 <_dtoa_r+0x320>
 80113dc:	4b16      	ldr	r3, [pc, #88]	; (8011438 <_dtoa_r+0x308>)
 80113de:	4602      	mov	r2, r0
 80113e0:	f240 11af 	movw	r1, #431	; 0x1af
 80113e4:	e6bd      	b.n	8011162 <_dtoa_r+0x32>
 80113e6:	2301      	movs	r3, #1
 80113e8:	e7e1      	b.n	80113ae <_dtoa_r+0x27e>
 80113ea:	2501      	movs	r5, #1
 80113ec:	2300      	movs	r3, #0
 80113ee:	9307      	str	r3, [sp, #28]
 80113f0:	9509      	str	r5, [sp, #36]	; 0x24
 80113f2:	f04f 33ff 	mov.w	r3, #4294967295
 80113f6:	9301      	str	r3, [sp, #4]
 80113f8:	9304      	str	r3, [sp, #16]
 80113fa:	2200      	movs	r2, #0
 80113fc:	2312      	movs	r3, #18
 80113fe:	e7d1      	b.n	80113a4 <_dtoa_r+0x274>
 8011400:	636f4361 	.word	0x636f4361
 8011404:	3fd287a7 	.word	0x3fd287a7
 8011408:	8b60c8b3 	.word	0x8b60c8b3
 801140c:	3fc68a28 	.word	0x3fc68a28
 8011410:	509f79fb 	.word	0x509f79fb
 8011414:	3fd34413 	.word	0x3fd34413
 8011418:	080163cc 	.word	0x080163cc
 801141c:	080163e3 	.word	0x080163e3
 8011420:	7ff00000 	.word	0x7ff00000
 8011424:	080163c8 	.word	0x080163c8
 8011428:	080163bf 	.word	0x080163bf
 801142c:	08016721 	.word	0x08016721
 8011430:	3ff80000 	.word	0x3ff80000
 8011434:	080164d0 	.word	0x080164d0
 8011438:	0801643b 	.word	0x0801643b
 801143c:	2301      	movs	r3, #1
 801143e:	9309      	str	r3, [sp, #36]	; 0x24
 8011440:	e7d7      	b.n	80113f2 <_dtoa_r+0x2c2>
 8011442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011444:	9301      	str	r3, [sp, #4]
 8011446:	9304      	str	r3, [sp, #16]
 8011448:	e7ba      	b.n	80113c0 <_dtoa_r+0x290>
 801144a:	3101      	adds	r1, #1
 801144c:	0052      	lsls	r2, r2, #1
 801144e:	e7ba      	b.n	80113c6 <_dtoa_r+0x296>
 8011450:	69e3      	ldr	r3, [r4, #28]
 8011452:	9a00      	ldr	r2, [sp, #0]
 8011454:	601a      	str	r2, [r3, #0]
 8011456:	9b04      	ldr	r3, [sp, #16]
 8011458:	2b0e      	cmp	r3, #14
 801145a:	f200 80a8 	bhi.w	80115ae <_dtoa_r+0x47e>
 801145e:	2d00      	cmp	r5, #0
 8011460:	f000 80a5 	beq.w	80115ae <_dtoa_r+0x47e>
 8011464:	f1bb 0f00 	cmp.w	fp, #0
 8011468:	dd38      	ble.n	80114dc <_dtoa_r+0x3ac>
 801146a:	4bc0      	ldr	r3, [pc, #768]	; (801176c <_dtoa_r+0x63c>)
 801146c:	f00b 020f 	and.w	r2, fp, #15
 8011470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011474:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011478:	e9d3 6700 	ldrd	r6, r7, [r3]
 801147c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011480:	d019      	beq.n	80114b6 <_dtoa_r+0x386>
 8011482:	4bbb      	ldr	r3, [pc, #748]	; (8011770 <_dtoa_r+0x640>)
 8011484:	ec51 0b18 	vmov	r0, r1, d8
 8011488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801148c:	f7ef f9e6 	bl	800085c <__aeabi_ddiv>
 8011490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011494:	f008 080f 	and.w	r8, r8, #15
 8011498:	2503      	movs	r5, #3
 801149a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011770 <_dtoa_r+0x640>
 801149e:	f1b8 0f00 	cmp.w	r8, #0
 80114a2:	d10a      	bne.n	80114ba <_dtoa_r+0x38a>
 80114a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114a8:	4632      	mov	r2, r6
 80114aa:	463b      	mov	r3, r7
 80114ac:	f7ef f9d6 	bl	800085c <__aeabi_ddiv>
 80114b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114b4:	e02b      	b.n	801150e <_dtoa_r+0x3de>
 80114b6:	2502      	movs	r5, #2
 80114b8:	e7ef      	b.n	801149a <_dtoa_r+0x36a>
 80114ba:	f018 0f01 	tst.w	r8, #1
 80114be:	d008      	beq.n	80114d2 <_dtoa_r+0x3a2>
 80114c0:	4630      	mov	r0, r6
 80114c2:	4639      	mov	r1, r7
 80114c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80114c8:	f7ef f89e 	bl	8000608 <__aeabi_dmul>
 80114cc:	3501      	adds	r5, #1
 80114ce:	4606      	mov	r6, r0
 80114d0:	460f      	mov	r7, r1
 80114d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80114d6:	f109 0908 	add.w	r9, r9, #8
 80114da:	e7e0      	b.n	801149e <_dtoa_r+0x36e>
 80114dc:	f000 809f 	beq.w	801161e <_dtoa_r+0x4ee>
 80114e0:	f1cb 0600 	rsb	r6, fp, #0
 80114e4:	4ba1      	ldr	r3, [pc, #644]	; (801176c <_dtoa_r+0x63c>)
 80114e6:	4fa2      	ldr	r7, [pc, #648]	; (8011770 <_dtoa_r+0x640>)
 80114e8:	f006 020f 	and.w	r2, r6, #15
 80114ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80114f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f4:	ec51 0b18 	vmov	r0, r1, d8
 80114f8:	f7ef f886 	bl	8000608 <__aeabi_dmul>
 80114fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011500:	1136      	asrs	r6, r6, #4
 8011502:	2300      	movs	r3, #0
 8011504:	2502      	movs	r5, #2
 8011506:	2e00      	cmp	r6, #0
 8011508:	d17e      	bne.n	8011608 <_dtoa_r+0x4d8>
 801150a:	2b00      	cmp	r3, #0
 801150c:	d1d0      	bne.n	80114b0 <_dtoa_r+0x380>
 801150e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011510:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011514:	2b00      	cmp	r3, #0
 8011516:	f000 8084 	beq.w	8011622 <_dtoa_r+0x4f2>
 801151a:	4b96      	ldr	r3, [pc, #600]	; (8011774 <_dtoa_r+0x644>)
 801151c:	2200      	movs	r2, #0
 801151e:	4640      	mov	r0, r8
 8011520:	4649      	mov	r1, r9
 8011522:	f7ef fae3 	bl	8000aec <__aeabi_dcmplt>
 8011526:	2800      	cmp	r0, #0
 8011528:	d07b      	beq.n	8011622 <_dtoa_r+0x4f2>
 801152a:	9b04      	ldr	r3, [sp, #16]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d078      	beq.n	8011622 <_dtoa_r+0x4f2>
 8011530:	9b01      	ldr	r3, [sp, #4]
 8011532:	2b00      	cmp	r3, #0
 8011534:	dd39      	ble.n	80115aa <_dtoa_r+0x47a>
 8011536:	4b90      	ldr	r3, [pc, #576]	; (8011778 <_dtoa_r+0x648>)
 8011538:	2200      	movs	r2, #0
 801153a:	4640      	mov	r0, r8
 801153c:	4649      	mov	r1, r9
 801153e:	f7ef f863 	bl	8000608 <__aeabi_dmul>
 8011542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011546:	9e01      	ldr	r6, [sp, #4]
 8011548:	f10b 37ff 	add.w	r7, fp, #4294967295
 801154c:	3501      	adds	r5, #1
 801154e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011552:	4628      	mov	r0, r5
 8011554:	f7ee ffee 	bl	8000534 <__aeabi_i2d>
 8011558:	4642      	mov	r2, r8
 801155a:	464b      	mov	r3, r9
 801155c:	f7ef f854 	bl	8000608 <__aeabi_dmul>
 8011560:	4b86      	ldr	r3, [pc, #536]	; (801177c <_dtoa_r+0x64c>)
 8011562:	2200      	movs	r2, #0
 8011564:	f7ee fe9a 	bl	800029c <__adddf3>
 8011568:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801156c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011570:	9303      	str	r3, [sp, #12]
 8011572:	2e00      	cmp	r6, #0
 8011574:	d158      	bne.n	8011628 <_dtoa_r+0x4f8>
 8011576:	4b82      	ldr	r3, [pc, #520]	; (8011780 <_dtoa_r+0x650>)
 8011578:	2200      	movs	r2, #0
 801157a:	4640      	mov	r0, r8
 801157c:	4649      	mov	r1, r9
 801157e:	f7ee fe8b 	bl	8000298 <__aeabi_dsub>
 8011582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011586:	4680      	mov	r8, r0
 8011588:	4689      	mov	r9, r1
 801158a:	f7ef facd 	bl	8000b28 <__aeabi_dcmpgt>
 801158e:	2800      	cmp	r0, #0
 8011590:	f040 8296 	bne.w	8011ac0 <_dtoa_r+0x990>
 8011594:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011598:	4640      	mov	r0, r8
 801159a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801159e:	4649      	mov	r1, r9
 80115a0:	f7ef faa4 	bl	8000aec <__aeabi_dcmplt>
 80115a4:	2800      	cmp	r0, #0
 80115a6:	f040 8289 	bne.w	8011abc <_dtoa_r+0x98c>
 80115aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80115ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	f2c0 814e 	blt.w	8011852 <_dtoa_r+0x722>
 80115b6:	f1bb 0f0e 	cmp.w	fp, #14
 80115ba:	f300 814a 	bgt.w	8011852 <_dtoa_r+0x722>
 80115be:	4b6b      	ldr	r3, [pc, #428]	; (801176c <_dtoa_r+0x63c>)
 80115c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80115c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80115c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	f280 80dc 	bge.w	8011788 <_dtoa_r+0x658>
 80115d0:	9b04      	ldr	r3, [sp, #16]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	f300 80d8 	bgt.w	8011788 <_dtoa_r+0x658>
 80115d8:	f040 826f 	bne.w	8011aba <_dtoa_r+0x98a>
 80115dc:	4b68      	ldr	r3, [pc, #416]	; (8011780 <_dtoa_r+0x650>)
 80115de:	2200      	movs	r2, #0
 80115e0:	4640      	mov	r0, r8
 80115e2:	4649      	mov	r1, r9
 80115e4:	f7ef f810 	bl	8000608 <__aeabi_dmul>
 80115e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115ec:	f7ef fa92 	bl	8000b14 <__aeabi_dcmpge>
 80115f0:	9e04      	ldr	r6, [sp, #16]
 80115f2:	4637      	mov	r7, r6
 80115f4:	2800      	cmp	r0, #0
 80115f6:	f040 8245 	bne.w	8011a84 <_dtoa_r+0x954>
 80115fa:	9d00      	ldr	r5, [sp, #0]
 80115fc:	2331      	movs	r3, #49	; 0x31
 80115fe:	f805 3b01 	strb.w	r3, [r5], #1
 8011602:	f10b 0b01 	add.w	fp, fp, #1
 8011606:	e241      	b.n	8011a8c <_dtoa_r+0x95c>
 8011608:	07f2      	lsls	r2, r6, #31
 801160a:	d505      	bpl.n	8011618 <_dtoa_r+0x4e8>
 801160c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011610:	f7ee fffa 	bl	8000608 <__aeabi_dmul>
 8011614:	3501      	adds	r5, #1
 8011616:	2301      	movs	r3, #1
 8011618:	1076      	asrs	r6, r6, #1
 801161a:	3708      	adds	r7, #8
 801161c:	e773      	b.n	8011506 <_dtoa_r+0x3d6>
 801161e:	2502      	movs	r5, #2
 8011620:	e775      	b.n	801150e <_dtoa_r+0x3de>
 8011622:	9e04      	ldr	r6, [sp, #16]
 8011624:	465f      	mov	r7, fp
 8011626:	e792      	b.n	801154e <_dtoa_r+0x41e>
 8011628:	9900      	ldr	r1, [sp, #0]
 801162a:	4b50      	ldr	r3, [pc, #320]	; (801176c <_dtoa_r+0x63c>)
 801162c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011630:	4431      	add	r1, r6
 8011632:	9102      	str	r1, [sp, #8]
 8011634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011636:	eeb0 9a47 	vmov.f32	s18, s14
 801163a:	eef0 9a67 	vmov.f32	s19, s15
 801163e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011642:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011646:	2900      	cmp	r1, #0
 8011648:	d044      	beq.n	80116d4 <_dtoa_r+0x5a4>
 801164a:	494e      	ldr	r1, [pc, #312]	; (8011784 <_dtoa_r+0x654>)
 801164c:	2000      	movs	r0, #0
 801164e:	f7ef f905 	bl	800085c <__aeabi_ddiv>
 8011652:	ec53 2b19 	vmov	r2, r3, d9
 8011656:	f7ee fe1f 	bl	8000298 <__aeabi_dsub>
 801165a:	9d00      	ldr	r5, [sp, #0]
 801165c:	ec41 0b19 	vmov	d9, r0, r1
 8011660:	4649      	mov	r1, r9
 8011662:	4640      	mov	r0, r8
 8011664:	f7ef fa80 	bl	8000b68 <__aeabi_d2iz>
 8011668:	4606      	mov	r6, r0
 801166a:	f7ee ff63 	bl	8000534 <__aeabi_i2d>
 801166e:	4602      	mov	r2, r0
 8011670:	460b      	mov	r3, r1
 8011672:	4640      	mov	r0, r8
 8011674:	4649      	mov	r1, r9
 8011676:	f7ee fe0f 	bl	8000298 <__aeabi_dsub>
 801167a:	3630      	adds	r6, #48	; 0x30
 801167c:	f805 6b01 	strb.w	r6, [r5], #1
 8011680:	ec53 2b19 	vmov	r2, r3, d9
 8011684:	4680      	mov	r8, r0
 8011686:	4689      	mov	r9, r1
 8011688:	f7ef fa30 	bl	8000aec <__aeabi_dcmplt>
 801168c:	2800      	cmp	r0, #0
 801168e:	d164      	bne.n	801175a <_dtoa_r+0x62a>
 8011690:	4642      	mov	r2, r8
 8011692:	464b      	mov	r3, r9
 8011694:	4937      	ldr	r1, [pc, #220]	; (8011774 <_dtoa_r+0x644>)
 8011696:	2000      	movs	r0, #0
 8011698:	f7ee fdfe 	bl	8000298 <__aeabi_dsub>
 801169c:	ec53 2b19 	vmov	r2, r3, d9
 80116a0:	f7ef fa24 	bl	8000aec <__aeabi_dcmplt>
 80116a4:	2800      	cmp	r0, #0
 80116a6:	f040 80b6 	bne.w	8011816 <_dtoa_r+0x6e6>
 80116aa:	9b02      	ldr	r3, [sp, #8]
 80116ac:	429d      	cmp	r5, r3
 80116ae:	f43f af7c 	beq.w	80115aa <_dtoa_r+0x47a>
 80116b2:	4b31      	ldr	r3, [pc, #196]	; (8011778 <_dtoa_r+0x648>)
 80116b4:	ec51 0b19 	vmov	r0, r1, d9
 80116b8:	2200      	movs	r2, #0
 80116ba:	f7ee ffa5 	bl	8000608 <__aeabi_dmul>
 80116be:	4b2e      	ldr	r3, [pc, #184]	; (8011778 <_dtoa_r+0x648>)
 80116c0:	ec41 0b19 	vmov	d9, r0, r1
 80116c4:	2200      	movs	r2, #0
 80116c6:	4640      	mov	r0, r8
 80116c8:	4649      	mov	r1, r9
 80116ca:	f7ee ff9d 	bl	8000608 <__aeabi_dmul>
 80116ce:	4680      	mov	r8, r0
 80116d0:	4689      	mov	r9, r1
 80116d2:	e7c5      	b.n	8011660 <_dtoa_r+0x530>
 80116d4:	ec51 0b17 	vmov	r0, r1, d7
 80116d8:	f7ee ff96 	bl	8000608 <__aeabi_dmul>
 80116dc:	9b02      	ldr	r3, [sp, #8]
 80116de:	9d00      	ldr	r5, [sp, #0]
 80116e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80116e2:	ec41 0b19 	vmov	d9, r0, r1
 80116e6:	4649      	mov	r1, r9
 80116e8:	4640      	mov	r0, r8
 80116ea:	f7ef fa3d 	bl	8000b68 <__aeabi_d2iz>
 80116ee:	4606      	mov	r6, r0
 80116f0:	f7ee ff20 	bl	8000534 <__aeabi_i2d>
 80116f4:	3630      	adds	r6, #48	; 0x30
 80116f6:	4602      	mov	r2, r0
 80116f8:	460b      	mov	r3, r1
 80116fa:	4640      	mov	r0, r8
 80116fc:	4649      	mov	r1, r9
 80116fe:	f7ee fdcb 	bl	8000298 <__aeabi_dsub>
 8011702:	f805 6b01 	strb.w	r6, [r5], #1
 8011706:	9b02      	ldr	r3, [sp, #8]
 8011708:	429d      	cmp	r5, r3
 801170a:	4680      	mov	r8, r0
 801170c:	4689      	mov	r9, r1
 801170e:	f04f 0200 	mov.w	r2, #0
 8011712:	d124      	bne.n	801175e <_dtoa_r+0x62e>
 8011714:	4b1b      	ldr	r3, [pc, #108]	; (8011784 <_dtoa_r+0x654>)
 8011716:	ec51 0b19 	vmov	r0, r1, d9
 801171a:	f7ee fdbf 	bl	800029c <__adddf3>
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	4640      	mov	r0, r8
 8011724:	4649      	mov	r1, r9
 8011726:	f7ef f9ff 	bl	8000b28 <__aeabi_dcmpgt>
 801172a:	2800      	cmp	r0, #0
 801172c:	d173      	bne.n	8011816 <_dtoa_r+0x6e6>
 801172e:	ec53 2b19 	vmov	r2, r3, d9
 8011732:	4914      	ldr	r1, [pc, #80]	; (8011784 <_dtoa_r+0x654>)
 8011734:	2000      	movs	r0, #0
 8011736:	f7ee fdaf 	bl	8000298 <__aeabi_dsub>
 801173a:	4602      	mov	r2, r0
 801173c:	460b      	mov	r3, r1
 801173e:	4640      	mov	r0, r8
 8011740:	4649      	mov	r1, r9
 8011742:	f7ef f9d3 	bl	8000aec <__aeabi_dcmplt>
 8011746:	2800      	cmp	r0, #0
 8011748:	f43f af2f 	beq.w	80115aa <_dtoa_r+0x47a>
 801174c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801174e:	1e6b      	subs	r3, r5, #1
 8011750:	930f      	str	r3, [sp, #60]	; 0x3c
 8011752:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011756:	2b30      	cmp	r3, #48	; 0x30
 8011758:	d0f8      	beq.n	801174c <_dtoa_r+0x61c>
 801175a:	46bb      	mov	fp, r7
 801175c:	e04a      	b.n	80117f4 <_dtoa_r+0x6c4>
 801175e:	4b06      	ldr	r3, [pc, #24]	; (8011778 <_dtoa_r+0x648>)
 8011760:	f7ee ff52 	bl	8000608 <__aeabi_dmul>
 8011764:	4680      	mov	r8, r0
 8011766:	4689      	mov	r9, r1
 8011768:	e7bd      	b.n	80116e6 <_dtoa_r+0x5b6>
 801176a:	bf00      	nop
 801176c:	080164d0 	.word	0x080164d0
 8011770:	080164a8 	.word	0x080164a8
 8011774:	3ff00000 	.word	0x3ff00000
 8011778:	40240000 	.word	0x40240000
 801177c:	401c0000 	.word	0x401c0000
 8011780:	40140000 	.word	0x40140000
 8011784:	3fe00000 	.word	0x3fe00000
 8011788:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801178c:	9d00      	ldr	r5, [sp, #0]
 801178e:	4642      	mov	r2, r8
 8011790:	464b      	mov	r3, r9
 8011792:	4630      	mov	r0, r6
 8011794:	4639      	mov	r1, r7
 8011796:	f7ef f861 	bl	800085c <__aeabi_ddiv>
 801179a:	f7ef f9e5 	bl	8000b68 <__aeabi_d2iz>
 801179e:	9001      	str	r0, [sp, #4]
 80117a0:	f7ee fec8 	bl	8000534 <__aeabi_i2d>
 80117a4:	4642      	mov	r2, r8
 80117a6:	464b      	mov	r3, r9
 80117a8:	f7ee ff2e 	bl	8000608 <__aeabi_dmul>
 80117ac:	4602      	mov	r2, r0
 80117ae:	460b      	mov	r3, r1
 80117b0:	4630      	mov	r0, r6
 80117b2:	4639      	mov	r1, r7
 80117b4:	f7ee fd70 	bl	8000298 <__aeabi_dsub>
 80117b8:	9e01      	ldr	r6, [sp, #4]
 80117ba:	9f04      	ldr	r7, [sp, #16]
 80117bc:	3630      	adds	r6, #48	; 0x30
 80117be:	f805 6b01 	strb.w	r6, [r5], #1
 80117c2:	9e00      	ldr	r6, [sp, #0]
 80117c4:	1bae      	subs	r6, r5, r6
 80117c6:	42b7      	cmp	r7, r6
 80117c8:	4602      	mov	r2, r0
 80117ca:	460b      	mov	r3, r1
 80117cc:	d134      	bne.n	8011838 <_dtoa_r+0x708>
 80117ce:	f7ee fd65 	bl	800029c <__adddf3>
 80117d2:	4642      	mov	r2, r8
 80117d4:	464b      	mov	r3, r9
 80117d6:	4606      	mov	r6, r0
 80117d8:	460f      	mov	r7, r1
 80117da:	f7ef f9a5 	bl	8000b28 <__aeabi_dcmpgt>
 80117de:	b9c8      	cbnz	r0, 8011814 <_dtoa_r+0x6e4>
 80117e0:	4642      	mov	r2, r8
 80117e2:	464b      	mov	r3, r9
 80117e4:	4630      	mov	r0, r6
 80117e6:	4639      	mov	r1, r7
 80117e8:	f7ef f976 	bl	8000ad8 <__aeabi_dcmpeq>
 80117ec:	b110      	cbz	r0, 80117f4 <_dtoa_r+0x6c4>
 80117ee:	9b01      	ldr	r3, [sp, #4]
 80117f0:	07db      	lsls	r3, r3, #31
 80117f2:	d40f      	bmi.n	8011814 <_dtoa_r+0x6e4>
 80117f4:	4651      	mov	r1, sl
 80117f6:	4620      	mov	r0, r4
 80117f8:	f000 fb18 	bl	8011e2c <_Bfree>
 80117fc:	2300      	movs	r3, #0
 80117fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011800:	702b      	strb	r3, [r5, #0]
 8011802:	f10b 0301 	add.w	r3, fp, #1
 8011806:	6013      	str	r3, [r2, #0]
 8011808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801180a:	2b00      	cmp	r3, #0
 801180c:	f43f ace2 	beq.w	80111d4 <_dtoa_r+0xa4>
 8011810:	601d      	str	r5, [r3, #0]
 8011812:	e4df      	b.n	80111d4 <_dtoa_r+0xa4>
 8011814:	465f      	mov	r7, fp
 8011816:	462b      	mov	r3, r5
 8011818:	461d      	mov	r5, r3
 801181a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801181e:	2a39      	cmp	r2, #57	; 0x39
 8011820:	d106      	bne.n	8011830 <_dtoa_r+0x700>
 8011822:	9a00      	ldr	r2, [sp, #0]
 8011824:	429a      	cmp	r2, r3
 8011826:	d1f7      	bne.n	8011818 <_dtoa_r+0x6e8>
 8011828:	9900      	ldr	r1, [sp, #0]
 801182a:	2230      	movs	r2, #48	; 0x30
 801182c:	3701      	adds	r7, #1
 801182e:	700a      	strb	r2, [r1, #0]
 8011830:	781a      	ldrb	r2, [r3, #0]
 8011832:	3201      	adds	r2, #1
 8011834:	701a      	strb	r2, [r3, #0]
 8011836:	e790      	b.n	801175a <_dtoa_r+0x62a>
 8011838:	4ba3      	ldr	r3, [pc, #652]	; (8011ac8 <_dtoa_r+0x998>)
 801183a:	2200      	movs	r2, #0
 801183c:	f7ee fee4 	bl	8000608 <__aeabi_dmul>
 8011840:	2200      	movs	r2, #0
 8011842:	2300      	movs	r3, #0
 8011844:	4606      	mov	r6, r0
 8011846:	460f      	mov	r7, r1
 8011848:	f7ef f946 	bl	8000ad8 <__aeabi_dcmpeq>
 801184c:	2800      	cmp	r0, #0
 801184e:	d09e      	beq.n	801178e <_dtoa_r+0x65e>
 8011850:	e7d0      	b.n	80117f4 <_dtoa_r+0x6c4>
 8011852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011854:	2a00      	cmp	r2, #0
 8011856:	f000 80ca 	beq.w	80119ee <_dtoa_r+0x8be>
 801185a:	9a07      	ldr	r2, [sp, #28]
 801185c:	2a01      	cmp	r2, #1
 801185e:	f300 80ad 	bgt.w	80119bc <_dtoa_r+0x88c>
 8011862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011864:	2a00      	cmp	r2, #0
 8011866:	f000 80a5 	beq.w	80119b4 <_dtoa_r+0x884>
 801186a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801186e:	9e08      	ldr	r6, [sp, #32]
 8011870:	9d05      	ldr	r5, [sp, #20]
 8011872:	9a05      	ldr	r2, [sp, #20]
 8011874:	441a      	add	r2, r3
 8011876:	9205      	str	r2, [sp, #20]
 8011878:	9a06      	ldr	r2, [sp, #24]
 801187a:	2101      	movs	r1, #1
 801187c:	441a      	add	r2, r3
 801187e:	4620      	mov	r0, r4
 8011880:	9206      	str	r2, [sp, #24]
 8011882:	f000 fbd3 	bl	801202c <__i2b>
 8011886:	4607      	mov	r7, r0
 8011888:	b165      	cbz	r5, 80118a4 <_dtoa_r+0x774>
 801188a:	9b06      	ldr	r3, [sp, #24]
 801188c:	2b00      	cmp	r3, #0
 801188e:	dd09      	ble.n	80118a4 <_dtoa_r+0x774>
 8011890:	42ab      	cmp	r3, r5
 8011892:	9a05      	ldr	r2, [sp, #20]
 8011894:	bfa8      	it	ge
 8011896:	462b      	movge	r3, r5
 8011898:	1ad2      	subs	r2, r2, r3
 801189a:	9205      	str	r2, [sp, #20]
 801189c:	9a06      	ldr	r2, [sp, #24]
 801189e:	1aed      	subs	r5, r5, r3
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	9306      	str	r3, [sp, #24]
 80118a4:	9b08      	ldr	r3, [sp, #32]
 80118a6:	b1f3      	cbz	r3, 80118e6 <_dtoa_r+0x7b6>
 80118a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	f000 80a3 	beq.w	80119f6 <_dtoa_r+0x8c6>
 80118b0:	2e00      	cmp	r6, #0
 80118b2:	dd10      	ble.n	80118d6 <_dtoa_r+0x7a6>
 80118b4:	4639      	mov	r1, r7
 80118b6:	4632      	mov	r2, r6
 80118b8:	4620      	mov	r0, r4
 80118ba:	f000 fc77 	bl	80121ac <__pow5mult>
 80118be:	4652      	mov	r2, sl
 80118c0:	4601      	mov	r1, r0
 80118c2:	4607      	mov	r7, r0
 80118c4:	4620      	mov	r0, r4
 80118c6:	f000 fbc7 	bl	8012058 <__multiply>
 80118ca:	4651      	mov	r1, sl
 80118cc:	4680      	mov	r8, r0
 80118ce:	4620      	mov	r0, r4
 80118d0:	f000 faac 	bl	8011e2c <_Bfree>
 80118d4:	46c2      	mov	sl, r8
 80118d6:	9b08      	ldr	r3, [sp, #32]
 80118d8:	1b9a      	subs	r2, r3, r6
 80118da:	d004      	beq.n	80118e6 <_dtoa_r+0x7b6>
 80118dc:	4651      	mov	r1, sl
 80118de:	4620      	mov	r0, r4
 80118e0:	f000 fc64 	bl	80121ac <__pow5mult>
 80118e4:	4682      	mov	sl, r0
 80118e6:	2101      	movs	r1, #1
 80118e8:	4620      	mov	r0, r4
 80118ea:	f000 fb9f 	bl	801202c <__i2b>
 80118ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	4606      	mov	r6, r0
 80118f4:	f340 8081 	ble.w	80119fa <_dtoa_r+0x8ca>
 80118f8:	461a      	mov	r2, r3
 80118fa:	4601      	mov	r1, r0
 80118fc:	4620      	mov	r0, r4
 80118fe:	f000 fc55 	bl	80121ac <__pow5mult>
 8011902:	9b07      	ldr	r3, [sp, #28]
 8011904:	2b01      	cmp	r3, #1
 8011906:	4606      	mov	r6, r0
 8011908:	dd7a      	ble.n	8011a00 <_dtoa_r+0x8d0>
 801190a:	f04f 0800 	mov.w	r8, #0
 801190e:	6933      	ldr	r3, [r6, #16]
 8011910:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011914:	6918      	ldr	r0, [r3, #16]
 8011916:	f000 fb3b 	bl	8011f90 <__hi0bits>
 801191a:	f1c0 0020 	rsb	r0, r0, #32
 801191e:	9b06      	ldr	r3, [sp, #24]
 8011920:	4418      	add	r0, r3
 8011922:	f010 001f 	ands.w	r0, r0, #31
 8011926:	f000 8094 	beq.w	8011a52 <_dtoa_r+0x922>
 801192a:	f1c0 0320 	rsb	r3, r0, #32
 801192e:	2b04      	cmp	r3, #4
 8011930:	f340 8085 	ble.w	8011a3e <_dtoa_r+0x90e>
 8011934:	9b05      	ldr	r3, [sp, #20]
 8011936:	f1c0 001c 	rsb	r0, r0, #28
 801193a:	4403      	add	r3, r0
 801193c:	9305      	str	r3, [sp, #20]
 801193e:	9b06      	ldr	r3, [sp, #24]
 8011940:	4403      	add	r3, r0
 8011942:	4405      	add	r5, r0
 8011944:	9306      	str	r3, [sp, #24]
 8011946:	9b05      	ldr	r3, [sp, #20]
 8011948:	2b00      	cmp	r3, #0
 801194a:	dd05      	ble.n	8011958 <_dtoa_r+0x828>
 801194c:	4651      	mov	r1, sl
 801194e:	461a      	mov	r2, r3
 8011950:	4620      	mov	r0, r4
 8011952:	f000 fc85 	bl	8012260 <__lshift>
 8011956:	4682      	mov	sl, r0
 8011958:	9b06      	ldr	r3, [sp, #24]
 801195a:	2b00      	cmp	r3, #0
 801195c:	dd05      	ble.n	801196a <_dtoa_r+0x83a>
 801195e:	4631      	mov	r1, r6
 8011960:	461a      	mov	r2, r3
 8011962:	4620      	mov	r0, r4
 8011964:	f000 fc7c 	bl	8012260 <__lshift>
 8011968:	4606      	mov	r6, r0
 801196a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801196c:	2b00      	cmp	r3, #0
 801196e:	d072      	beq.n	8011a56 <_dtoa_r+0x926>
 8011970:	4631      	mov	r1, r6
 8011972:	4650      	mov	r0, sl
 8011974:	f000 fce0 	bl	8012338 <__mcmp>
 8011978:	2800      	cmp	r0, #0
 801197a:	da6c      	bge.n	8011a56 <_dtoa_r+0x926>
 801197c:	2300      	movs	r3, #0
 801197e:	4651      	mov	r1, sl
 8011980:	220a      	movs	r2, #10
 8011982:	4620      	mov	r0, r4
 8011984:	f000 fa74 	bl	8011e70 <__multadd>
 8011988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801198a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801198e:	4682      	mov	sl, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	f000 81b0 	beq.w	8011cf6 <_dtoa_r+0xbc6>
 8011996:	2300      	movs	r3, #0
 8011998:	4639      	mov	r1, r7
 801199a:	220a      	movs	r2, #10
 801199c:	4620      	mov	r0, r4
 801199e:	f000 fa67 	bl	8011e70 <__multadd>
 80119a2:	9b01      	ldr	r3, [sp, #4]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	4607      	mov	r7, r0
 80119a8:	f300 8096 	bgt.w	8011ad8 <_dtoa_r+0x9a8>
 80119ac:	9b07      	ldr	r3, [sp, #28]
 80119ae:	2b02      	cmp	r3, #2
 80119b0:	dc59      	bgt.n	8011a66 <_dtoa_r+0x936>
 80119b2:	e091      	b.n	8011ad8 <_dtoa_r+0x9a8>
 80119b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80119b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80119ba:	e758      	b.n	801186e <_dtoa_r+0x73e>
 80119bc:	9b04      	ldr	r3, [sp, #16]
 80119be:	1e5e      	subs	r6, r3, #1
 80119c0:	9b08      	ldr	r3, [sp, #32]
 80119c2:	42b3      	cmp	r3, r6
 80119c4:	bfbf      	itttt	lt
 80119c6:	9b08      	ldrlt	r3, [sp, #32]
 80119c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80119ca:	9608      	strlt	r6, [sp, #32]
 80119cc:	1af3      	sublt	r3, r6, r3
 80119ce:	bfb4      	ite	lt
 80119d0:	18d2      	addlt	r2, r2, r3
 80119d2:	1b9e      	subge	r6, r3, r6
 80119d4:	9b04      	ldr	r3, [sp, #16]
 80119d6:	bfbc      	itt	lt
 80119d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80119da:	2600      	movlt	r6, #0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	bfb7      	itett	lt
 80119e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80119e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80119e8:	1a9d      	sublt	r5, r3, r2
 80119ea:	2300      	movlt	r3, #0
 80119ec:	e741      	b.n	8011872 <_dtoa_r+0x742>
 80119ee:	9e08      	ldr	r6, [sp, #32]
 80119f0:	9d05      	ldr	r5, [sp, #20]
 80119f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80119f4:	e748      	b.n	8011888 <_dtoa_r+0x758>
 80119f6:	9a08      	ldr	r2, [sp, #32]
 80119f8:	e770      	b.n	80118dc <_dtoa_r+0x7ac>
 80119fa:	9b07      	ldr	r3, [sp, #28]
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	dc19      	bgt.n	8011a34 <_dtoa_r+0x904>
 8011a00:	9b02      	ldr	r3, [sp, #8]
 8011a02:	b9bb      	cbnz	r3, 8011a34 <_dtoa_r+0x904>
 8011a04:	9b03      	ldr	r3, [sp, #12]
 8011a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a0a:	b99b      	cbnz	r3, 8011a34 <_dtoa_r+0x904>
 8011a0c:	9b03      	ldr	r3, [sp, #12]
 8011a0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a12:	0d1b      	lsrs	r3, r3, #20
 8011a14:	051b      	lsls	r3, r3, #20
 8011a16:	b183      	cbz	r3, 8011a3a <_dtoa_r+0x90a>
 8011a18:	9b05      	ldr	r3, [sp, #20]
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	9305      	str	r3, [sp, #20]
 8011a1e:	9b06      	ldr	r3, [sp, #24]
 8011a20:	3301      	adds	r3, #1
 8011a22:	9306      	str	r3, [sp, #24]
 8011a24:	f04f 0801 	mov.w	r8, #1
 8011a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f47f af6f 	bne.w	801190e <_dtoa_r+0x7de>
 8011a30:	2001      	movs	r0, #1
 8011a32:	e774      	b.n	801191e <_dtoa_r+0x7ee>
 8011a34:	f04f 0800 	mov.w	r8, #0
 8011a38:	e7f6      	b.n	8011a28 <_dtoa_r+0x8f8>
 8011a3a:	4698      	mov	r8, r3
 8011a3c:	e7f4      	b.n	8011a28 <_dtoa_r+0x8f8>
 8011a3e:	d082      	beq.n	8011946 <_dtoa_r+0x816>
 8011a40:	9a05      	ldr	r2, [sp, #20]
 8011a42:	331c      	adds	r3, #28
 8011a44:	441a      	add	r2, r3
 8011a46:	9205      	str	r2, [sp, #20]
 8011a48:	9a06      	ldr	r2, [sp, #24]
 8011a4a:	441a      	add	r2, r3
 8011a4c:	441d      	add	r5, r3
 8011a4e:	9206      	str	r2, [sp, #24]
 8011a50:	e779      	b.n	8011946 <_dtoa_r+0x816>
 8011a52:	4603      	mov	r3, r0
 8011a54:	e7f4      	b.n	8011a40 <_dtoa_r+0x910>
 8011a56:	9b04      	ldr	r3, [sp, #16]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	dc37      	bgt.n	8011acc <_dtoa_r+0x99c>
 8011a5c:	9b07      	ldr	r3, [sp, #28]
 8011a5e:	2b02      	cmp	r3, #2
 8011a60:	dd34      	ble.n	8011acc <_dtoa_r+0x99c>
 8011a62:	9b04      	ldr	r3, [sp, #16]
 8011a64:	9301      	str	r3, [sp, #4]
 8011a66:	9b01      	ldr	r3, [sp, #4]
 8011a68:	b963      	cbnz	r3, 8011a84 <_dtoa_r+0x954>
 8011a6a:	4631      	mov	r1, r6
 8011a6c:	2205      	movs	r2, #5
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f000 f9fe 	bl	8011e70 <__multadd>
 8011a74:	4601      	mov	r1, r0
 8011a76:	4606      	mov	r6, r0
 8011a78:	4650      	mov	r0, sl
 8011a7a:	f000 fc5d 	bl	8012338 <__mcmp>
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	f73f adbb 	bgt.w	80115fa <_dtoa_r+0x4ca>
 8011a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a86:	9d00      	ldr	r5, [sp, #0]
 8011a88:	ea6f 0b03 	mvn.w	fp, r3
 8011a8c:	f04f 0800 	mov.w	r8, #0
 8011a90:	4631      	mov	r1, r6
 8011a92:	4620      	mov	r0, r4
 8011a94:	f000 f9ca 	bl	8011e2c <_Bfree>
 8011a98:	2f00      	cmp	r7, #0
 8011a9a:	f43f aeab 	beq.w	80117f4 <_dtoa_r+0x6c4>
 8011a9e:	f1b8 0f00 	cmp.w	r8, #0
 8011aa2:	d005      	beq.n	8011ab0 <_dtoa_r+0x980>
 8011aa4:	45b8      	cmp	r8, r7
 8011aa6:	d003      	beq.n	8011ab0 <_dtoa_r+0x980>
 8011aa8:	4641      	mov	r1, r8
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f000 f9be 	bl	8011e2c <_Bfree>
 8011ab0:	4639      	mov	r1, r7
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f000 f9ba 	bl	8011e2c <_Bfree>
 8011ab8:	e69c      	b.n	80117f4 <_dtoa_r+0x6c4>
 8011aba:	2600      	movs	r6, #0
 8011abc:	4637      	mov	r7, r6
 8011abe:	e7e1      	b.n	8011a84 <_dtoa_r+0x954>
 8011ac0:	46bb      	mov	fp, r7
 8011ac2:	4637      	mov	r7, r6
 8011ac4:	e599      	b.n	80115fa <_dtoa_r+0x4ca>
 8011ac6:	bf00      	nop
 8011ac8:	40240000 	.word	0x40240000
 8011acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	f000 80c8 	beq.w	8011c64 <_dtoa_r+0xb34>
 8011ad4:	9b04      	ldr	r3, [sp, #16]
 8011ad6:	9301      	str	r3, [sp, #4]
 8011ad8:	2d00      	cmp	r5, #0
 8011ada:	dd05      	ble.n	8011ae8 <_dtoa_r+0x9b8>
 8011adc:	4639      	mov	r1, r7
 8011ade:	462a      	mov	r2, r5
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f000 fbbd 	bl	8012260 <__lshift>
 8011ae6:	4607      	mov	r7, r0
 8011ae8:	f1b8 0f00 	cmp.w	r8, #0
 8011aec:	d05b      	beq.n	8011ba6 <_dtoa_r+0xa76>
 8011aee:	6879      	ldr	r1, [r7, #4]
 8011af0:	4620      	mov	r0, r4
 8011af2:	f000 f95b 	bl	8011dac <_Balloc>
 8011af6:	4605      	mov	r5, r0
 8011af8:	b928      	cbnz	r0, 8011b06 <_dtoa_r+0x9d6>
 8011afa:	4b83      	ldr	r3, [pc, #524]	; (8011d08 <_dtoa_r+0xbd8>)
 8011afc:	4602      	mov	r2, r0
 8011afe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011b02:	f7ff bb2e 	b.w	8011162 <_dtoa_r+0x32>
 8011b06:	693a      	ldr	r2, [r7, #16]
 8011b08:	3202      	adds	r2, #2
 8011b0a:	0092      	lsls	r2, r2, #2
 8011b0c:	f107 010c 	add.w	r1, r7, #12
 8011b10:	300c      	adds	r0, #12
 8011b12:	f002 fa54 	bl	8013fbe <memcpy>
 8011b16:	2201      	movs	r2, #1
 8011b18:	4629      	mov	r1, r5
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	f000 fba0 	bl	8012260 <__lshift>
 8011b20:	9b00      	ldr	r3, [sp, #0]
 8011b22:	3301      	adds	r3, #1
 8011b24:	9304      	str	r3, [sp, #16]
 8011b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b2a:	4413      	add	r3, r2
 8011b2c:	9308      	str	r3, [sp, #32]
 8011b2e:	9b02      	ldr	r3, [sp, #8]
 8011b30:	f003 0301 	and.w	r3, r3, #1
 8011b34:	46b8      	mov	r8, r7
 8011b36:	9306      	str	r3, [sp, #24]
 8011b38:	4607      	mov	r7, r0
 8011b3a:	9b04      	ldr	r3, [sp, #16]
 8011b3c:	4631      	mov	r1, r6
 8011b3e:	3b01      	subs	r3, #1
 8011b40:	4650      	mov	r0, sl
 8011b42:	9301      	str	r3, [sp, #4]
 8011b44:	f7ff fa6c 	bl	8011020 <quorem>
 8011b48:	4641      	mov	r1, r8
 8011b4a:	9002      	str	r0, [sp, #8]
 8011b4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011b50:	4650      	mov	r0, sl
 8011b52:	f000 fbf1 	bl	8012338 <__mcmp>
 8011b56:	463a      	mov	r2, r7
 8011b58:	9005      	str	r0, [sp, #20]
 8011b5a:	4631      	mov	r1, r6
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	f000 fc07 	bl	8012370 <__mdiff>
 8011b62:	68c2      	ldr	r2, [r0, #12]
 8011b64:	4605      	mov	r5, r0
 8011b66:	bb02      	cbnz	r2, 8011baa <_dtoa_r+0xa7a>
 8011b68:	4601      	mov	r1, r0
 8011b6a:	4650      	mov	r0, sl
 8011b6c:	f000 fbe4 	bl	8012338 <__mcmp>
 8011b70:	4602      	mov	r2, r0
 8011b72:	4629      	mov	r1, r5
 8011b74:	4620      	mov	r0, r4
 8011b76:	9209      	str	r2, [sp, #36]	; 0x24
 8011b78:	f000 f958 	bl	8011e2c <_Bfree>
 8011b7c:	9b07      	ldr	r3, [sp, #28]
 8011b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b80:	9d04      	ldr	r5, [sp, #16]
 8011b82:	ea43 0102 	orr.w	r1, r3, r2
 8011b86:	9b06      	ldr	r3, [sp, #24]
 8011b88:	4319      	orrs	r1, r3
 8011b8a:	d110      	bne.n	8011bae <_dtoa_r+0xa7e>
 8011b8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011b90:	d029      	beq.n	8011be6 <_dtoa_r+0xab6>
 8011b92:	9b05      	ldr	r3, [sp, #20]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	dd02      	ble.n	8011b9e <_dtoa_r+0xa6e>
 8011b98:	9b02      	ldr	r3, [sp, #8]
 8011b9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011b9e:	9b01      	ldr	r3, [sp, #4]
 8011ba0:	f883 9000 	strb.w	r9, [r3]
 8011ba4:	e774      	b.n	8011a90 <_dtoa_r+0x960>
 8011ba6:	4638      	mov	r0, r7
 8011ba8:	e7ba      	b.n	8011b20 <_dtoa_r+0x9f0>
 8011baa:	2201      	movs	r2, #1
 8011bac:	e7e1      	b.n	8011b72 <_dtoa_r+0xa42>
 8011bae:	9b05      	ldr	r3, [sp, #20]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	db04      	blt.n	8011bbe <_dtoa_r+0xa8e>
 8011bb4:	9907      	ldr	r1, [sp, #28]
 8011bb6:	430b      	orrs	r3, r1
 8011bb8:	9906      	ldr	r1, [sp, #24]
 8011bba:	430b      	orrs	r3, r1
 8011bbc:	d120      	bne.n	8011c00 <_dtoa_r+0xad0>
 8011bbe:	2a00      	cmp	r2, #0
 8011bc0:	dded      	ble.n	8011b9e <_dtoa_r+0xa6e>
 8011bc2:	4651      	mov	r1, sl
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f000 fb4a 	bl	8012260 <__lshift>
 8011bcc:	4631      	mov	r1, r6
 8011bce:	4682      	mov	sl, r0
 8011bd0:	f000 fbb2 	bl	8012338 <__mcmp>
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	dc03      	bgt.n	8011be0 <_dtoa_r+0xab0>
 8011bd8:	d1e1      	bne.n	8011b9e <_dtoa_r+0xa6e>
 8011bda:	f019 0f01 	tst.w	r9, #1
 8011bde:	d0de      	beq.n	8011b9e <_dtoa_r+0xa6e>
 8011be0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011be4:	d1d8      	bne.n	8011b98 <_dtoa_r+0xa68>
 8011be6:	9a01      	ldr	r2, [sp, #4]
 8011be8:	2339      	movs	r3, #57	; 0x39
 8011bea:	7013      	strb	r3, [r2, #0]
 8011bec:	462b      	mov	r3, r5
 8011bee:	461d      	mov	r5, r3
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011bf6:	2a39      	cmp	r2, #57	; 0x39
 8011bf8:	d06c      	beq.n	8011cd4 <_dtoa_r+0xba4>
 8011bfa:	3201      	adds	r2, #1
 8011bfc:	701a      	strb	r2, [r3, #0]
 8011bfe:	e747      	b.n	8011a90 <_dtoa_r+0x960>
 8011c00:	2a00      	cmp	r2, #0
 8011c02:	dd07      	ble.n	8011c14 <_dtoa_r+0xae4>
 8011c04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011c08:	d0ed      	beq.n	8011be6 <_dtoa_r+0xab6>
 8011c0a:	9a01      	ldr	r2, [sp, #4]
 8011c0c:	f109 0301 	add.w	r3, r9, #1
 8011c10:	7013      	strb	r3, [r2, #0]
 8011c12:	e73d      	b.n	8011a90 <_dtoa_r+0x960>
 8011c14:	9b04      	ldr	r3, [sp, #16]
 8011c16:	9a08      	ldr	r2, [sp, #32]
 8011c18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	d043      	beq.n	8011ca8 <_dtoa_r+0xb78>
 8011c20:	4651      	mov	r1, sl
 8011c22:	2300      	movs	r3, #0
 8011c24:	220a      	movs	r2, #10
 8011c26:	4620      	mov	r0, r4
 8011c28:	f000 f922 	bl	8011e70 <__multadd>
 8011c2c:	45b8      	cmp	r8, r7
 8011c2e:	4682      	mov	sl, r0
 8011c30:	f04f 0300 	mov.w	r3, #0
 8011c34:	f04f 020a 	mov.w	r2, #10
 8011c38:	4641      	mov	r1, r8
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	d107      	bne.n	8011c4e <_dtoa_r+0xb1e>
 8011c3e:	f000 f917 	bl	8011e70 <__multadd>
 8011c42:	4680      	mov	r8, r0
 8011c44:	4607      	mov	r7, r0
 8011c46:	9b04      	ldr	r3, [sp, #16]
 8011c48:	3301      	adds	r3, #1
 8011c4a:	9304      	str	r3, [sp, #16]
 8011c4c:	e775      	b.n	8011b3a <_dtoa_r+0xa0a>
 8011c4e:	f000 f90f 	bl	8011e70 <__multadd>
 8011c52:	4639      	mov	r1, r7
 8011c54:	4680      	mov	r8, r0
 8011c56:	2300      	movs	r3, #0
 8011c58:	220a      	movs	r2, #10
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	f000 f908 	bl	8011e70 <__multadd>
 8011c60:	4607      	mov	r7, r0
 8011c62:	e7f0      	b.n	8011c46 <_dtoa_r+0xb16>
 8011c64:	9b04      	ldr	r3, [sp, #16]
 8011c66:	9301      	str	r3, [sp, #4]
 8011c68:	9d00      	ldr	r5, [sp, #0]
 8011c6a:	4631      	mov	r1, r6
 8011c6c:	4650      	mov	r0, sl
 8011c6e:	f7ff f9d7 	bl	8011020 <quorem>
 8011c72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011c76:	9b00      	ldr	r3, [sp, #0]
 8011c78:	f805 9b01 	strb.w	r9, [r5], #1
 8011c7c:	1aea      	subs	r2, r5, r3
 8011c7e:	9b01      	ldr	r3, [sp, #4]
 8011c80:	4293      	cmp	r3, r2
 8011c82:	dd07      	ble.n	8011c94 <_dtoa_r+0xb64>
 8011c84:	4651      	mov	r1, sl
 8011c86:	2300      	movs	r3, #0
 8011c88:	220a      	movs	r2, #10
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	f000 f8f0 	bl	8011e70 <__multadd>
 8011c90:	4682      	mov	sl, r0
 8011c92:	e7ea      	b.n	8011c6a <_dtoa_r+0xb3a>
 8011c94:	9b01      	ldr	r3, [sp, #4]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	bfc8      	it	gt
 8011c9a:	461d      	movgt	r5, r3
 8011c9c:	9b00      	ldr	r3, [sp, #0]
 8011c9e:	bfd8      	it	le
 8011ca0:	2501      	movle	r5, #1
 8011ca2:	441d      	add	r5, r3
 8011ca4:	f04f 0800 	mov.w	r8, #0
 8011ca8:	4651      	mov	r1, sl
 8011caa:	2201      	movs	r2, #1
 8011cac:	4620      	mov	r0, r4
 8011cae:	f000 fad7 	bl	8012260 <__lshift>
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4682      	mov	sl, r0
 8011cb6:	f000 fb3f 	bl	8012338 <__mcmp>
 8011cba:	2800      	cmp	r0, #0
 8011cbc:	dc96      	bgt.n	8011bec <_dtoa_r+0xabc>
 8011cbe:	d102      	bne.n	8011cc6 <_dtoa_r+0xb96>
 8011cc0:	f019 0f01 	tst.w	r9, #1
 8011cc4:	d192      	bne.n	8011bec <_dtoa_r+0xabc>
 8011cc6:	462b      	mov	r3, r5
 8011cc8:	461d      	mov	r5, r3
 8011cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cce:	2a30      	cmp	r2, #48	; 0x30
 8011cd0:	d0fa      	beq.n	8011cc8 <_dtoa_r+0xb98>
 8011cd2:	e6dd      	b.n	8011a90 <_dtoa_r+0x960>
 8011cd4:	9a00      	ldr	r2, [sp, #0]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d189      	bne.n	8011bee <_dtoa_r+0xabe>
 8011cda:	f10b 0b01 	add.w	fp, fp, #1
 8011cde:	2331      	movs	r3, #49	; 0x31
 8011ce0:	e796      	b.n	8011c10 <_dtoa_r+0xae0>
 8011ce2:	4b0a      	ldr	r3, [pc, #40]	; (8011d0c <_dtoa_r+0xbdc>)
 8011ce4:	f7ff ba99 	b.w	801121a <_dtoa_r+0xea>
 8011ce8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	f47f aa6d 	bne.w	80111ca <_dtoa_r+0x9a>
 8011cf0:	4b07      	ldr	r3, [pc, #28]	; (8011d10 <_dtoa_r+0xbe0>)
 8011cf2:	f7ff ba92 	b.w	801121a <_dtoa_r+0xea>
 8011cf6:	9b01      	ldr	r3, [sp, #4]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	dcb5      	bgt.n	8011c68 <_dtoa_r+0xb38>
 8011cfc:	9b07      	ldr	r3, [sp, #28]
 8011cfe:	2b02      	cmp	r3, #2
 8011d00:	f73f aeb1 	bgt.w	8011a66 <_dtoa_r+0x936>
 8011d04:	e7b0      	b.n	8011c68 <_dtoa_r+0xb38>
 8011d06:	bf00      	nop
 8011d08:	0801643b 	.word	0x0801643b
 8011d0c:	08016720 	.word	0x08016720
 8011d10:	080163bf 	.word	0x080163bf

08011d14 <_free_r>:
 8011d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d16:	2900      	cmp	r1, #0
 8011d18:	d044      	beq.n	8011da4 <_free_r+0x90>
 8011d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d1e:	9001      	str	r0, [sp, #4]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	f1a1 0404 	sub.w	r4, r1, #4
 8011d26:	bfb8      	it	lt
 8011d28:	18e4      	addlt	r4, r4, r3
 8011d2a:	f7fe f8d7 	bl	800fedc <__malloc_lock>
 8011d2e:	4a1e      	ldr	r2, [pc, #120]	; (8011da8 <_free_r+0x94>)
 8011d30:	9801      	ldr	r0, [sp, #4]
 8011d32:	6813      	ldr	r3, [r2, #0]
 8011d34:	b933      	cbnz	r3, 8011d44 <_free_r+0x30>
 8011d36:	6063      	str	r3, [r4, #4]
 8011d38:	6014      	str	r4, [r2, #0]
 8011d3a:	b003      	add	sp, #12
 8011d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d40:	f7fe b8d2 	b.w	800fee8 <__malloc_unlock>
 8011d44:	42a3      	cmp	r3, r4
 8011d46:	d908      	bls.n	8011d5a <_free_r+0x46>
 8011d48:	6825      	ldr	r5, [r4, #0]
 8011d4a:	1961      	adds	r1, r4, r5
 8011d4c:	428b      	cmp	r3, r1
 8011d4e:	bf01      	itttt	eq
 8011d50:	6819      	ldreq	r1, [r3, #0]
 8011d52:	685b      	ldreq	r3, [r3, #4]
 8011d54:	1949      	addeq	r1, r1, r5
 8011d56:	6021      	streq	r1, [r4, #0]
 8011d58:	e7ed      	b.n	8011d36 <_free_r+0x22>
 8011d5a:	461a      	mov	r2, r3
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	b10b      	cbz	r3, 8011d64 <_free_r+0x50>
 8011d60:	42a3      	cmp	r3, r4
 8011d62:	d9fa      	bls.n	8011d5a <_free_r+0x46>
 8011d64:	6811      	ldr	r1, [r2, #0]
 8011d66:	1855      	adds	r5, r2, r1
 8011d68:	42a5      	cmp	r5, r4
 8011d6a:	d10b      	bne.n	8011d84 <_free_r+0x70>
 8011d6c:	6824      	ldr	r4, [r4, #0]
 8011d6e:	4421      	add	r1, r4
 8011d70:	1854      	adds	r4, r2, r1
 8011d72:	42a3      	cmp	r3, r4
 8011d74:	6011      	str	r1, [r2, #0]
 8011d76:	d1e0      	bne.n	8011d3a <_free_r+0x26>
 8011d78:	681c      	ldr	r4, [r3, #0]
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	6053      	str	r3, [r2, #4]
 8011d7e:	440c      	add	r4, r1
 8011d80:	6014      	str	r4, [r2, #0]
 8011d82:	e7da      	b.n	8011d3a <_free_r+0x26>
 8011d84:	d902      	bls.n	8011d8c <_free_r+0x78>
 8011d86:	230c      	movs	r3, #12
 8011d88:	6003      	str	r3, [r0, #0]
 8011d8a:	e7d6      	b.n	8011d3a <_free_r+0x26>
 8011d8c:	6825      	ldr	r5, [r4, #0]
 8011d8e:	1961      	adds	r1, r4, r5
 8011d90:	428b      	cmp	r3, r1
 8011d92:	bf04      	itt	eq
 8011d94:	6819      	ldreq	r1, [r3, #0]
 8011d96:	685b      	ldreq	r3, [r3, #4]
 8011d98:	6063      	str	r3, [r4, #4]
 8011d9a:	bf04      	itt	eq
 8011d9c:	1949      	addeq	r1, r1, r5
 8011d9e:	6021      	streq	r1, [r4, #0]
 8011da0:	6054      	str	r4, [r2, #4]
 8011da2:	e7ca      	b.n	8011d3a <_free_r+0x26>
 8011da4:	b003      	add	sp, #12
 8011da6:	bd30      	pop	{r4, r5, pc}
 8011da8:	20004c90 	.word	0x20004c90

08011dac <_Balloc>:
 8011dac:	b570      	push	{r4, r5, r6, lr}
 8011dae:	69c6      	ldr	r6, [r0, #28]
 8011db0:	4604      	mov	r4, r0
 8011db2:	460d      	mov	r5, r1
 8011db4:	b976      	cbnz	r6, 8011dd4 <_Balloc+0x28>
 8011db6:	2010      	movs	r0, #16
 8011db8:	f7fd ffe0 	bl	800fd7c <malloc>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	61e0      	str	r0, [r4, #28]
 8011dc0:	b920      	cbnz	r0, 8011dcc <_Balloc+0x20>
 8011dc2:	4b18      	ldr	r3, [pc, #96]	; (8011e24 <_Balloc+0x78>)
 8011dc4:	4818      	ldr	r0, [pc, #96]	; (8011e28 <_Balloc+0x7c>)
 8011dc6:	216b      	movs	r1, #107	; 0x6b
 8011dc8:	f002 f912 	bl	8013ff0 <__assert_func>
 8011dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011dd0:	6006      	str	r6, [r0, #0]
 8011dd2:	60c6      	str	r6, [r0, #12]
 8011dd4:	69e6      	ldr	r6, [r4, #28]
 8011dd6:	68f3      	ldr	r3, [r6, #12]
 8011dd8:	b183      	cbz	r3, 8011dfc <_Balloc+0x50>
 8011dda:	69e3      	ldr	r3, [r4, #28]
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011de2:	b9b8      	cbnz	r0, 8011e14 <_Balloc+0x68>
 8011de4:	2101      	movs	r1, #1
 8011de6:	fa01 f605 	lsl.w	r6, r1, r5
 8011dea:	1d72      	adds	r2, r6, #5
 8011dec:	0092      	lsls	r2, r2, #2
 8011dee:	4620      	mov	r0, r4
 8011df0:	f002 f91c 	bl	801402c <_calloc_r>
 8011df4:	b160      	cbz	r0, 8011e10 <_Balloc+0x64>
 8011df6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011dfa:	e00e      	b.n	8011e1a <_Balloc+0x6e>
 8011dfc:	2221      	movs	r2, #33	; 0x21
 8011dfe:	2104      	movs	r1, #4
 8011e00:	4620      	mov	r0, r4
 8011e02:	f002 f913 	bl	801402c <_calloc_r>
 8011e06:	69e3      	ldr	r3, [r4, #28]
 8011e08:	60f0      	str	r0, [r6, #12]
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d1e4      	bne.n	8011dda <_Balloc+0x2e>
 8011e10:	2000      	movs	r0, #0
 8011e12:	bd70      	pop	{r4, r5, r6, pc}
 8011e14:	6802      	ldr	r2, [r0, #0]
 8011e16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011e20:	e7f7      	b.n	8011e12 <_Balloc+0x66>
 8011e22:	bf00      	nop
 8011e24:	080163cc 	.word	0x080163cc
 8011e28:	0801644c 	.word	0x0801644c

08011e2c <_Bfree>:
 8011e2c:	b570      	push	{r4, r5, r6, lr}
 8011e2e:	69c6      	ldr	r6, [r0, #28]
 8011e30:	4605      	mov	r5, r0
 8011e32:	460c      	mov	r4, r1
 8011e34:	b976      	cbnz	r6, 8011e54 <_Bfree+0x28>
 8011e36:	2010      	movs	r0, #16
 8011e38:	f7fd ffa0 	bl	800fd7c <malloc>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	61e8      	str	r0, [r5, #28]
 8011e40:	b920      	cbnz	r0, 8011e4c <_Bfree+0x20>
 8011e42:	4b09      	ldr	r3, [pc, #36]	; (8011e68 <_Bfree+0x3c>)
 8011e44:	4809      	ldr	r0, [pc, #36]	; (8011e6c <_Bfree+0x40>)
 8011e46:	218f      	movs	r1, #143	; 0x8f
 8011e48:	f002 f8d2 	bl	8013ff0 <__assert_func>
 8011e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e50:	6006      	str	r6, [r0, #0]
 8011e52:	60c6      	str	r6, [r0, #12]
 8011e54:	b13c      	cbz	r4, 8011e66 <_Bfree+0x3a>
 8011e56:	69eb      	ldr	r3, [r5, #28]
 8011e58:	6862      	ldr	r2, [r4, #4]
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e60:	6021      	str	r1, [r4, #0]
 8011e62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e66:	bd70      	pop	{r4, r5, r6, pc}
 8011e68:	080163cc 	.word	0x080163cc
 8011e6c:	0801644c 	.word	0x0801644c

08011e70 <__multadd>:
 8011e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e74:	690d      	ldr	r5, [r1, #16]
 8011e76:	4607      	mov	r7, r0
 8011e78:	460c      	mov	r4, r1
 8011e7a:	461e      	mov	r6, r3
 8011e7c:	f101 0c14 	add.w	ip, r1, #20
 8011e80:	2000      	movs	r0, #0
 8011e82:	f8dc 3000 	ldr.w	r3, [ip]
 8011e86:	b299      	uxth	r1, r3
 8011e88:	fb02 6101 	mla	r1, r2, r1, r6
 8011e8c:	0c1e      	lsrs	r6, r3, #16
 8011e8e:	0c0b      	lsrs	r3, r1, #16
 8011e90:	fb02 3306 	mla	r3, r2, r6, r3
 8011e94:	b289      	uxth	r1, r1
 8011e96:	3001      	adds	r0, #1
 8011e98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011e9c:	4285      	cmp	r5, r0
 8011e9e:	f84c 1b04 	str.w	r1, [ip], #4
 8011ea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011ea6:	dcec      	bgt.n	8011e82 <__multadd+0x12>
 8011ea8:	b30e      	cbz	r6, 8011eee <__multadd+0x7e>
 8011eaa:	68a3      	ldr	r3, [r4, #8]
 8011eac:	42ab      	cmp	r3, r5
 8011eae:	dc19      	bgt.n	8011ee4 <__multadd+0x74>
 8011eb0:	6861      	ldr	r1, [r4, #4]
 8011eb2:	4638      	mov	r0, r7
 8011eb4:	3101      	adds	r1, #1
 8011eb6:	f7ff ff79 	bl	8011dac <_Balloc>
 8011eba:	4680      	mov	r8, r0
 8011ebc:	b928      	cbnz	r0, 8011eca <__multadd+0x5a>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	4b0c      	ldr	r3, [pc, #48]	; (8011ef4 <__multadd+0x84>)
 8011ec2:	480d      	ldr	r0, [pc, #52]	; (8011ef8 <__multadd+0x88>)
 8011ec4:	21ba      	movs	r1, #186	; 0xba
 8011ec6:	f002 f893 	bl	8013ff0 <__assert_func>
 8011eca:	6922      	ldr	r2, [r4, #16]
 8011ecc:	3202      	adds	r2, #2
 8011ece:	f104 010c 	add.w	r1, r4, #12
 8011ed2:	0092      	lsls	r2, r2, #2
 8011ed4:	300c      	adds	r0, #12
 8011ed6:	f002 f872 	bl	8013fbe <memcpy>
 8011eda:	4621      	mov	r1, r4
 8011edc:	4638      	mov	r0, r7
 8011ede:	f7ff ffa5 	bl	8011e2c <_Bfree>
 8011ee2:	4644      	mov	r4, r8
 8011ee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011ee8:	3501      	adds	r5, #1
 8011eea:	615e      	str	r6, [r3, #20]
 8011eec:	6125      	str	r5, [r4, #16]
 8011eee:	4620      	mov	r0, r4
 8011ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ef4:	0801643b 	.word	0x0801643b
 8011ef8:	0801644c 	.word	0x0801644c

08011efc <__s2b>:
 8011efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f00:	460c      	mov	r4, r1
 8011f02:	4615      	mov	r5, r2
 8011f04:	461f      	mov	r7, r3
 8011f06:	2209      	movs	r2, #9
 8011f08:	3308      	adds	r3, #8
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f10:	2100      	movs	r1, #0
 8011f12:	2201      	movs	r2, #1
 8011f14:	429a      	cmp	r2, r3
 8011f16:	db09      	blt.n	8011f2c <__s2b+0x30>
 8011f18:	4630      	mov	r0, r6
 8011f1a:	f7ff ff47 	bl	8011dac <_Balloc>
 8011f1e:	b940      	cbnz	r0, 8011f32 <__s2b+0x36>
 8011f20:	4602      	mov	r2, r0
 8011f22:	4b19      	ldr	r3, [pc, #100]	; (8011f88 <__s2b+0x8c>)
 8011f24:	4819      	ldr	r0, [pc, #100]	; (8011f8c <__s2b+0x90>)
 8011f26:	21d3      	movs	r1, #211	; 0xd3
 8011f28:	f002 f862 	bl	8013ff0 <__assert_func>
 8011f2c:	0052      	lsls	r2, r2, #1
 8011f2e:	3101      	adds	r1, #1
 8011f30:	e7f0      	b.n	8011f14 <__s2b+0x18>
 8011f32:	9b08      	ldr	r3, [sp, #32]
 8011f34:	6143      	str	r3, [r0, #20]
 8011f36:	2d09      	cmp	r5, #9
 8011f38:	f04f 0301 	mov.w	r3, #1
 8011f3c:	6103      	str	r3, [r0, #16]
 8011f3e:	dd16      	ble.n	8011f6e <__s2b+0x72>
 8011f40:	f104 0909 	add.w	r9, r4, #9
 8011f44:	46c8      	mov	r8, r9
 8011f46:	442c      	add	r4, r5
 8011f48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011f4c:	4601      	mov	r1, r0
 8011f4e:	3b30      	subs	r3, #48	; 0x30
 8011f50:	220a      	movs	r2, #10
 8011f52:	4630      	mov	r0, r6
 8011f54:	f7ff ff8c 	bl	8011e70 <__multadd>
 8011f58:	45a0      	cmp	r8, r4
 8011f5a:	d1f5      	bne.n	8011f48 <__s2b+0x4c>
 8011f5c:	f1a5 0408 	sub.w	r4, r5, #8
 8011f60:	444c      	add	r4, r9
 8011f62:	1b2d      	subs	r5, r5, r4
 8011f64:	1963      	adds	r3, r4, r5
 8011f66:	42bb      	cmp	r3, r7
 8011f68:	db04      	blt.n	8011f74 <__s2b+0x78>
 8011f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f6e:	340a      	adds	r4, #10
 8011f70:	2509      	movs	r5, #9
 8011f72:	e7f6      	b.n	8011f62 <__s2b+0x66>
 8011f74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011f78:	4601      	mov	r1, r0
 8011f7a:	3b30      	subs	r3, #48	; 0x30
 8011f7c:	220a      	movs	r2, #10
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f7ff ff76 	bl	8011e70 <__multadd>
 8011f84:	e7ee      	b.n	8011f64 <__s2b+0x68>
 8011f86:	bf00      	nop
 8011f88:	0801643b 	.word	0x0801643b
 8011f8c:	0801644c 	.word	0x0801644c

08011f90 <__hi0bits>:
 8011f90:	0c03      	lsrs	r3, r0, #16
 8011f92:	041b      	lsls	r3, r3, #16
 8011f94:	b9d3      	cbnz	r3, 8011fcc <__hi0bits+0x3c>
 8011f96:	0400      	lsls	r0, r0, #16
 8011f98:	2310      	movs	r3, #16
 8011f9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011f9e:	bf04      	itt	eq
 8011fa0:	0200      	lsleq	r0, r0, #8
 8011fa2:	3308      	addeq	r3, #8
 8011fa4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011fa8:	bf04      	itt	eq
 8011faa:	0100      	lsleq	r0, r0, #4
 8011fac:	3304      	addeq	r3, #4
 8011fae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011fb2:	bf04      	itt	eq
 8011fb4:	0080      	lsleq	r0, r0, #2
 8011fb6:	3302      	addeq	r3, #2
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	db05      	blt.n	8011fc8 <__hi0bits+0x38>
 8011fbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011fc0:	f103 0301 	add.w	r3, r3, #1
 8011fc4:	bf08      	it	eq
 8011fc6:	2320      	moveq	r3, #32
 8011fc8:	4618      	mov	r0, r3
 8011fca:	4770      	bx	lr
 8011fcc:	2300      	movs	r3, #0
 8011fce:	e7e4      	b.n	8011f9a <__hi0bits+0xa>

08011fd0 <__lo0bits>:
 8011fd0:	6803      	ldr	r3, [r0, #0]
 8011fd2:	f013 0207 	ands.w	r2, r3, #7
 8011fd6:	d00c      	beq.n	8011ff2 <__lo0bits+0x22>
 8011fd8:	07d9      	lsls	r1, r3, #31
 8011fda:	d422      	bmi.n	8012022 <__lo0bits+0x52>
 8011fdc:	079a      	lsls	r2, r3, #30
 8011fde:	bf49      	itett	mi
 8011fe0:	085b      	lsrmi	r3, r3, #1
 8011fe2:	089b      	lsrpl	r3, r3, #2
 8011fe4:	6003      	strmi	r3, [r0, #0]
 8011fe6:	2201      	movmi	r2, #1
 8011fe8:	bf5c      	itt	pl
 8011fea:	6003      	strpl	r3, [r0, #0]
 8011fec:	2202      	movpl	r2, #2
 8011fee:	4610      	mov	r0, r2
 8011ff0:	4770      	bx	lr
 8011ff2:	b299      	uxth	r1, r3
 8011ff4:	b909      	cbnz	r1, 8011ffa <__lo0bits+0x2a>
 8011ff6:	0c1b      	lsrs	r3, r3, #16
 8011ff8:	2210      	movs	r2, #16
 8011ffa:	b2d9      	uxtb	r1, r3
 8011ffc:	b909      	cbnz	r1, 8012002 <__lo0bits+0x32>
 8011ffe:	3208      	adds	r2, #8
 8012000:	0a1b      	lsrs	r3, r3, #8
 8012002:	0719      	lsls	r1, r3, #28
 8012004:	bf04      	itt	eq
 8012006:	091b      	lsreq	r3, r3, #4
 8012008:	3204      	addeq	r2, #4
 801200a:	0799      	lsls	r1, r3, #30
 801200c:	bf04      	itt	eq
 801200e:	089b      	lsreq	r3, r3, #2
 8012010:	3202      	addeq	r2, #2
 8012012:	07d9      	lsls	r1, r3, #31
 8012014:	d403      	bmi.n	801201e <__lo0bits+0x4e>
 8012016:	085b      	lsrs	r3, r3, #1
 8012018:	f102 0201 	add.w	r2, r2, #1
 801201c:	d003      	beq.n	8012026 <__lo0bits+0x56>
 801201e:	6003      	str	r3, [r0, #0]
 8012020:	e7e5      	b.n	8011fee <__lo0bits+0x1e>
 8012022:	2200      	movs	r2, #0
 8012024:	e7e3      	b.n	8011fee <__lo0bits+0x1e>
 8012026:	2220      	movs	r2, #32
 8012028:	e7e1      	b.n	8011fee <__lo0bits+0x1e>
	...

0801202c <__i2b>:
 801202c:	b510      	push	{r4, lr}
 801202e:	460c      	mov	r4, r1
 8012030:	2101      	movs	r1, #1
 8012032:	f7ff febb 	bl	8011dac <_Balloc>
 8012036:	4602      	mov	r2, r0
 8012038:	b928      	cbnz	r0, 8012046 <__i2b+0x1a>
 801203a:	4b05      	ldr	r3, [pc, #20]	; (8012050 <__i2b+0x24>)
 801203c:	4805      	ldr	r0, [pc, #20]	; (8012054 <__i2b+0x28>)
 801203e:	f240 1145 	movw	r1, #325	; 0x145
 8012042:	f001 ffd5 	bl	8013ff0 <__assert_func>
 8012046:	2301      	movs	r3, #1
 8012048:	6144      	str	r4, [r0, #20]
 801204a:	6103      	str	r3, [r0, #16]
 801204c:	bd10      	pop	{r4, pc}
 801204e:	bf00      	nop
 8012050:	0801643b 	.word	0x0801643b
 8012054:	0801644c 	.word	0x0801644c

08012058 <__multiply>:
 8012058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801205c:	4691      	mov	r9, r2
 801205e:	690a      	ldr	r2, [r1, #16]
 8012060:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012064:	429a      	cmp	r2, r3
 8012066:	bfb8      	it	lt
 8012068:	460b      	movlt	r3, r1
 801206a:	460c      	mov	r4, r1
 801206c:	bfbc      	itt	lt
 801206e:	464c      	movlt	r4, r9
 8012070:	4699      	movlt	r9, r3
 8012072:	6927      	ldr	r7, [r4, #16]
 8012074:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012078:	68a3      	ldr	r3, [r4, #8]
 801207a:	6861      	ldr	r1, [r4, #4]
 801207c:	eb07 060a 	add.w	r6, r7, sl
 8012080:	42b3      	cmp	r3, r6
 8012082:	b085      	sub	sp, #20
 8012084:	bfb8      	it	lt
 8012086:	3101      	addlt	r1, #1
 8012088:	f7ff fe90 	bl	8011dac <_Balloc>
 801208c:	b930      	cbnz	r0, 801209c <__multiply+0x44>
 801208e:	4602      	mov	r2, r0
 8012090:	4b44      	ldr	r3, [pc, #272]	; (80121a4 <__multiply+0x14c>)
 8012092:	4845      	ldr	r0, [pc, #276]	; (80121a8 <__multiply+0x150>)
 8012094:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012098:	f001 ffaa 	bl	8013ff0 <__assert_func>
 801209c:	f100 0514 	add.w	r5, r0, #20
 80120a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80120a4:	462b      	mov	r3, r5
 80120a6:	2200      	movs	r2, #0
 80120a8:	4543      	cmp	r3, r8
 80120aa:	d321      	bcc.n	80120f0 <__multiply+0x98>
 80120ac:	f104 0314 	add.w	r3, r4, #20
 80120b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80120b4:	f109 0314 	add.w	r3, r9, #20
 80120b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80120bc:	9202      	str	r2, [sp, #8]
 80120be:	1b3a      	subs	r2, r7, r4
 80120c0:	3a15      	subs	r2, #21
 80120c2:	f022 0203 	bic.w	r2, r2, #3
 80120c6:	3204      	adds	r2, #4
 80120c8:	f104 0115 	add.w	r1, r4, #21
 80120cc:	428f      	cmp	r7, r1
 80120ce:	bf38      	it	cc
 80120d0:	2204      	movcc	r2, #4
 80120d2:	9201      	str	r2, [sp, #4]
 80120d4:	9a02      	ldr	r2, [sp, #8]
 80120d6:	9303      	str	r3, [sp, #12]
 80120d8:	429a      	cmp	r2, r3
 80120da:	d80c      	bhi.n	80120f6 <__multiply+0x9e>
 80120dc:	2e00      	cmp	r6, #0
 80120de:	dd03      	ble.n	80120e8 <__multiply+0x90>
 80120e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d05b      	beq.n	80121a0 <__multiply+0x148>
 80120e8:	6106      	str	r6, [r0, #16]
 80120ea:	b005      	add	sp, #20
 80120ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120f0:	f843 2b04 	str.w	r2, [r3], #4
 80120f4:	e7d8      	b.n	80120a8 <__multiply+0x50>
 80120f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80120fa:	f1ba 0f00 	cmp.w	sl, #0
 80120fe:	d024      	beq.n	801214a <__multiply+0xf2>
 8012100:	f104 0e14 	add.w	lr, r4, #20
 8012104:	46a9      	mov	r9, r5
 8012106:	f04f 0c00 	mov.w	ip, #0
 801210a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801210e:	f8d9 1000 	ldr.w	r1, [r9]
 8012112:	fa1f fb82 	uxth.w	fp, r2
 8012116:	b289      	uxth	r1, r1
 8012118:	fb0a 110b 	mla	r1, sl, fp, r1
 801211c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012120:	f8d9 2000 	ldr.w	r2, [r9]
 8012124:	4461      	add	r1, ip
 8012126:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801212a:	fb0a c20b 	mla	r2, sl, fp, ip
 801212e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012132:	b289      	uxth	r1, r1
 8012134:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012138:	4577      	cmp	r7, lr
 801213a:	f849 1b04 	str.w	r1, [r9], #4
 801213e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012142:	d8e2      	bhi.n	801210a <__multiply+0xb2>
 8012144:	9a01      	ldr	r2, [sp, #4]
 8012146:	f845 c002 	str.w	ip, [r5, r2]
 801214a:	9a03      	ldr	r2, [sp, #12]
 801214c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012150:	3304      	adds	r3, #4
 8012152:	f1b9 0f00 	cmp.w	r9, #0
 8012156:	d021      	beq.n	801219c <__multiply+0x144>
 8012158:	6829      	ldr	r1, [r5, #0]
 801215a:	f104 0c14 	add.w	ip, r4, #20
 801215e:	46ae      	mov	lr, r5
 8012160:	f04f 0a00 	mov.w	sl, #0
 8012164:	f8bc b000 	ldrh.w	fp, [ip]
 8012168:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801216c:	fb09 220b 	mla	r2, r9, fp, r2
 8012170:	4452      	add	r2, sl
 8012172:	b289      	uxth	r1, r1
 8012174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012178:	f84e 1b04 	str.w	r1, [lr], #4
 801217c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012180:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012184:	f8be 1000 	ldrh.w	r1, [lr]
 8012188:	fb09 110a 	mla	r1, r9, sl, r1
 801218c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012190:	4567      	cmp	r7, ip
 8012192:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012196:	d8e5      	bhi.n	8012164 <__multiply+0x10c>
 8012198:	9a01      	ldr	r2, [sp, #4]
 801219a:	50a9      	str	r1, [r5, r2]
 801219c:	3504      	adds	r5, #4
 801219e:	e799      	b.n	80120d4 <__multiply+0x7c>
 80121a0:	3e01      	subs	r6, #1
 80121a2:	e79b      	b.n	80120dc <__multiply+0x84>
 80121a4:	0801643b 	.word	0x0801643b
 80121a8:	0801644c 	.word	0x0801644c

080121ac <__pow5mult>:
 80121ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121b0:	4615      	mov	r5, r2
 80121b2:	f012 0203 	ands.w	r2, r2, #3
 80121b6:	4606      	mov	r6, r0
 80121b8:	460f      	mov	r7, r1
 80121ba:	d007      	beq.n	80121cc <__pow5mult+0x20>
 80121bc:	4c25      	ldr	r4, [pc, #148]	; (8012254 <__pow5mult+0xa8>)
 80121be:	3a01      	subs	r2, #1
 80121c0:	2300      	movs	r3, #0
 80121c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80121c6:	f7ff fe53 	bl	8011e70 <__multadd>
 80121ca:	4607      	mov	r7, r0
 80121cc:	10ad      	asrs	r5, r5, #2
 80121ce:	d03d      	beq.n	801224c <__pow5mult+0xa0>
 80121d0:	69f4      	ldr	r4, [r6, #28]
 80121d2:	b97c      	cbnz	r4, 80121f4 <__pow5mult+0x48>
 80121d4:	2010      	movs	r0, #16
 80121d6:	f7fd fdd1 	bl	800fd7c <malloc>
 80121da:	4602      	mov	r2, r0
 80121dc:	61f0      	str	r0, [r6, #28]
 80121de:	b928      	cbnz	r0, 80121ec <__pow5mult+0x40>
 80121e0:	4b1d      	ldr	r3, [pc, #116]	; (8012258 <__pow5mult+0xac>)
 80121e2:	481e      	ldr	r0, [pc, #120]	; (801225c <__pow5mult+0xb0>)
 80121e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80121e8:	f001 ff02 	bl	8013ff0 <__assert_func>
 80121ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80121f0:	6004      	str	r4, [r0, #0]
 80121f2:	60c4      	str	r4, [r0, #12]
 80121f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80121f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80121fc:	b94c      	cbnz	r4, 8012212 <__pow5mult+0x66>
 80121fe:	f240 2171 	movw	r1, #625	; 0x271
 8012202:	4630      	mov	r0, r6
 8012204:	f7ff ff12 	bl	801202c <__i2b>
 8012208:	2300      	movs	r3, #0
 801220a:	f8c8 0008 	str.w	r0, [r8, #8]
 801220e:	4604      	mov	r4, r0
 8012210:	6003      	str	r3, [r0, #0]
 8012212:	f04f 0900 	mov.w	r9, #0
 8012216:	07eb      	lsls	r3, r5, #31
 8012218:	d50a      	bpl.n	8012230 <__pow5mult+0x84>
 801221a:	4639      	mov	r1, r7
 801221c:	4622      	mov	r2, r4
 801221e:	4630      	mov	r0, r6
 8012220:	f7ff ff1a 	bl	8012058 <__multiply>
 8012224:	4639      	mov	r1, r7
 8012226:	4680      	mov	r8, r0
 8012228:	4630      	mov	r0, r6
 801222a:	f7ff fdff 	bl	8011e2c <_Bfree>
 801222e:	4647      	mov	r7, r8
 8012230:	106d      	asrs	r5, r5, #1
 8012232:	d00b      	beq.n	801224c <__pow5mult+0xa0>
 8012234:	6820      	ldr	r0, [r4, #0]
 8012236:	b938      	cbnz	r0, 8012248 <__pow5mult+0x9c>
 8012238:	4622      	mov	r2, r4
 801223a:	4621      	mov	r1, r4
 801223c:	4630      	mov	r0, r6
 801223e:	f7ff ff0b 	bl	8012058 <__multiply>
 8012242:	6020      	str	r0, [r4, #0]
 8012244:	f8c0 9000 	str.w	r9, [r0]
 8012248:	4604      	mov	r4, r0
 801224a:	e7e4      	b.n	8012216 <__pow5mult+0x6a>
 801224c:	4638      	mov	r0, r7
 801224e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012252:	bf00      	nop
 8012254:	08016598 	.word	0x08016598
 8012258:	080163cc 	.word	0x080163cc
 801225c:	0801644c 	.word	0x0801644c

08012260 <__lshift>:
 8012260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012264:	460c      	mov	r4, r1
 8012266:	6849      	ldr	r1, [r1, #4]
 8012268:	6923      	ldr	r3, [r4, #16]
 801226a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801226e:	68a3      	ldr	r3, [r4, #8]
 8012270:	4607      	mov	r7, r0
 8012272:	4691      	mov	r9, r2
 8012274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012278:	f108 0601 	add.w	r6, r8, #1
 801227c:	42b3      	cmp	r3, r6
 801227e:	db0b      	blt.n	8012298 <__lshift+0x38>
 8012280:	4638      	mov	r0, r7
 8012282:	f7ff fd93 	bl	8011dac <_Balloc>
 8012286:	4605      	mov	r5, r0
 8012288:	b948      	cbnz	r0, 801229e <__lshift+0x3e>
 801228a:	4602      	mov	r2, r0
 801228c:	4b28      	ldr	r3, [pc, #160]	; (8012330 <__lshift+0xd0>)
 801228e:	4829      	ldr	r0, [pc, #164]	; (8012334 <__lshift+0xd4>)
 8012290:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012294:	f001 feac 	bl	8013ff0 <__assert_func>
 8012298:	3101      	adds	r1, #1
 801229a:	005b      	lsls	r3, r3, #1
 801229c:	e7ee      	b.n	801227c <__lshift+0x1c>
 801229e:	2300      	movs	r3, #0
 80122a0:	f100 0114 	add.w	r1, r0, #20
 80122a4:	f100 0210 	add.w	r2, r0, #16
 80122a8:	4618      	mov	r0, r3
 80122aa:	4553      	cmp	r3, sl
 80122ac:	db33      	blt.n	8012316 <__lshift+0xb6>
 80122ae:	6920      	ldr	r0, [r4, #16]
 80122b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80122b4:	f104 0314 	add.w	r3, r4, #20
 80122b8:	f019 091f 	ands.w	r9, r9, #31
 80122bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80122c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80122c4:	d02b      	beq.n	801231e <__lshift+0xbe>
 80122c6:	f1c9 0e20 	rsb	lr, r9, #32
 80122ca:	468a      	mov	sl, r1
 80122cc:	2200      	movs	r2, #0
 80122ce:	6818      	ldr	r0, [r3, #0]
 80122d0:	fa00 f009 	lsl.w	r0, r0, r9
 80122d4:	4310      	orrs	r0, r2
 80122d6:	f84a 0b04 	str.w	r0, [sl], #4
 80122da:	f853 2b04 	ldr.w	r2, [r3], #4
 80122de:	459c      	cmp	ip, r3
 80122e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80122e4:	d8f3      	bhi.n	80122ce <__lshift+0x6e>
 80122e6:	ebac 0304 	sub.w	r3, ip, r4
 80122ea:	3b15      	subs	r3, #21
 80122ec:	f023 0303 	bic.w	r3, r3, #3
 80122f0:	3304      	adds	r3, #4
 80122f2:	f104 0015 	add.w	r0, r4, #21
 80122f6:	4584      	cmp	ip, r0
 80122f8:	bf38      	it	cc
 80122fa:	2304      	movcc	r3, #4
 80122fc:	50ca      	str	r2, [r1, r3]
 80122fe:	b10a      	cbz	r2, 8012304 <__lshift+0xa4>
 8012300:	f108 0602 	add.w	r6, r8, #2
 8012304:	3e01      	subs	r6, #1
 8012306:	4638      	mov	r0, r7
 8012308:	612e      	str	r6, [r5, #16]
 801230a:	4621      	mov	r1, r4
 801230c:	f7ff fd8e 	bl	8011e2c <_Bfree>
 8012310:	4628      	mov	r0, r5
 8012312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012316:	f842 0f04 	str.w	r0, [r2, #4]!
 801231a:	3301      	adds	r3, #1
 801231c:	e7c5      	b.n	80122aa <__lshift+0x4a>
 801231e:	3904      	subs	r1, #4
 8012320:	f853 2b04 	ldr.w	r2, [r3], #4
 8012324:	f841 2f04 	str.w	r2, [r1, #4]!
 8012328:	459c      	cmp	ip, r3
 801232a:	d8f9      	bhi.n	8012320 <__lshift+0xc0>
 801232c:	e7ea      	b.n	8012304 <__lshift+0xa4>
 801232e:	bf00      	nop
 8012330:	0801643b 	.word	0x0801643b
 8012334:	0801644c 	.word	0x0801644c

08012338 <__mcmp>:
 8012338:	b530      	push	{r4, r5, lr}
 801233a:	6902      	ldr	r2, [r0, #16]
 801233c:	690c      	ldr	r4, [r1, #16]
 801233e:	1b12      	subs	r2, r2, r4
 8012340:	d10e      	bne.n	8012360 <__mcmp+0x28>
 8012342:	f100 0314 	add.w	r3, r0, #20
 8012346:	3114      	adds	r1, #20
 8012348:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801234c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012350:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012354:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012358:	42a5      	cmp	r5, r4
 801235a:	d003      	beq.n	8012364 <__mcmp+0x2c>
 801235c:	d305      	bcc.n	801236a <__mcmp+0x32>
 801235e:	2201      	movs	r2, #1
 8012360:	4610      	mov	r0, r2
 8012362:	bd30      	pop	{r4, r5, pc}
 8012364:	4283      	cmp	r3, r0
 8012366:	d3f3      	bcc.n	8012350 <__mcmp+0x18>
 8012368:	e7fa      	b.n	8012360 <__mcmp+0x28>
 801236a:	f04f 32ff 	mov.w	r2, #4294967295
 801236e:	e7f7      	b.n	8012360 <__mcmp+0x28>

08012370 <__mdiff>:
 8012370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012374:	460c      	mov	r4, r1
 8012376:	4606      	mov	r6, r0
 8012378:	4611      	mov	r1, r2
 801237a:	4620      	mov	r0, r4
 801237c:	4690      	mov	r8, r2
 801237e:	f7ff ffdb 	bl	8012338 <__mcmp>
 8012382:	1e05      	subs	r5, r0, #0
 8012384:	d110      	bne.n	80123a8 <__mdiff+0x38>
 8012386:	4629      	mov	r1, r5
 8012388:	4630      	mov	r0, r6
 801238a:	f7ff fd0f 	bl	8011dac <_Balloc>
 801238e:	b930      	cbnz	r0, 801239e <__mdiff+0x2e>
 8012390:	4b3a      	ldr	r3, [pc, #232]	; (801247c <__mdiff+0x10c>)
 8012392:	4602      	mov	r2, r0
 8012394:	f240 2137 	movw	r1, #567	; 0x237
 8012398:	4839      	ldr	r0, [pc, #228]	; (8012480 <__mdiff+0x110>)
 801239a:	f001 fe29 	bl	8013ff0 <__assert_func>
 801239e:	2301      	movs	r3, #1
 80123a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80123a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a8:	bfa4      	itt	ge
 80123aa:	4643      	movge	r3, r8
 80123ac:	46a0      	movge	r8, r4
 80123ae:	4630      	mov	r0, r6
 80123b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80123b4:	bfa6      	itte	ge
 80123b6:	461c      	movge	r4, r3
 80123b8:	2500      	movge	r5, #0
 80123ba:	2501      	movlt	r5, #1
 80123bc:	f7ff fcf6 	bl	8011dac <_Balloc>
 80123c0:	b920      	cbnz	r0, 80123cc <__mdiff+0x5c>
 80123c2:	4b2e      	ldr	r3, [pc, #184]	; (801247c <__mdiff+0x10c>)
 80123c4:	4602      	mov	r2, r0
 80123c6:	f240 2145 	movw	r1, #581	; 0x245
 80123ca:	e7e5      	b.n	8012398 <__mdiff+0x28>
 80123cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80123d0:	6926      	ldr	r6, [r4, #16]
 80123d2:	60c5      	str	r5, [r0, #12]
 80123d4:	f104 0914 	add.w	r9, r4, #20
 80123d8:	f108 0514 	add.w	r5, r8, #20
 80123dc:	f100 0e14 	add.w	lr, r0, #20
 80123e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80123e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80123e8:	f108 0210 	add.w	r2, r8, #16
 80123ec:	46f2      	mov	sl, lr
 80123ee:	2100      	movs	r1, #0
 80123f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80123f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80123f8:	fa11 f88b 	uxtah	r8, r1, fp
 80123fc:	b299      	uxth	r1, r3
 80123fe:	0c1b      	lsrs	r3, r3, #16
 8012400:	eba8 0801 	sub.w	r8, r8, r1
 8012404:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012408:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801240c:	fa1f f888 	uxth.w	r8, r8
 8012410:	1419      	asrs	r1, r3, #16
 8012412:	454e      	cmp	r6, r9
 8012414:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012418:	f84a 3b04 	str.w	r3, [sl], #4
 801241c:	d8e8      	bhi.n	80123f0 <__mdiff+0x80>
 801241e:	1b33      	subs	r3, r6, r4
 8012420:	3b15      	subs	r3, #21
 8012422:	f023 0303 	bic.w	r3, r3, #3
 8012426:	3304      	adds	r3, #4
 8012428:	3415      	adds	r4, #21
 801242a:	42a6      	cmp	r6, r4
 801242c:	bf38      	it	cc
 801242e:	2304      	movcc	r3, #4
 8012430:	441d      	add	r5, r3
 8012432:	4473      	add	r3, lr
 8012434:	469e      	mov	lr, r3
 8012436:	462e      	mov	r6, r5
 8012438:	4566      	cmp	r6, ip
 801243a:	d30e      	bcc.n	801245a <__mdiff+0xea>
 801243c:	f10c 0203 	add.w	r2, ip, #3
 8012440:	1b52      	subs	r2, r2, r5
 8012442:	f022 0203 	bic.w	r2, r2, #3
 8012446:	3d03      	subs	r5, #3
 8012448:	45ac      	cmp	ip, r5
 801244a:	bf38      	it	cc
 801244c:	2200      	movcc	r2, #0
 801244e:	4413      	add	r3, r2
 8012450:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012454:	b17a      	cbz	r2, 8012476 <__mdiff+0x106>
 8012456:	6107      	str	r7, [r0, #16]
 8012458:	e7a4      	b.n	80123a4 <__mdiff+0x34>
 801245a:	f856 8b04 	ldr.w	r8, [r6], #4
 801245e:	fa11 f288 	uxtah	r2, r1, r8
 8012462:	1414      	asrs	r4, r2, #16
 8012464:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012468:	b292      	uxth	r2, r2
 801246a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801246e:	f84e 2b04 	str.w	r2, [lr], #4
 8012472:	1421      	asrs	r1, r4, #16
 8012474:	e7e0      	b.n	8012438 <__mdiff+0xc8>
 8012476:	3f01      	subs	r7, #1
 8012478:	e7ea      	b.n	8012450 <__mdiff+0xe0>
 801247a:	bf00      	nop
 801247c:	0801643b 	.word	0x0801643b
 8012480:	0801644c 	.word	0x0801644c

08012484 <__ulp>:
 8012484:	b082      	sub	sp, #8
 8012486:	ed8d 0b00 	vstr	d0, [sp]
 801248a:	9a01      	ldr	r2, [sp, #4]
 801248c:	4b0f      	ldr	r3, [pc, #60]	; (80124cc <__ulp+0x48>)
 801248e:	4013      	ands	r3, r2
 8012490:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012494:	2b00      	cmp	r3, #0
 8012496:	dc08      	bgt.n	80124aa <__ulp+0x26>
 8012498:	425b      	negs	r3, r3
 801249a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801249e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80124a2:	da04      	bge.n	80124ae <__ulp+0x2a>
 80124a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80124a8:	4113      	asrs	r3, r2
 80124aa:	2200      	movs	r2, #0
 80124ac:	e008      	b.n	80124c0 <__ulp+0x3c>
 80124ae:	f1a2 0314 	sub.w	r3, r2, #20
 80124b2:	2b1e      	cmp	r3, #30
 80124b4:	bfda      	itte	le
 80124b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80124ba:	40da      	lsrle	r2, r3
 80124bc:	2201      	movgt	r2, #1
 80124be:	2300      	movs	r3, #0
 80124c0:	4619      	mov	r1, r3
 80124c2:	4610      	mov	r0, r2
 80124c4:	ec41 0b10 	vmov	d0, r0, r1
 80124c8:	b002      	add	sp, #8
 80124ca:	4770      	bx	lr
 80124cc:	7ff00000 	.word	0x7ff00000

080124d0 <__b2d>:
 80124d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d4:	6906      	ldr	r6, [r0, #16]
 80124d6:	f100 0814 	add.w	r8, r0, #20
 80124da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80124de:	1f37      	subs	r7, r6, #4
 80124e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80124e4:	4610      	mov	r0, r2
 80124e6:	f7ff fd53 	bl	8011f90 <__hi0bits>
 80124ea:	f1c0 0320 	rsb	r3, r0, #32
 80124ee:	280a      	cmp	r0, #10
 80124f0:	600b      	str	r3, [r1, #0]
 80124f2:	491b      	ldr	r1, [pc, #108]	; (8012560 <__b2d+0x90>)
 80124f4:	dc15      	bgt.n	8012522 <__b2d+0x52>
 80124f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80124fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80124fe:	45b8      	cmp	r8, r7
 8012500:	ea43 0501 	orr.w	r5, r3, r1
 8012504:	bf34      	ite	cc
 8012506:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801250a:	2300      	movcs	r3, #0
 801250c:	3015      	adds	r0, #21
 801250e:	fa02 f000 	lsl.w	r0, r2, r0
 8012512:	fa23 f30c 	lsr.w	r3, r3, ip
 8012516:	4303      	orrs	r3, r0
 8012518:	461c      	mov	r4, r3
 801251a:	ec45 4b10 	vmov	d0, r4, r5
 801251e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012522:	45b8      	cmp	r8, r7
 8012524:	bf3a      	itte	cc
 8012526:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801252a:	f1a6 0708 	subcc.w	r7, r6, #8
 801252e:	2300      	movcs	r3, #0
 8012530:	380b      	subs	r0, #11
 8012532:	d012      	beq.n	801255a <__b2d+0x8a>
 8012534:	f1c0 0120 	rsb	r1, r0, #32
 8012538:	fa23 f401 	lsr.w	r4, r3, r1
 801253c:	4082      	lsls	r2, r0
 801253e:	4322      	orrs	r2, r4
 8012540:	4547      	cmp	r7, r8
 8012542:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8012546:	bf8c      	ite	hi
 8012548:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801254c:	2200      	movls	r2, #0
 801254e:	4083      	lsls	r3, r0
 8012550:	40ca      	lsrs	r2, r1
 8012552:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012556:	4313      	orrs	r3, r2
 8012558:	e7de      	b.n	8012518 <__b2d+0x48>
 801255a:	ea42 0501 	orr.w	r5, r2, r1
 801255e:	e7db      	b.n	8012518 <__b2d+0x48>
 8012560:	3ff00000 	.word	0x3ff00000

08012564 <__d2b>:
 8012564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012568:	460f      	mov	r7, r1
 801256a:	2101      	movs	r1, #1
 801256c:	ec59 8b10 	vmov	r8, r9, d0
 8012570:	4616      	mov	r6, r2
 8012572:	f7ff fc1b 	bl	8011dac <_Balloc>
 8012576:	4604      	mov	r4, r0
 8012578:	b930      	cbnz	r0, 8012588 <__d2b+0x24>
 801257a:	4602      	mov	r2, r0
 801257c:	4b24      	ldr	r3, [pc, #144]	; (8012610 <__d2b+0xac>)
 801257e:	4825      	ldr	r0, [pc, #148]	; (8012614 <__d2b+0xb0>)
 8012580:	f240 310f 	movw	r1, #783	; 0x30f
 8012584:	f001 fd34 	bl	8013ff0 <__assert_func>
 8012588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801258c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012590:	bb2d      	cbnz	r5, 80125de <__d2b+0x7a>
 8012592:	9301      	str	r3, [sp, #4]
 8012594:	f1b8 0300 	subs.w	r3, r8, #0
 8012598:	d026      	beq.n	80125e8 <__d2b+0x84>
 801259a:	4668      	mov	r0, sp
 801259c:	9300      	str	r3, [sp, #0]
 801259e:	f7ff fd17 	bl	8011fd0 <__lo0bits>
 80125a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80125a6:	b1e8      	cbz	r0, 80125e4 <__d2b+0x80>
 80125a8:	f1c0 0320 	rsb	r3, r0, #32
 80125ac:	fa02 f303 	lsl.w	r3, r2, r3
 80125b0:	430b      	orrs	r3, r1
 80125b2:	40c2      	lsrs	r2, r0
 80125b4:	6163      	str	r3, [r4, #20]
 80125b6:	9201      	str	r2, [sp, #4]
 80125b8:	9b01      	ldr	r3, [sp, #4]
 80125ba:	61a3      	str	r3, [r4, #24]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	bf14      	ite	ne
 80125c0:	2202      	movne	r2, #2
 80125c2:	2201      	moveq	r2, #1
 80125c4:	6122      	str	r2, [r4, #16]
 80125c6:	b1bd      	cbz	r5, 80125f8 <__d2b+0x94>
 80125c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80125cc:	4405      	add	r5, r0
 80125ce:	603d      	str	r5, [r7, #0]
 80125d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80125d4:	6030      	str	r0, [r6, #0]
 80125d6:	4620      	mov	r0, r4
 80125d8:	b003      	add	sp, #12
 80125da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80125e2:	e7d6      	b.n	8012592 <__d2b+0x2e>
 80125e4:	6161      	str	r1, [r4, #20]
 80125e6:	e7e7      	b.n	80125b8 <__d2b+0x54>
 80125e8:	a801      	add	r0, sp, #4
 80125ea:	f7ff fcf1 	bl	8011fd0 <__lo0bits>
 80125ee:	9b01      	ldr	r3, [sp, #4]
 80125f0:	6163      	str	r3, [r4, #20]
 80125f2:	3020      	adds	r0, #32
 80125f4:	2201      	movs	r2, #1
 80125f6:	e7e5      	b.n	80125c4 <__d2b+0x60>
 80125f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80125fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012600:	6038      	str	r0, [r7, #0]
 8012602:	6918      	ldr	r0, [r3, #16]
 8012604:	f7ff fcc4 	bl	8011f90 <__hi0bits>
 8012608:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801260c:	e7e2      	b.n	80125d4 <__d2b+0x70>
 801260e:	bf00      	nop
 8012610:	0801643b 	.word	0x0801643b
 8012614:	0801644c 	.word	0x0801644c

08012618 <__ratio>:
 8012618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801261c:	4688      	mov	r8, r1
 801261e:	4669      	mov	r1, sp
 8012620:	4681      	mov	r9, r0
 8012622:	f7ff ff55 	bl	80124d0 <__b2d>
 8012626:	a901      	add	r1, sp, #4
 8012628:	4640      	mov	r0, r8
 801262a:	ec55 4b10 	vmov	r4, r5, d0
 801262e:	f7ff ff4f 	bl	80124d0 <__b2d>
 8012632:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012636:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801263a:	eba3 0c02 	sub.w	ip, r3, r2
 801263e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012642:	1a9b      	subs	r3, r3, r2
 8012644:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012648:	ec51 0b10 	vmov	r0, r1, d0
 801264c:	2b00      	cmp	r3, #0
 801264e:	bfd6      	itet	le
 8012650:	460a      	movle	r2, r1
 8012652:	462a      	movgt	r2, r5
 8012654:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012658:	468b      	mov	fp, r1
 801265a:	462f      	mov	r7, r5
 801265c:	bfd4      	ite	le
 801265e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012662:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012666:	4620      	mov	r0, r4
 8012668:	ee10 2a10 	vmov	r2, s0
 801266c:	465b      	mov	r3, fp
 801266e:	4639      	mov	r1, r7
 8012670:	f7ee f8f4 	bl	800085c <__aeabi_ddiv>
 8012674:	ec41 0b10 	vmov	d0, r0, r1
 8012678:	b003      	add	sp, #12
 801267a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801267e <__copybits>:
 801267e:	3901      	subs	r1, #1
 8012680:	b570      	push	{r4, r5, r6, lr}
 8012682:	1149      	asrs	r1, r1, #5
 8012684:	6914      	ldr	r4, [r2, #16]
 8012686:	3101      	adds	r1, #1
 8012688:	f102 0314 	add.w	r3, r2, #20
 801268c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012690:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012694:	1f05      	subs	r5, r0, #4
 8012696:	42a3      	cmp	r3, r4
 8012698:	d30c      	bcc.n	80126b4 <__copybits+0x36>
 801269a:	1aa3      	subs	r3, r4, r2
 801269c:	3b11      	subs	r3, #17
 801269e:	f023 0303 	bic.w	r3, r3, #3
 80126a2:	3211      	adds	r2, #17
 80126a4:	42a2      	cmp	r2, r4
 80126a6:	bf88      	it	hi
 80126a8:	2300      	movhi	r3, #0
 80126aa:	4418      	add	r0, r3
 80126ac:	2300      	movs	r3, #0
 80126ae:	4288      	cmp	r0, r1
 80126b0:	d305      	bcc.n	80126be <__copybits+0x40>
 80126b2:	bd70      	pop	{r4, r5, r6, pc}
 80126b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80126b8:	f845 6f04 	str.w	r6, [r5, #4]!
 80126bc:	e7eb      	b.n	8012696 <__copybits+0x18>
 80126be:	f840 3b04 	str.w	r3, [r0], #4
 80126c2:	e7f4      	b.n	80126ae <__copybits+0x30>

080126c4 <__any_on>:
 80126c4:	f100 0214 	add.w	r2, r0, #20
 80126c8:	6900      	ldr	r0, [r0, #16]
 80126ca:	114b      	asrs	r3, r1, #5
 80126cc:	4298      	cmp	r0, r3
 80126ce:	b510      	push	{r4, lr}
 80126d0:	db11      	blt.n	80126f6 <__any_on+0x32>
 80126d2:	dd0a      	ble.n	80126ea <__any_on+0x26>
 80126d4:	f011 011f 	ands.w	r1, r1, #31
 80126d8:	d007      	beq.n	80126ea <__any_on+0x26>
 80126da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80126de:	fa24 f001 	lsr.w	r0, r4, r1
 80126e2:	fa00 f101 	lsl.w	r1, r0, r1
 80126e6:	428c      	cmp	r4, r1
 80126e8:	d10b      	bne.n	8012702 <__any_on+0x3e>
 80126ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80126ee:	4293      	cmp	r3, r2
 80126f0:	d803      	bhi.n	80126fa <__any_on+0x36>
 80126f2:	2000      	movs	r0, #0
 80126f4:	bd10      	pop	{r4, pc}
 80126f6:	4603      	mov	r3, r0
 80126f8:	e7f7      	b.n	80126ea <__any_on+0x26>
 80126fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80126fe:	2900      	cmp	r1, #0
 8012700:	d0f5      	beq.n	80126ee <__any_on+0x2a>
 8012702:	2001      	movs	r0, #1
 8012704:	e7f6      	b.n	80126f4 <__any_on+0x30>

08012706 <sulp>:
 8012706:	b570      	push	{r4, r5, r6, lr}
 8012708:	4604      	mov	r4, r0
 801270a:	460d      	mov	r5, r1
 801270c:	ec45 4b10 	vmov	d0, r4, r5
 8012710:	4616      	mov	r6, r2
 8012712:	f7ff feb7 	bl	8012484 <__ulp>
 8012716:	ec51 0b10 	vmov	r0, r1, d0
 801271a:	b17e      	cbz	r6, 801273c <sulp+0x36>
 801271c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012720:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012724:	2b00      	cmp	r3, #0
 8012726:	dd09      	ble.n	801273c <sulp+0x36>
 8012728:	051b      	lsls	r3, r3, #20
 801272a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801272e:	2400      	movs	r4, #0
 8012730:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012734:	4622      	mov	r2, r4
 8012736:	462b      	mov	r3, r5
 8012738:	f7ed ff66 	bl	8000608 <__aeabi_dmul>
 801273c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012740 <_strtod_l>:
 8012740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012744:	ed2d 8b02 	vpush	{d8}
 8012748:	b09b      	sub	sp, #108	; 0x6c
 801274a:	4604      	mov	r4, r0
 801274c:	9213      	str	r2, [sp, #76]	; 0x4c
 801274e:	2200      	movs	r2, #0
 8012750:	9216      	str	r2, [sp, #88]	; 0x58
 8012752:	460d      	mov	r5, r1
 8012754:	f04f 0800 	mov.w	r8, #0
 8012758:	f04f 0900 	mov.w	r9, #0
 801275c:	460a      	mov	r2, r1
 801275e:	9215      	str	r2, [sp, #84]	; 0x54
 8012760:	7811      	ldrb	r1, [r2, #0]
 8012762:	292b      	cmp	r1, #43	; 0x2b
 8012764:	d04c      	beq.n	8012800 <_strtod_l+0xc0>
 8012766:	d83a      	bhi.n	80127de <_strtod_l+0x9e>
 8012768:	290d      	cmp	r1, #13
 801276a:	d834      	bhi.n	80127d6 <_strtod_l+0x96>
 801276c:	2908      	cmp	r1, #8
 801276e:	d834      	bhi.n	80127da <_strtod_l+0x9a>
 8012770:	2900      	cmp	r1, #0
 8012772:	d03d      	beq.n	80127f0 <_strtod_l+0xb0>
 8012774:	2200      	movs	r2, #0
 8012776:	920a      	str	r2, [sp, #40]	; 0x28
 8012778:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801277a:	7832      	ldrb	r2, [r6, #0]
 801277c:	2a30      	cmp	r2, #48	; 0x30
 801277e:	f040 80b4 	bne.w	80128ea <_strtod_l+0x1aa>
 8012782:	7872      	ldrb	r2, [r6, #1]
 8012784:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012788:	2a58      	cmp	r2, #88	; 0x58
 801278a:	d170      	bne.n	801286e <_strtod_l+0x12e>
 801278c:	9302      	str	r3, [sp, #8]
 801278e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012790:	9301      	str	r3, [sp, #4]
 8012792:	ab16      	add	r3, sp, #88	; 0x58
 8012794:	9300      	str	r3, [sp, #0]
 8012796:	4a8e      	ldr	r2, [pc, #568]	; (80129d0 <_strtod_l+0x290>)
 8012798:	ab17      	add	r3, sp, #92	; 0x5c
 801279a:	a915      	add	r1, sp, #84	; 0x54
 801279c:	4620      	mov	r0, r4
 801279e:	f001 fcc3 	bl	8014128 <__gethex>
 80127a2:	f010 070f 	ands.w	r7, r0, #15
 80127a6:	4605      	mov	r5, r0
 80127a8:	d005      	beq.n	80127b6 <_strtod_l+0x76>
 80127aa:	2f06      	cmp	r7, #6
 80127ac:	d12a      	bne.n	8012804 <_strtod_l+0xc4>
 80127ae:	3601      	adds	r6, #1
 80127b0:	2300      	movs	r3, #0
 80127b2:	9615      	str	r6, [sp, #84]	; 0x54
 80127b4:	930a      	str	r3, [sp, #40]	; 0x28
 80127b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	f040 857f 	bne.w	80132bc <_strtod_l+0xb7c>
 80127be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127c0:	b1db      	cbz	r3, 80127fa <_strtod_l+0xba>
 80127c2:	4642      	mov	r2, r8
 80127c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80127c8:	ec43 2b10 	vmov	d0, r2, r3
 80127cc:	b01b      	add	sp, #108	; 0x6c
 80127ce:	ecbd 8b02 	vpop	{d8}
 80127d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d6:	2920      	cmp	r1, #32
 80127d8:	d1cc      	bne.n	8012774 <_strtod_l+0x34>
 80127da:	3201      	adds	r2, #1
 80127dc:	e7bf      	b.n	801275e <_strtod_l+0x1e>
 80127de:	292d      	cmp	r1, #45	; 0x2d
 80127e0:	d1c8      	bne.n	8012774 <_strtod_l+0x34>
 80127e2:	2101      	movs	r1, #1
 80127e4:	910a      	str	r1, [sp, #40]	; 0x28
 80127e6:	1c51      	adds	r1, r2, #1
 80127e8:	9115      	str	r1, [sp, #84]	; 0x54
 80127ea:	7852      	ldrb	r2, [r2, #1]
 80127ec:	2a00      	cmp	r2, #0
 80127ee:	d1c3      	bne.n	8012778 <_strtod_l+0x38>
 80127f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80127f2:	9515      	str	r5, [sp, #84]	; 0x54
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	f040 855f 	bne.w	80132b8 <_strtod_l+0xb78>
 80127fa:	4642      	mov	r2, r8
 80127fc:	464b      	mov	r3, r9
 80127fe:	e7e3      	b.n	80127c8 <_strtod_l+0x88>
 8012800:	2100      	movs	r1, #0
 8012802:	e7ef      	b.n	80127e4 <_strtod_l+0xa4>
 8012804:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012806:	b13a      	cbz	r2, 8012818 <_strtod_l+0xd8>
 8012808:	2135      	movs	r1, #53	; 0x35
 801280a:	a818      	add	r0, sp, #96	; 0x60
 801280c:	f7ff ff37 	bl	801267e <__copybits>
 8012810:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012812:	4620      	mov	r0, r4
 8012814:	f7ff fb0a 	bl	8011e2c <_Bfree>
 8012818:	3f01      	subs	r7, #1
 801281a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801281c:	2f04      	cmp	r7, #4
 801281e:	d806      	bhi.n	801282e <_strtod_l+0xee>
 8012820:	e8df f007 	tbb	[pc, r7]
 8012824:	201d0314 	.word	0x201d0314
 8012828:	14          	.byte	0x14
 8012829:	00          	.byte	0x00
 801282a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801282e:	05e9      	lsls	r1, r5, #23
 8012830:	bf48      	it	mi
 8012832:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8012836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801283a:	0d1b      	lsrs	r3, r3, #20
 801283c:	051b      	lsls	r3, r3, #20
 801283e:	2b00      	cmp	r3, #0
 8012840:	d1b9      	bne.n	80127b6 <_strtod_l+0x76>
 8012842:	f7fe fbb9 	bl	8010fb8 <__errno>
 8012846:	2322      	movs	r3, #34	; 0x22
 8012848:	6003      	str	r3, [r0, #0]
 801284a:	e7b4      	b.n	80127b6 <_strtod_l+0x76>
 801284c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8012850:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012854:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012858:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801285c:	e7e7      	b.n	801282e <_strtod_l+0xee>
 801285e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80129d8 <_strtod_l+0x298>
 8012862:	e7e4      	b.n	801282e <_strtod_l+0xee>
 8012864:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012868:	f04f 38ff 	mov.w	r8, #4294967295
 801286c:	e7df      	b.n	801282e <_strtod_l+0xee>
 801286e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012870:	1c5a      	adds	r2, r3, #1
 8012872:	9215      	str	r2, [sp, #84]	; 0x54
 8012874:	785b      	ldrb	r3, [r3, #1]
 8012876:	2b30      	cmp	r3, #48	; 0x30
 8012878:	d0f9      	beq.n	801286e <_strtod_l+0x12e>
 801287a:	2b00      	cmp	r3, #0
 801287c:	d09b      	beq.n	80127b6 <_strtod_l+0x76>
 801287e:	2301      	movs	r3, #1
 8012880:	f04f 0a00 	mov.w	sl, #0
 8012884:	9304      	str	r3, [sp, #16]
 8012886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012888:	930b      	str	r3, [sp, #44]	; 0x2c
 801288a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801288e:	46d3      	mov	fp, sl
 8012890:	220a      	movs	r2, #10
 8012892:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012894:	7806      	ldrb	r6, [r0, #0]
 8012896:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801289a:	b2d9      	uxtb	r1, r3
 801289c:	2909      	cmp	r1, #9
 801289e:	d926      	bls.n	80128ee <_strtod_l+0x1ae>
 80128a0:	494c      	ldr	r1, [pc, #304]	; (80129d4 <_strtod_l+0x294>)
 80128a2:	2201      	movs	r2, #1
 80128a4:	f001 fb79 	bl	8013f9a <strncmp>
 80128a8:	2800      	cmp	r0, #0
 80128aa:	d030      	beq.n	801290e <_strtod_l+0x1ce>
 80128ac:	2000      	movs	r0, #0
 80128ae:	4632      	mov	r2, r6
 80128b0:	9005      	str	r0, [sp, #20]
 80128b2:	465e      	mov	r6, fp
 80128b4:	4603      	mov	r3, r0
 80128b6:	2a65      	cmp	r2, #101	; 0x65
 80128b8:	d001      	beq.n	80128be <_strtod_l+0x17e>
 80128ba:	2a45      	cmp	r2, #69	; 0x45
 80128bc:	d113      	bne.n	80128e6 <_strtod_l+0x1a6>
 80128be:	b91e      	cbnz	r6, 80128c8 <_strtod_l+0x188>
 80128c0:	9a04      	ldr	r2, [sp, #16]
 80128c2:	4302      	orrs	r2, r0
 80128c4:	d094      	beq.n	80127f0 <_strtod_l+0xb0>
 80128c6:	2600      	movs	r6, #0
 80128c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80128ca:	1c6a      	adds	r2, r5, #1
 80128cc:	9215      	str	r2, [sp, #84]	; 0x54
 80128ce:	786a      	ldrb	r2, [r5, #1]
 80128d0:	2a2b      	cmp	r2, #43	; 0x2b
 80128d2:	d074      	beq.n	80129be <_strtod_l+0x27e>
 80128d4:	2a2d      	cmp	r2, #45	; 0x2d
 80128d6:	d078      	beq.n	80129ca <_strtod_l+0x28a>
 80128d8:	f04f 0c00 	mov.w	ip, #0
 80128dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80128e0:	2909      	cmp	r1, #9
 80128e2:	d97f      	bls.n	80129e4 <_strtod_l+0x2a4>
 80128e4:	9515      	str	r5, [sp, #84]	; 0x54
 80128e6:	2700      	movs	r7, #0
 80128e8:	e09e      	b.n	8012a28 <_strtod_l+0x2e8>
 80128ea:	2300      	movs	r3, #0
 80128ec:	e7c8      	b.n	8012880 <_strtod_l+0x140>
 80128ee:	f1bb 0f08 	cmp.w	fp, #8
 80128f2:	bfd8      	it	le
 80128f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80128f6:	f100 0001 	add.w	r0, r0, #1
 80128fa:	bfda      	itte	le
 80128fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8012900:	9309      	strle	r3, [sp, #36]	; 0x24
 8012902:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8012906:	f10b 0b01 	add.w	fp, fp, #1
 801290a:	9015      	str	r0, [sp, #84]	; 0x54
 801290c:	e7c1      	b.n	8012892 <_strtod_l+0x152>
 801290e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012910:	1c5a      	adds	r2, r3, #1
 8012912:	9215      	str	r2, [sp, #84]	; 0x54
 8012914:	785a      	ldrb	r2, [r3, #1]
 8012916:	f1bb 0f00 	cmp.w	fp, #0
 801291a:	d037      	beq.n	801298c <_strtod_l+0x24c>
 801291c:	9005      	str	r0, [sp, #20]
 801291e:	465e      	mov	r6, fp
 8012920:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012924:	2b09      	cmp	r3, #9
 8012926:	d912      	bls.n	801294e <_strtod_l+0x20e>
 8012928:	2301      	movs	r3, #1
 801292a:	e7c4      	b.n	80128b6 <_strtod_l+0x176>
 801292c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801292e:	1c5a      	adds	r2, r3, #1
 8012930:	9215      	str	r2, [sp, #84]	; 0x54
 8012932:	785a      	ldrb	r2, [r3, #1]
 8012934:	3001      	adds	r0, #1
 8012936:	2a30      	cmp	r2, #48	; 0x30
 8012938:	d0f8      	beq.n	801292c <_strtod_l+0x1ec>
 801293a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801293e:	2b08      	cmp	r3, #8
 8012940:	f200 84c1 	bhi.w	80132c6 <_strtod_l+0xb86>
 8012944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012946:	9005      	str	r0, [sp, #20]
 8012948:	2000      	movs	r0, #0
 801294a:	930b      	str	r3, [sp, #44]	; 0x2c
 801294c:	4606      	mov	r6, r0
 801294e:	3a30      	subs	r2, #48	; 0x30
 8012950:	f100 0301 	add.w	r3, r0, #1
 8012954:	d014      	beq.n	8012980 <_strtod_l+0x240>
 8012956:	9905      	ldr	r1, [sp, #20]
 8012958:	4419      	add	r1, r3
 801295a:	9105      	str	r1, [sp, #20]
 801295c:	4633      	mov	r3, r6
 801295e:	eb00 0c06 	add.w	ip, r0, r6
 8012962:	210a      	movs	r1, #10
 8012964:	4563      	cmp	r3, ip
 8012966:	d113      	bne.n	8012990 <_strtod_l+0x250>
 8012968:	1833      	adds	r3, r6, r0
 801296a:	2b08      	cmp	r3, #8
 801296c:	f106 0601 	add.w	r6, r6, #1
 8012970:	4406      	add	r6, r0
 8012972:	dc1a      	bgt.n	80129aa <_strtod_l+0x26a>
 8012974:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012976:	230a      	movs	r3, #10
 8012978:	fb03 2301 	mla	r3, r3, r1, r2
 801297c:	9309      	str	r3, [sp, #36]	; 0x24
 801297e:	2300      	movs	r3, #0
 8012980:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012982:	1c51      	adds	r1, r2, #1
 8012984:	9115      	str	r1, [sp, #84]	; 0x54
 8012986:	7852      	ldrb	r2, [r2, #1]
 8012988:	4618      	mov	r0, r3
 801298a:	e7c9      	b.n	8012920 <_strtod_l+0x1e0>
 801298c:	4658      	mov	r0, fp
 801298e:	e7d2      	b.n	8012936 <_strtod_l+0x1f6>
 8012990:	2b08      	cmp	r3, #8
 8012992:	f103 0301 	add.w	r3, r3, #1
 8012996:	dc03      	bgt.n	80129a0 <_strtod_l+0x260>
 8012998:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801299a:	434f      	muls	r7, r1
 801299c:	9709      	str	r7, [sp, #36]	; 0x24
 801299e:	e7e1      	b.n	8012964 <_strtod_l+0x224>
 80129a0:	2b10      	cmp	r3, #16
 80129a2:	bfd8      	it	le
 80129a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80129a8:	e7dc      	b.n	8012964 <_strtod_l+0x224>
 80129aa:	2e10      	cmp	r6, #16
 80129ac:	bfdc      	itt	le
 80129ae:	230a      	movle	r3, #10
 80129b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80129b4:	e7e3      	b.n	801297e <_strtod_l+0x23e>
 80129b6:	2300      	movs	r3, #0
 80129b8:	9305      	str	r3, [sp, #20]
 80129ba:	2301      	movs	r3, #1
 80129bc:	e780      	b.n	80128c0 <_strtod_l+0x180>
 80129be:	f04f 0c00 	mov.w	ip, #0
 80129c2:	1caa      	adds	r2, r5, #2
 80129c4:	9215      	str	r2, [sp, #84]	; 0x54
 80129c6:	78aa      	ldrb	r2, [r5, #2]
 80129c8:	e788      	b.n	80128dc <_strtod_l+0x19c>
 80129ca:	f04f 0c01 	mov.w	ip, #1
 80129ce:	e7f8      	b.n	80129c2 <_strtod_l+0x282>
 80129d0:	080165a8 	.word	0x080165a8
 80129d4:	080165a4 	.word	0x080165a4
 80129d8:	7ff00000 	.word	0x7ff00000
 80129dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80129de:	1c51      	adds	r1, r2, #1
 80129e0:	9115      	str	r1, [sp, #84]	; 0x54
 80129e2:	7852      	ldrb	r2, [r2, #1]
 80129e4:	2a30      	cmp	r2, #48	; 0x30
 80129e6:	d0f9      	beq.n	80129dc <_strtod_l+0x29c>
 80129e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80129ec:	2908      	cmp	r1, #8
 80129ee:	f63f af7a 	bhi.w	80128e6 <_strtod_l+0x1a6>
 80129f2:	3a30      	subs	r2, #48	; 0x30
 80129f4:	9208      	str	r2, [sp, #32]
 80129f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80129f8:	920c      	str	r2, [sp, #48]	; 0x30
 80129fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80129fc:	1c57      	adds	r7, r2, #1
 80129fe:	9715      	str	r7, [sp, #84]	; 0x54
 8012a00:	7852      	ldrb	r2, [r2, #1]
 8012a02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8012a06:	f1be 0f09 	cmp.w	lr, #9
 8012a0a:	d938      	bls.n	8012a7e <_strtod_l+0x33e>
 8012a0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012a0e:	1a7f      	subs	r7, r7, r1
 8012a10:	2f08      	cmp	r7, #8
 8012a12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012a16:	dc03      	bgt.n	8012a20 <_strtod_l+0x2e0>
 8012a18:	9908      	ldr	r1, [sp, #32]
 8012a1a:	428f      	cmp	r7, r1
 8012a1c:	bfa8      	it	ge
 8012a1e:	460f      	movge	r7, r1
 8012a20:	f1bc 0f00 	cmp.w	ip, #0
 8012a24:	d000      	beq.n	8012a28 <_strtod_l+0x2e8>
 8012a26:	427f      	negs	r7, r7
 8012a28:	2e00      	cmp	r6, #0
 8012a2a:	d14f      	bne.n	8012acc <_strtod_l+0x38c>
 8012a2c:	9904      	ldr	r1, [sp, #16]
 8012a2e:	4301      	orrs	r1, r0
 8012a30:	f47f aec1 	bne.w	80127b6 <_strtod_l+0x76>
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	f47f aedb 	bne.w	80127f0 <_strtod_l+0xb0>
 8012a3a:	2a69      	cmp	r2, #105	; 0x69
 8012a3c:	d029      	beq.n	8012a92 <_strtod_l+0x352>
 8012a3e:	dc26      	bgt.n	8012a8e <_strtod_l+0x34e>
 8012a40:	2a49      	cmp	r2, #73	; 0x49
 8012a42:	d026      	beq.n	8012a92 <_strtod_l+0x352>
 8012a44:	2a4e      	cmp	r2, #78	; 0x4e
 8012a46:	f47f aed3 	bne.w	80127f0 <_strtod_l+0xb0>
 8012a4a:	499b      	ldr	r1, [pc, #620]	; (8012cb8 <_strtod_l+0x578>)
 8012a4c:	a815      	add	r0, sp, #84	; 0x54
 8012a4e:	f001 fdab 	bl	80145a8 <__match>
 8012a52:	2800      	cmp	r0, #0
 8012a54:	f43f aecc 	beq.w	80127f0 <_strtod_l+0xb0>
 8012a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2b28      	cmp	r3, #40	; 0x28
 8012a5e:	d12f      	bne.n	8012ac0 <_strtod_l+0x380>
 8012a60:	4996      	ldr	r1, [pc, #600]	; (8012cbc <_strtod_l+0x57c>)
 8012a62:	aa18      	add	r2, sp, #96	; 0x60
 8012a64:	a815      	add	r0, sp, #84	; 0x54
 8012a66:	f001 fdb3 	bl	80145d0 <__hexnan>
 8012a6a:	2805      	cmp	r0, #5
 8012a6c:	d128      	bne.n	8012ac0 <_strtod_l+0x380>
 8012a6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012a74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012a78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012a7c:	e69b      	b.n	80127b6 <_strtod_l+0x76>
 8012a7e:	9f08      	ldr	r7, [sp, #32]
 8012a80:	210a      	movs	r1, #10
 8012a82:	fb01 2107 	mla	r1, r1, r7, r2
 8012a86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8012a8a:	9208      	str	r2, [sp, #32]
 8012a8c:	e7b5      	b.n	80129fa <_strtod_l+0x2ba>
 8012a8e:	2a6e      	cmp	r2, #110	; 0x6e
 8012a90:	e7d9      	b.n	8012a46 <_strtod_l+0x306>
 8012a92:	498b      	ldr	r1, [pc, #556]	; (8012cc0 <_strtod_l+0x580>)
 8012a94:	a815      	add	r0, sp, #84	; 0x54
 8012a96:	f001 fd87 	bl	80145a8 <__match>
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	f43f aea8 	beq.w	80127f0 <_strtod_l+0xb0>
 8012aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012aa2:	4988      	ldr	r1, [pc, #544]	; (8012cc4 <_strtod_l+0x584>)
 8012aa4:	3b01      	subs	r3, #1
 8012aa6:	a815      	add	r0, sp, #84	; 0x54
 8012aa8:	9315      	str	r3, [sp, #84]	; 0x54
 8012aaa:	f001 fd7d 	bl	80145a8 <__match>
 8012aae:	b910      	cbnz	r0, 8012ab6 <_strtod_l+0x376>
 8012ab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	9315      	str	r3, [sp, #84]	; 0x54
 8012ab6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012cd4 <_strtod_l+0x594>
 8012aba:	f04f 0800 	mov.w	r8, #0
 8012abe:	e67a      	b.n	80127b6 <_strtod_l+0x76>
 8012ac0:	4881      	ldr	r0, [pc, #516]	; (8012cc8 <_strtod_l+0x588>)
 8012ac2:	f001 fa8d 	bl	8013fe0 <nan>
 8012ac6:	ec59 8b10 	vmov	r8, r9, d0
 8012aca:	e674      	b.n	80127b6 <_strtod_l+0x76>
 8012acc:	9b05      	ldr	r3, [sp, #20]
 8012ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ad0:	1afb      	subs	r3, r7, r3
 8012ad2:	f1bb 0f00 	cmp.w	fp, #0
 8012ad6:	bf08      	it	eq
 8012ad8:	46b3      	moveq	fp, r6
 8012ada:	2e10      	cmp	r6, #16
 8012adc:	9308      	str	r3, [sp, #32]
 8012ade:	4635      	mov	r5, r6
 8012ae0:	bfa8      	it	ge
 8012ae2:	2510      	movge	r5, #16
 8012ae4:	f7ed fd16 	bl	8000514 <__aeabi_ui2d>
 8012ae8:	2e09      	cmp	r6, #9
 8012aea:	4680      	mov	r8, r0
 8012aec:	4689      	mov	r9, r1
 8012aee:	dd13      	ble.n	8012b18 <_strtod_l+0x3d8>
 8012af0:	4b76      	ldr	r3, [pc, #472]	; (8012ccc <_strtod_l+0x58c>)
 8012af2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012af6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012afa:	f7ed fd85 	bl	8000608 <__aeabi_dmul>
 8012afe:	4680      	mov	r8, r0
 8012b00:	4650      	mov	r0, sl
 8012b02:	4689      	mov	r9, r1
 8012b04:	f7ed fd06 	bl	8000514 <__aeabi_ui2d>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	4640      	mov	r0, r8
 8012b0e:	4649      	mov	r1, r9
 8012b10:	f7ed fbc4 	bl	800029c <__adddf3>
 8012b14:	4680      	mov	r8, r0
 8012b16:	4689      	mov	r9, r1
 8012b18:	2e0f      	cmp	r6, #15
 8012b1a:	dc38      	bgt.n	8012b8e <_strtod_l+0x44e>
 8012b1c:	9b08      	ldr	r3, [sp, #32]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	f43f ae49 	beq.w	80127b6 <_strtod_l+0x76>
 8012b24:	dd24      	ble.n	8012b70 <_strtod_l+0x430>
 8012b26:	2b16      	cmp	r3, #22
 8012b28:	dc0b      	bgt.n	8012b42 <_strtod_l+0x402>
 8012b2a:	4968      	ldr	r1, [pc, #416]	; (8012ccc <_strtod_l+0x58c>)
 8012b2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b34:	4642      	mov	r2, r8
 8012b36:	464b      	mov	r3, r9
 8012b38:	f7ed fd66 	bl	8000608 <__aeabi_dmul>
 8012b3c:	4680      	mov	r8, r0
 8012b3e:	4689      	mov	r9, r1
 8012b40:	e639      	b.n	80127b6 <_strtod_l+0x76>
 8012b42:	9a08      	ldr	r2, [sp, #32]
 8012b44:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	db20      	blt.n	8012b8e <_strtod_l+0x44e>
 8012b4c:	4c5f      	ldr	r4, [pc, #380]	; (8012ccc <_strtod_l+0x58c>)
 8012b4e:	f1c6 060f 	rsb	r6, r6, #15
 8012b52:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012b56:	4642      	mov	r2, r8
 8012b58:	464b      	mov	r3, r9
 8012b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b5e:	f7ed fd53 	bl	8000608 <__aeabi_dmul>
 8012b62:	9b08      	ldr	r3, [sp, #32]
 8012b64:	1b9e      	subs	r6, r3, r6
 8012b66:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8012b6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012b6e:	e7e3      	b.n	8012b38 <_strtod_l+0x3f8>
 8012b70:	9b08      	ldr	r3, [sp, #32]
 8012b72:	3316      	adds	r3, #22
 8012b74:	db0b      	blt.n	8012b8e <_strtod_l+0x44e>
 8012b76:	9b05      	ldr	r3, [sp, #20]
 8012b78:	1bdf      	subs	r7, r3, r7
 8012b7a:	4b54      	ldr	r3, [pc, #336]	; (8012ccc <_strtod_l+0x58c>)
 8012b7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b84:	4640      	mov	r0, r8
 8012b86:	4649      	mov	r1, r9
 8012b88:	f7ed fe68 	bl	800085c <__aeabi_ddiv>
 8012b8c:	e7d6      	b.n	8012b3c <_strtod_l+0x3fc>
 8012b8e:	9b08      	ldr	r3, [sp, #32]
 8012b90:	1b75      	subs	r5, r6, r5
 8012b92:	441d      	add	r5, r3
 8012b94:	2d00      	cmp	r5, #0
 8012b96:	dd70      	ble.n	8012c7a <_strtod_l+0x53a>
 8012b98:	f015 030f 	ands.w	r3, r5, #15
 8012b9c:	d00a      	beq.n	8012bb4 <_strtod_l+0x474>
 8012b9e:	494b      	ldr	r1, [pc, #300]	; (8012ccc <_strtod_l+0x58c>)
 8012ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012ba4:	4642      	mov	r2, r8
 8012ba6:	464b      	mov	r3, r9
 8012ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bac:	f7ed fd2c 	bl	8000608 <__aeabi_dmul>
 8012bb0:	4680      	mov	r8, r0
 8012bb2:	4689      	mov	r9, r1
 8012bb4:	f035 050f 	bics.w	r5, r5, #15
 8012bb8:	d04d      	beq.n	8012c56 <_strtod_l+0x516>
 8012bba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8012bbe:	dd22      	ble.n	8012c06 <_strtod_l+0x4c6>
 8012bc0:	2500      	movs	r5, #0
 8012bc2:	46ab      	mov	fp, r5
 8012bc4:	9509      	str	r5, [sp, #36]	; 0x24
 8012bc6:	9505      	str	r5, [sp, #20]
 8012bc8:	2322      	movs	r3, #34	; 0x22
 8012bca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012cd4 <_strtod_l+0x594>
 8012bce:	6023      	str	r3, [r4, #0]
 8012bd0:	f04f 0800 	mov.w	r8, #0
 8012bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	f43f aded 	beq.w	80127b6 <_strtod_l+0x76>
 8012bdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012bde:	4620      	mov	r0, r4
 8012be0:	f7ff f924 	bl	8011e2c <_Bfree>
 8012be4:	9905      	ldr	r1, [sp, #20]
 8012be6:	4620      	mov	r0, r4
 8012be8:	f7ff f920 	bl	8011e2c <_Bfree>
 8012bec:	4659      	mov	r1, fp
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f7ff f91c 	bl	8011e2c <_Bfree>
 8012bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	f7ff f918 	bl	8011e2c <_Bfree>
 8012bfc:	4629      	mov	r1, r5
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f7ff f914 	bl	8011e2c <_Bfree>
 8012c04:	e5d7      	b.n	80127b6 <_strtod_l+0x76>
 8012c06:	4b32      	ldr	r3, [pc, #200]	; (8012cd0 <_strtod_l+0x590>)
 8012c08:	9304      	str	r3, [sp, #16]
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	112d      	asrs	r5, r5, #4
 8012c0e:	4640      	mov	r0, r8
 8012c10:	4649      	mov	r1, r9
 8012c12:	469a      	mov	sl, r3
 8012c14:	2d01      	cmp	r5, #1
 8012c16:	dc21      	bgt.n	8012c5c <_strtod_l+0x51c>
 8012c18:	b10b      	cbz	r3, 8012c1e <_strtod_l+0x4de>
 8012c1a:	4680      	mov	r8, r0
 8012c1c:	4689      	mov	r9, r1
 8012c1e:	492c      	ldr	r1, [pc, #176]	; (8012cd0 <_strtod_l+0x590>)
 8012c20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012c24:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012c28:	4642      	mov	r2, r8
 8012c2a:	464b      	mov	r3, r9
 8012c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c30:	f7ed fcea 	bl	8000608 <__aeabi_dmul>
 8012c34:	4b27      	ldr	r3, [pc, #156]	; (8012cd4 <_strtod_l+0x594>)
 8012c36:	460a      	mov	r2, r1
 8012c38:	400b      	ands	r3, r1
 8012c3a:	4927      	ldr	r1, [pc, #156]	; (8012cd8 <_strtod_l+0x598>)
 8012c3c:	428b      	cmp	r3, r1
 8012c3e:	4680      	mov	r8, r0
 8012c40:	d8be      	bhi.n	8012bc0 <_strtod_l+0x480>
 8012c42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012c46:	428b      	cmp	r3, r1
 8012c48:	bf86      	itte	hi
 8012c4a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8012cdc <_strtod_l+0x59c>
 8012c4e:	f04f 38ff 	movhi.w	r8, #4294967295
 8012c52:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012c56:	2300      	movs	r3, #0
 8012c58:	9304      	str	r3, [sp, #16]
 8012c5a:	e07b      	b.n	8012d54 <_strtod_l+0x614>
 8012c5c:	07ea      	lsls	r2, r5, #31
 8012c5e:	d505      	bpl.n	8012c6c <_strtod_l+0x52c>
 8012c60:	9b04      	ldr	r3, [sp, #16]
 8012c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c66:	f7ed fccf 	bl	8000608 <__aeabi_dmul>
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	9a04      	ldr	r2, [sp, #16]
 8012c6e:	3208      	adds	r2, #8
 8012c70:	f10a 0a01 	add.w	sl, sl, #1
 8012c74:	106d      	asrs	r5, r5, #1
 8012c76:	9204      	str	r2, [sp, #16]
 8012c78:	e7cc      	b.n	8012c14 <_strtod_l+0x4d4>
 8012c7a:	d0ec      	beq.n	8012c56 <_strtod_l+0x516>
 8012c7c:	426d      	negs	r5, r5
 8012c7e:	f015 020f 	ands.w	r2, r5, #15
 8012c82:	d00a      	beq.n	8012c9a <_strtod_l+0x55a>
 8012c84:	4b11      	ldr	r3, [pc, #68]	; (8012ccc <_strtod_l+0x58c>)
 8012c86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c8a:	4640      	mov	r0, r8
 8012c8c:	4649      	mov	r1, r9
 8012c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c92:	f7ed fde3 	bl	800085c <__aeabi_ddiv>
 8012c96:	4680      	mov	r8, r0
 8012c98:	4689      	mov	r9, r1
 8012c9a:	112d      	asrs	r5, r5, #4
 8012c9c:	d0db      	beq.n	8012c56 <_strtod_l+0x516>
 8012c9e:	2d1f      	cmp	r5, #31
 8012ca0:	dd1e      	ble.n	8012ce0 <_strtod_l+0x5a0>
 8012ca2:	2500      	movs	r5, #0
 8012ca4:	46ab      	mov	fp, r5
 8012ca6:	9509      	str	r5, [sp, #36]	; 0x24
 8012ca8:	9505      	str	r5, [sp, #20]
 8012caa:	2322      	movs	r3, #34	; 0x22
 8012cac:	f04f 0800 	mov.w	r8, #0
 8012cb0:	f04f 0900 	mov.w	r9, #0
 8012cb4:	6023      	str	r3, [r4, #0]
 8012cb6:	e78d      	b.n	8012bd4 <_strtod_l+0x494>
 8012cb8:	08016395 	.word	0x08016395
 8012cbc:	080165bc 	.word	0x080165bc
 8012cc0:	0801638d 	.word	0x0801638d
 8012cc4:	080163c2 	.word	0x080163c2
 8012cc8:	08016768 	.word	0x08016768
 8012ccc:	080164d0 	.word	0x080164d0
 8012cd0:	080164a8 	.word	0x080164a8
 8012cd4:	7ff00000 	.word	0x7ff00000
 8012cd8:	7ca00000 	.word	0x7ca00000
 8012cdc:	7fefffff 	.word	0x7fefffff
 8012ce0:	f015 0310 	ands.w	r3, r5, #16
 8012ce4:	bf18      	it	ne
 8012ce6:	236a      	movne	r3, #106	; 0x6a
 8012ce8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801308c <_strtod_l+0x94c>
 8012cec:	9304      	str	r3, [sp, #16]
 8012cee:	4640      	mov	r0, r8
 8012cf0:	4649      	mov	r1, r9
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	07ea      	lsls	r2, r5, #31
 8012cf6:	d504      	bpl.n	8012d02 <_strtod_l+0x5c2>
 8012cf8:	e9da 2300 	ldrd	r2, r3, [sl]
 8012cfc:	f7ed fc84 	bl	8000608 <__aeabi_dmul>
 8012d00:	2301      	movs	r3, #1
 8012d02:	106d      	asrs	r5, r5, #1
 8012d04:	f10a 0a08 	add.w	sl, sl, #8
 8012d08:	d1f4      	bne.n	8012cf4 <_strtod_l+0x5b4>
 8012d0a:	b10b      	cbz	r3, 8012d10 <_strtod_l+0x5d0>
 8012d0c:	4680      	mov	r8, r0
 8012d0e:	4689      	mov	r9, r1
 8012d10:	9b04      	ldr	r3, [sp, #16]
 8012d12:	b1bb      	cbz	r3, 8012d44 <_strtod_l+0x604>
 8012d14:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012d18:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	4649      	mov	r1, r9
 8012d20:	dd10      	ble.n	8012d44 <_strtod_l+0x604>
 8012d22:	2b1f      	cmp	r3, #31
 8012d24:	f340 811e 	ble.w	8012f64 <_strtod_l+0x824>
 8012d28:	2b34      	cmp	r3, #52	; 0x34
 8012d2a:	bfde      	ittt	le
 8012d2c:	f04f 33ff 	movle.w	r3, #4294967295
 8012d30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012d34:	4093      	lslle	r3, r2
 8012d36:	f04f 0800 	mov.w	r8, #0
 8012d3a:	bfcc      	ite	gt
 8012d3c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012d40:	ea03 0901 	andle.w	r9, r3, r1
 8012d44:	2200      	movs	r2, #0
 8012d46:	2300      	movs	r3, #0
 8012d48:	4640      	mov	r0, r8
 8012d4a:	4649      	mov	r1, r9
 8012d4c:	f7ed fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 8012d50:	2800      	cmp	r0, #0
 8012d52:	d1a6      	bne.n	8012ca2 <_strtod_l+0x562>
 8012d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d56:	9300      	str	r3, [sp, #0]
 8012d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d5a:	4633      	mov	r3, r6
 8012d5c:	465a      	mov	r2, fp
 8012d5e:	4620      	mov	r0, r4
 8012d60:	f7ff f8cc 	bl	8011efc <__s2b>
 8012d64:	9009      	str	r0, [sp, #36]	; 0x24
 8012d66:	2800      	cmp	r0, #0
 8012d68:	f43f af2a 	beq.w	8012bc0 <_strtod_l+0x480>
 8012d6c:	9a08      	ldr	r2, [sp, #32]
 8012d6e:	9b05      	ldr	r3, [sp, #20]
 8012d70:	2a00      	cmp	r2, #0
 8012d72:	eba3 0307 	sub.w	r3, r3, r7
 8012d76:	bfa8      	it	ge
 8012d78:	2300      	movge	r3, #0
 8012d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8012d7c:	2500      	movs	r5, #0
 8012d7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012d82:	9312      	str	r3, [sp, #72]	; 0x48
 8012d84:	46ab      	mov	fp, r5
 8012d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d88:	4620      	mov	r0, r4
 8012d8a:	6859      	ldr	r1, [r3, #4]
 8012d8c:	f7ff f80e 	bl	8011dac <_Balloc>
 8012d90:	9005      	str	r0, [sp, #20]
 8012d92:	2800      	cmp	r0, #0
 8012d94:	f43f af18 	beq.w	8012bc8 <_strtod_l+0x488>
 8012d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d9a:	691a      	ldr	r2, [r3, #16]
 8012d9c:	3202      	adds	r2, #2
 8012d9e:	f103 010c 	add.w	r1, r3, #12
 8012da2:	0092      	lsls	r2, r2, #2
 8012da4:	300c      	adds	r0, #12
 8012da6:	f001 f90a 	bl	8013fbe <memcpy>
 8012daa:	ec49 8b10 	vmov	d0, r8, r9
 8012dae:	aa18      	add	r2, sp, #96	; 0x60
 8012db0:	a917      	add	r1, sp, #92	; 0x5c
 8012db2:	4620      	mov	r0, r4
 8012db4:	f7ff fbd6 	bl	8012564 <__d2b>
 8012db8:	ec49 8b18 	vmov	d8, r8, r9
 8012dbc:	9016      	str	r0, [sp, #88]	; 0x58
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	f43f af02 	beq.w	8012bc8 <_strtod_l+0x488>
 8012dc4:	2101      	movs	r1, #1
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	f7ff f930 	bl	801202c <__i2b>
 8012dcc:	4683      	mov	fp, r0
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	f43f aefa 	beq.w	8012bc8 <_strtod_l+0x488>
 8012dd4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012dd6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012dd8:	2e00      	cmp	r6, #0
 8012dda:	bfab      	itete	ge
 8012ddc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8012dde:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012de0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012de2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8012de6:	bfac      	ite	ge
 8012de8:	eb06 0a03 	addge.w	sl, r6, r3
 8012dec:	1b9f      	sublt	r7, r3, r6
 8012dee:	9b04      	ldr	r3, [sp, #16]
 8012df0:	1af6      	subs	r6, r6, r3
 8012df2:	4416      	add	r6, r2
 8012df4:	4ba0      	ldr	r3, [pc, #640]	; (8013078 <_strtod_l+0x938>)
 8012df6:	3e01      	subs	r6, #1
 8012df8:	429e      	cmp	r6, r3
 8012dfa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012dfe:	f280 80c4 	bge.w	8012f8a <_strtod_l+0x84a>
 8012e02:	1b9b      	subs	r3, r3, r6
 8012e04:	2b1f      	cmp	r3, #31
 8012e06:	eba2 0203 	sub.w	r2, r2, r3
 8012e0a:	f04f 0101 	mov.w	r1, #1
 8012e0e:	f300 80b0 	bgt.w	8012f72 <_strtod_l+0x832>
 8012e12:	fa01 f303 	lsl.w	r3, r1, r3
 8012e16:	930e      	str	r3, [sp, #56]	; 0x38
 8012e18:	2300      	movs	r3, #0
 8012e1a:	930d      	str	r3, [sp, #52]	; 0x34
 8012e1c:	eb0a 0602 	add.w	r6, sl, r2
 8012e20:	9b04      	ldr	r3, [sp, #16]
 8012e22:	45b2      	cmp	sl, r6
 8012e24:	4417      	add	r7, r2
 8012e26:	441f      	add	r7, r3
 8012e28:	4653      	mov	r3, sl
 8012e2a:	bfa8      	it	ge
 8012e2c:	4633      	movge	r3, r6
 8012e2e:	42bb      	cmp	r3, r7
 8012e30:	bfa8      	it	ge
 8012e32:	463b      	movge	r3, r7
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	bfc2      	ittt	gt
 8012e38:	1af6      	subgt	r6, r6, r3
 8012e3a:	1aff      	subgt	r7, r7, r3
 8012e3c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	dd17      	ble.n	8012e76 <_strtod_l+0x736>
 8012e46:	4659      	mov	r1, fp
 8012e48:	461a      	mov	r2, r3
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	f7ff f9ae 	bl	80121ac <__pow5mult>
 8012e50:	4683      	mov	fp, r0
 8012e52:	2800      	cmp	r0, #0
 8012e54:	f43f aeb8 	beq.w	8012bc8 <_strtod_l+0x488>
 8012e58:	4601      	mov	r1, r0
 8012e5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	f7ff f8fb 	bl	8012058 <__multiply>
 8012e62:	900b      	str	r0, [sp, #44]	; 0x2c
 8012e64:	2800      	cmp	r0, #0
 8012e66:	f43f aeaf 	beq.w	8012bc8 <_strtod_l+0x488>
 8012e6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f7fe ffdd 	bl	8011e2c <_Bfree>
 8012e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e74:	9316      	str	r3, [sp, #88]	; 0x58
 8012e76:	2e00      	cmp	r6, #0
 8012e78:	f300 808c 	bgt.w	8012f94 <_strtod_l+0x854>
 8012e7c:	9b08      	ldr	r3, [sp, #32]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	dd08      	ble.n	8012e94 <_strtod_l+0x754>
 8012e82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012e84:	9905      	ldr	r1, [sp, #20]
 8012e86:	4620      	mov	r0, r4
 8012e88:	f7ff f990 	bl	80121ac <__pow5mult>
 8012e8c:	9005      	str	r0, [sp, #20]
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	f43f ae9a 	beq.w	8012bc8 <_strtod_l+0x488>
 8012e94:	2f00      	cmp	r7, #0
 8012e96:	dd08      	ble.n	8012eaa <_strtod_l+0x76a>
 8012e98:	9905      	ldr	r1, [sp, #20]
 8012e9a:	463a      	mov	r2, r7
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f7ff f9df 	bl	8012260 <__lshift>
 8012ea2:	9005      	str	r0, [sp, #20]
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	f43f ae8f 	beq.w	8012bc8 <_strtod_l+0x488>
 8012eaa:	f1ba 0f00 	cmp.w	sl, #0
 8012eae:	dd08      	ble.n	8012ec2 <_strtod_l+0x782>
 8012eb0:	4659      	mov	r1, fp
 8012eb2:	4652      	mov	r2, sl
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f7ff f9d3 	bl	8012260 <__lshift>
 8012eba:	4683      	mov	fp, r0
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	f43f ae83 	beq.w	8012bc8 <_strtod_l+0x488>
 8012ec2:	9a05      	ldr	r2, [sp, #20]
 8012ec4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	f7ff fa52 	bl	8012370 <__mdiff>
 8012ecc:	4605      	mov	r5, r0
 8012ece:	2800      	cmp	r0, #0
 8012ed0:	f43f ae7a 	beq.w	8012bc8 <_strtod_l+0x488>
 8012ed4:	68c3      	ldr	r3, [r0, #12]
 8012ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ed8:	2300      	movs	r3, #0
 8012eda:	60c3      	str	r3, [r0, #12]
 8012edc:	4659      	mov	r1, fp
 8012ede:	f7ff fa2b 	bl	8012338 <__mcmp>
 8012ee2:	2800      	cmp	r0, #0
 8012ee4:	da60      	bge.n	8012fa8 <_strtod_l+0x868>
 8012ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ee8:	ea53 0308 	orrs.w	r3, r3, r8
 8012eec:	f040 8084 	bne.w	8012ff8 <_strtod_l+0x8b8>
 8012ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d17f      	bne.n	8012ff8 <_strtod_l+0x8b8>
 8012ef8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012efc:	0d1b      	lsrs	r3, r3, #20
 8012efe:	051b      	lsls	r3, r3, #20
 8012f00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012f04:	d978      	bls.n	8012ff8 <_strtod_l+0x8b8>
 8012f06:	696b      	ldr	r3, [r5, #20]
 8012f08:	b913      	cbnz	r3, 8012f10 <_strtod_l+0x7d0>
 8012f0a:	692b      	ldr	r3, [r5, #16]
 8012f0c:	2b01      	cmp	r3, #1
 8012f0e:	dd73      	ble.n	8012ff8 <_strtod_l+0x8b8>
 8012f10:	4629      	mov	r1, r5
 8012f12:	2201      	movs	r2, #1
 8012f14:	4620      	mov	r0, r4
 8012f16:	f7ff f9a3 	bl	8012260 <__lshift>
 8012f1a:	4659      	mov	r1, fp
 8012f1c:	4605      	mov	r5, r0
 8012f1e:	f7ff fa0b 	bl	8012338 <__mcmp>
 8012f22:	2800      	cmp	r0, #0
 8012f24:	dd68      	ble.n	8012ff8 <_strtod_l+0x8b8>
 8012f26:	9904      	ldr	r1, [sp, #16]
 8012f28:	4a54      	ldr	r2, [pc, #336]	; (801307c <_strtod_l+0x93c>)
 8012f2a:	464b      	mov	r3, r9
 8012f2c:	2900      	cmp	r1, #0
 8012f2e:	f000 8084 	beq.w	801303a <_strtod_l+0x8fa>
 8012f32:	ea02 0109 	and.w	r1, r2, r9
 8012f36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012f3a:	dc7e      	bgt.n	801303a <_strtod_l+0x8fa>
 8012f3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012f40:	f77f aeb3 	ble.w	8012caa <_strtod_l+0x56a>
 8012f44:	4b4e      	ldr	r3, [pc, #312]	; (8013080 <_strtod_l+0x940>)
 8012f46:	4640      	mov	r0, r8
 8012f48:	4649      	mov	r1, r9
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	f7ed fb5c 	bl	8000608 <__aeabi_dmul>
 8012f50:	4b4a      	ldr	r3, [pc, #296]	; (801307c <_strtod_l+0x93c>)
 8012f52:	400b      	ands	r3, r1
 8012f54:	4680      	mov	r8, r0
 8012f56:	4689      	mov	r9, r1
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	f47f ae3f 	bne.w	8012bdc <_strtod_l+0x49c>
 8012f5e:	2322      	movs	r3, #34	; 0x22
 8012f60:	6023      	str	r3, [r4, #0]
 8012f62:	e63b      	b.n	8012bdc <_strtod_l+0x49c>
 8012f64:	f04f 32ff 	mov.w	r2, #4294967295
 8012f68:	fa02 f303 	lsl.w	r3, r2, r3
 8012f6c:	ea03 0808 	and.w	r8, r3, r8
 8012f70:	e6e8      	b.n	8012d44 <_strtod_l+0x604>
 8012f72:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012f76:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012f7a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012f7e:	36e2      	adds	r6, #226	; 0xe2
 8012f80:	fa01 f306 	lsl.w	r3, r1, r6
 8012f84:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8012f88:	e748      	b.n	8012e1c <_strtod_l+0x6dc>
 8012f8a:	2100      	movs	r1, #0
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012f92:	e743      	b.n	8012e1c <_strtod_l+0x6dc>
 8012f94:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012f96:	4632      	mov	r2, r6
 8012f98:	4620      	mov	r0, r4
 8012f9a:	f7ff f961 	bl	8012260 <__lshift>
 8012f9e:	9016      	str	r0, [sp, #88]	; 0x58
 8012fa0:	2800      	cmp	r0, #0
 8012fa2:	f47f af6b 	bne.w	8012e7c <_strtod_l+0x73c>
 8012fa6:	e60f      	b.n	8012bc8 <_strtod_l+0x488>
 8012fa8:	46ca      	mov	sl, r9
 8012faa:	d171      	bne.n	8013090 <_strtod_l+0x950>
 8012fac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012fae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012fb2:	b352      	cbz	r2, 801300a <_strtod_l+0x8ca>
 8012fb4:	4a33      	ldr	r2, [pc, #204]	; (8013084 <_strtod_l+0x944>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d12a      	bne.n	8013010 <_strtod_l+0x8d0>
 8012fba:	9b04      	ldr	r3, [sp, #16]
 8012fbc:	4641      	mov	r1, r8
 8012fbe:	b1fb      	cbz	r3, 8013000 <_strtod_l+0x8c0>
 8012fc0:	4b2e      	ldr	r3, [pc, #184]	; (801307c <_strtod_l+0x93c>)
 8012fc2:	ea09 0303 	and.w	r3, r9, r3
 8012fc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012fca:	f04f 32ff 	mov.w	r2, #4294967295
 8012fce:	d81a      	bhi.n	8013006 <_strtod_l+0x8c6>
 8012fd0:	0d1b      	lsrs	r3, r3, #20
 8012fd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8012fda:	4299      	cmp	r1, r3
 8012fdc:	d118      	bne.n	8013010 <_strtod_l+0x8d0>
 8012fde:	4b2a      	ldr	r3, [pc, #168]	; (8013088 <_strtod_l+0x948>)
 8012fe0:	459a      	cmp	sl, r3
 8012fe2:	d102      	bne.n	8012fea <_strtod_l+0x8aa>
 8012fe4:	3101      	adds	r1, #1
 8012fe6:	f43f adef 	beq.w	8012bc8 <_strtod_l+0x488>
 8012fea:	4b24      	ldr	r3, [pc, #144]	; (801307c <_strtod_l+0x93c>)
 8012fec:	ea0a 0303 	and.w	r3, sl, r3
 8012ff0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012ff4:	f04f 0800 	mov.w	r8, #0
 8012ff8:	9b04      	ldr	r3, [sp, #16]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d1a2      	bne.n	8012f44 <_strtod_l+0x804>
 8012ffe:	e5ed      	b.n	8012bdc <_strtod_l+0x49c>
 8013000:	f04f 33ff 	mov.w	r3, #4294967295
 8013004:	e7e9      	b.n	8012fda <_strtod_l+0x89a>
 8013006:	4613      	mov	r3, r2
 8013008:	e7e7      	b.n	8012fda <_strtod_l+0x89a>
 801300a:	ea53 0308 	orrs.w	r3, r3, r8
 801300e:	d08a      	beq.n	8012f26 <_strtod_l+0x7e6>
 8013010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013012:	b1e3      	cbz	r3, 801304e <_strtod_l+0x90e>
 8013014:	ea13 0f0a 	tst.w	r3, sl
 8013018:	d0ee      	beq.n	8012ff8 <_strtod_l+0x8b8>
 801301a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801301c:	9a04      	ldr	r2, [sp, #16]
 801301e:	4640      	mov	r0, r8
 8013020:	4649      	mov	r1, r9
 8013022:	b1c3      	cbz	r3, 8013056 <_strtod_l+0x916>
 8013024:	f7ff fb6f 	bl	8012706 <sulp>
 8013028:	4602      	mov	r2, r0
 801302a:	460b      	mov	r3, r1
 801302c:	ec51 0b18 	vmov	r0, r1, d8
 8013030:	f7ed f934 	bl	800029c <__adddf3>
 8013034:	4680      	mov	r8, r0
 8013036:	4689      	mov	r9, r1
 8013038:	e7de      	b.n	8012ff8 <_strtod_l+0x8b8>
 801303a:	4013      	ands	r3, r2
 801303c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013040:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013044:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013048:	f04f 38ff 	mov.w	r8, #4294967295
 801304c:	e7d4      	b.n	8012ff8 <_strtod_l+0x8b8>
 801304e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013050:	ea13 0f08 	tst.w	r3, r8
 8013054:	e7e0      	b.n	8013018 <_strtod_l+0x8d8>
 8013056:	f7ff fb56 	bl	8012706 <sulp>
 801305a:	4602      	mov	r2, r0
 801305c:	460b      	mov	r3, r1
 801305e:	ec51 0b18 	vmov	r0, r1, d8
 8013062:	f7ed f919 	bl	8000298 <__aeabi_dsub>
 8013066:	2200      	movs	r2, #0
 8013068:	2300      	movs	r3, #0
 801306a:	4680      	mov	r8, r0
 801306c:	4689      	mov	r9, r1
 801306e:	f7ed fd33 	bl	8000ad8 <__aeabi_dcmpeq>
 8013072:	2800      	cmp	r0, #0
 8013074:	d0c0      	beq.n	8012ff8 <_strtod_l+0x8b8>
 8013076:	e618      	b.n	8012caa <_strtod_l+0x56a>
 8013078:	fffffc02 	.word	0xfffffc02
 801307c:	7ff00000 	.word	0x7ff00000
 8013080:	39500000 	.word	0x39500000
 8013084:	000fffff 	.word	0x000fffff
 8013088:	7fefffff 	.word	0x7fefffff
 801308c:	080165d0 	.word	0x080165d0
 8013090:	4659      	mov	r1, fp
 8013092:	4628      	mov	r0, r5
 8013094:	f7ff fac0 	bl	8012618 <__ratio>
 8013098:	ec57 6b10 	vmov	r6, r7, d0
 801309c:	ee10 0a10 	vmov	r0, s0
 80130a0:	2200      	movs	r2, #0
 80130a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130a6:	4639      	mov	r1, r7
 80130a8:	f7ed fd2a 	bl	8000b00 <__aeabi_dcmple>
 80130ac:	2800      	cmp	r0, #0
 80130ae:	d071      	beq.n	8013194 <_strtod_l+0xa54>
 80130b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d17c      	bne.n	80131b0 <_strtod_l+0xa70>
 80130b6:	f1b8 0f00 	cmp.w	r8, #0
 80130ba:	d15a      	bne.n	8013172 <_strtod_l+0xa32>
 80130bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d15d      	bne.n	8013180 <_strtod_l+0xa40>
 80130c4:	4b90      	ldr	r3, [pc, #576]	; (8013308 <_strtod_l+0xbc8>)
 80130c6:	2200      	movs	r2, #0
 80130c8:	4630      	mov	r0, r6
 80130ca:	4639      	mov	r1, r7
 80130cc:	f7ed fd0e 	bl	8000aec <__aeabi_dcmplt>
 80130d0:	2800      	cmp	r0, #0
 80130d2:	d15c      	bne.n	801318e <_strtod_l+0xa4e>
 80130d4:	4630      	mov	r0, r6
 80130d6:	4639      	mov	r1, r7
 80130d8:	4b8c      	ldr	r3, [pc, #560]	; (801330c <_strtod_l+0xbcc>)
 80130da:	2200      	movs	r2, #0
 80130dc:	f7ed fa94 	bl	8000608 <__aeabi_dmul>
 80130e0:	4606      	mov	r6, r0
 80130e2:	460f      	mov	r7, r1
 80130e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80130e8:	9606      	str	r6, [sp, #24]
 80130ea:	9307      	str	r3, [sp, #28]
 80130ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80130f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80130f4:	4b86      	ldr	r3, [pc, #536]	; (8013310 <_strtod_l+0xbd0>)
 80130f6:	ea0a 0303 	and.w	r3, sl, r3
 80130fa:	930d      	str	r3, [sp, #52]	; 0x34
 80130fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80130fe:	4b85      	ldr	r3, [pc, #532]	; (8013314 <_strtod_l+0xbd4>)
 8013100:	429a      	cmp	r2, r3
 8013102:	f040 8090 	bne.w	8013226 <_strtod_l+0xae6>
 8013106:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801310a:	ec49 8b10 	vmov	d0, r8, r9
 801310e:	f7ff f9b9 	bl	8012484 <__ulp>
 8013112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013116:	ec51 0b10 	vmov	r0, r1, d0
 801311a:	f7ed fa75 	bl	8000608 <__aeabi_dmul>
 801311e:	4642      	mov	r2, r8
 8013120:	464b      	mov	r3, r9
 8013122:	f7ed f8bb 	bl	800029c <__adddf3>
 8013126:	460b      	mov	r3, r1
 8013128:	4979      	ldr	r1, [pc, #484]	; (8013310 <_strtod_l+0xbd0>)
 801312a:	4a7b      	ldr	r2, [pc, #492]	; (8013318 <_strtod_l+0xbd8>)
 801312c:	4019      	ands	r1, r3
 801312e:	4291      	cmp	r1, r2
 8013130:	4680      	mov	r8, r0
 8013132:	d944      	bls.n	80131be <_strtod_l+0xa7e>
 8013134:	ee18 2a90 	vmov	r2, s17
 8013138:	4b78      	ldr	r3, [pc, #480]	; (801331c <_strtod_l+0xbdc>)
 801313a:	429a      	cmp	r2, r3
 801313c:	d104      	bne.n	8013148 <_strtod_l+0xa08>
 801313e:	ee18 3a10 	vmov	r3, s16
 8013142:	3301      	adds	r3, #1
 8013144:	f43f ad40 	beq.w	8012bc8 <_strtod_l+0x488>
 8013148:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801331c <_strtod_l+0xbdc>
 801314c:	f04f 38ff 	mov.w	r8, #4294967295
 8013150:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013152:	4620      	mov	r0, r4
 8013154:	f7fe fe6a 	bl	8011e2c <_Bfree>
 8013158:	9905      	ldr	r1, [sp, #20]
 801315a:	4620      	mov	r0, r4
 801315c:	f7fe fe66 	bl	8011e2c <_Bfree>
 8013160:	4659      	mov	r1, fp
 8013162:	4620      	mov	r0, r4
 8013164:	f7fe fe62 	bl	8011e2c <_Bfree>
 8013168:	4629      	mov	r1, r5
 801316a:	4620      	mov	r0, r4
 801316c:	f7fe fe5e 	bl	8011e2c <_Bfree>
 8013170:	e609      	b.n	8012d86 <_strtod_l+0x646>
 8013172:	f1b8 0f01 	cmp.w	r8, #1
 8013176:	d103      	bne.n	8013180 <_strtod_l+0xa40>
 8013178:	f1b9 0f00 	cmp.w	r9, #0
 801317c:	f43f ad95 	beq.w	8012caa <_strtod_l+0x56a>
 8013180:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80132d8 <_strtod_l+0xb98>
 8013184:	4f60      	ldr	r7, [pc, #384]	; (8013308 <_strtod_l+0xbc8>)
 8013186:	ed8d 7b06 	vstr	d7, [sp, #24]
 801318a:	2600      	movs	r6, #0
 801318c:	e7ae      	b.n	80130ec <_strtod_l+0x9ac>
 801318e:	4f5f      	ldr	r7, [pc, #380]	; (801330c <_strtod_l+0xbcc>)
 8013190:	2600      	movs	r6, #0
 8013192:	e7a7      	b.n	80130e4 <_strtod_l+0x9a4>
 8013194:	4b5d      	ldr	r3, [pc, #372]	; (801330c <_strtod_l+0xbcc>)
 8013196:	4630      	mov	r0, r6
 8013198:	4639      	mov	r1, r7
 801319a:	2200      	movs	r2, #0
 801319c:	f7ed fa34 	bl	8000608 <__aeabi_dmul>
 80131a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131a2:	4606      	mov	r6, r0
 80131a4:	460f      	mov	r7, r1
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d09c      	beq.n	80130e4 <_strtod_l+0x9a4>
 80131aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80131ae:	e79d      	b.n	80130ec <_strtod_l+0x9ac>
 80131b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80132e0 <_strtod_l+0xba0>
 80131b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80131b8:	ec57 6b17 	vmov	r6, r7, d7
 80131bc:	e796      	b.n	80130ec <_strtod_l+0x9ac>
 80131be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80131c2:	9b04      	ldr	r3, [sp, #16]
 80131c4:	46ca      	mov	sl, r9
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1c2      	bne.n	8013150 <_strtod_l+0xa10>
 80131ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80131ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80131d0:	0d1b      	lsrs	r3, r3, #20
 80131d2:	051b      	lsls	r3, r3, #20
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d1bb      	bne.n	8013150 <_strtod_l+0xa10>
 80131d8:	4630      	mov	r0, r6
 80131da:	4639      	mov	r1, r7
 80131dc:	f7ed fdc4 	bl	8000d68 <__aeabi_d2lz>
 80131e0:	f7ed f9e4 	bl	80005ac <__aeabi_l2d>
 80131e4:	4602      	mov	r2, r0
 80131e6:	460b      	mov	r3, r1
 80131e8:	4630      	mov	r0, r6
 80131ea:	4639      	mov	r1, r7
 80131ec:	f7ed f854 	bl	8000298 <__aeabi_dsub>
 80131f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80131f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131f6:	ea43 0308 	orr.w	r3, r3, r8
 80131fa:	4313      	orrs	r3, r2
 80131fc:	4606      	mov	r6, r0
 80131fe:	460f      	mov	r7, r1
 8013200:	d054      	beq.n	80132ac <_strtod_l+0xb6c>
 8013202:	a339      	add	r3, pc, #228	; (adr r3, 80132e8 <_strtod_l+0xba8>)
 8013204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013208:	f7ed fc70 	bl	8000aec <__aeabi_dcmplt>
 801320c:	2800      	cmp	r0, #0
 801320e:	f47f ace5 	bne.w	8012bdc <_strtod_l+0x49c>
 8013212:	a337      	add	r3, pc, #220	; (adr r3, 80132f0 <_strtod_l+0xbb0>)
 8013214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013218:	4630      	mov	r0, r6
 801321a:	4639      	mov	r1, r7
 801321c:	f7ed fc84 	bl	8000b28 <__aeabi_dcmpgt>
 8013220:	2800      	cmp	r0, #0
 8013222:	d095      	beq.n	8013150 <_strtod_l+0xa10>
 8013224:	e4da      	b.n	8012bdc <_strtod_l+0x49c>
 8013226:	9b04      	ldr	r3, [sp, #16]
 8013228:	b333      	cbz	r3, 8013278 <_strtod_l+0xb38>
 801322a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801322c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013230:	d822      	bhi.n	8013278 <_strtod_l+0xb38>
 8013232:	a331      	add	r3, pc, #196	; (adr r3, 80132f8 <_strtod_l+0xbb8>)
 8013234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013238:	4630      	mov	r0, r6
 801323a:	4639      	mov	r1, r7
 801323c:	f7ed fc60 	bl	8000b00 <__aeabi_dcmple>
 8013240:	b1a0      	cbz	r0, 801326c <_strtod_l+0xb2c>
 8013242:	4639      	mov	r1, r7
 8013244:	4630      	mov	r0, r6
 8013246:	f7ed fcb7 	bl	8000bb8 <__aeabi_d2uiz>
 801324a:	2801      	cmp	r0, #1
 801324c:	bf38      	it	cc
 801324e:	2001      	movcc	r0, #1
 8013250:	f7ed f960 	bl	8000514 <__aeabi_ui2d>
 8013254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013256:	4606      	mov	r6, r0
 8013258:	460f      	mov	r7, r1
 801325a:	bb23      	cbnz	r3, 80132a6 <_strtod_l+0xb66>
 801325c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013260:	9010      	str	r0, [sp, #64]	; 0x40
 8013262:	9311      	str	r3, [sp, #68]	; 0x44
 8013264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013268:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801326c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801326e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013270:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013274:	1a9b      	subs	r3, r3, r2
 8013276:	930f      	str	r3, [sp, #60]	; 0x3c
 8013278:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801327c:	eeb0 0a48 	vmov.f32	s0, s16
 8013280:	eef0 0a68 	vmov.f32	s1, s17
 8013284:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013288:	f7ff f8fc 	bl	8012484 <__ulp>
 801328c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013290:	ec53 2b10 	vmov	r2, r3, d0
 8013294:	f7ed f9b8 	bl	8000608 <__aeabi_dmul>
 8013298:	ec53 2b18 	vmov	r2, r3, d8
 801329c:	f7ec fffe 	bl	800029c <__adddf3>
 80132a0:	4680      	mov	r8, r0
 80132a2:	4689      	mov	r9, r1
 80132a4:	e78d      	b.n	80131c2 <_strtod_l+0xa82>
 80132a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80132aa:	e7db      	b.n	8013264 <_strtod_l+0xb24>
 80132ac:	a314      	add	r3, pc, #80	; (adr r3, 8013300 <_strtod_l+0xbc0>)
 80132ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b2:	f7ed fc1b 	bl	8000aec <__aeabi_dcmplt>
 80132b6:	e7b3      	b.n	8013220 <_strtod_l+0xae0>
 80132b8:	2300      	movs	r3, #0
 80132ba:	930a      	str	r3, [sp, #40]	; 0x28
 80132bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80132be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132c0:	6013      	str	r3, [r2, #0]
 80132c2:	f7ff ba7c 	b.w	80127be <_strtod_l+0x7e>
 80132c6:	2a65      	cmp	r2, #101	; 0x65
 80132c8:	f43f ab75 	beq.w	80129b6 <_strtod_l+0x276>
 80132cc:	2a45      	cmp	r2, #69	; 0x45
 80132ce:	f43f ab72 	beq.w	80129b6 <_strtod_l+0x276>
 80132d2:	2301      	movs	r3, #1
 80132d4:	f7ff bbaa 	b.w	8012a2c <_strtod_l+0x2ec>
 80132d8:	00000000 	.word	0x00000000
 80132dc:	bff00000 	.word	0xbff00000
 80132e0:	00000000 	.word	0x00000000
 80132e4:	3ff00000 	.word	0x3ff00000
 80132e8:	94a03595 	.word	0x94a03595
 80132ec:	3fdfffff 	.word	0x3fdfffff
 80132f0:	35afe535 	.word	0x35afe535
 80132f4:	3fe00000 	.word	0x3fe00000
 80132f8:	ffc00000 	.word	0xffc00000
 80132fc:	41dfffff 	.word	0x41dfffff
 8013300:	94a03595 	.word	0x94a03595
 8013304:	3fcfffff 	.word	0x3fcfffff
 8013308:	3ff00000 	.word	0x3ff00000
 801330c:	3fe00000 	.word	0x3fe00000
 8013310:	7ff00000 	.word	0x7ff00000
 8013314:	7fe00000 	.word	0x7fe00000
 8013318:	7c9fffff 	.word	0x7c9fffff
 801331c:	7fefffff 	.word	0x7fefffff

08013320 <_strtod_r>:
 8013320:	4b01      	ldr	r3, [pc, #4]	; (8013328 <_strtod_r+0x8>)
 8013322:	f7ff ba0d 	b.w	8012740 <_strtod_l>
 8013326:	bf00      	nop
 8013328:	20000170 	.word	0x20000170

0801332c <_strtol_l.constprop.0>:
 801332c:	2b01      	cmp	r3, #1
 801332e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013332:	d001      	beq.n	8013338 <_strtol_l.constprop.0+0xc>
 8013334:	2b24      	cmp	r3, #36	; 0x24
 8013336:	d906      	bls.n	8013346 <_strtol_l.constprop.0+0x1a>
 8013338:	f7fd fe3e 	bl	8010fb8 <__errno>
 801333c:	2316      	movs	r3, #22
 801333e:	6003      	str	r3, [r0, #0]
 8013340:	2000      	movs	r0, #0
 8013342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013346:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801342c <_strtol_l.constprop.0+0x100>
 801334a:	460d      	mov	r5, r1
 801334c:	462e      	mov	r6, r5
 801334e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013352:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8013356:	f017 0708 	ands.w	r7, r7, #8
 801335a:	d1f7      	bne.n	801334c <_strtol_l.constprop.0+0x20>
 801335c:	2c2d      	cmp	r4, #45	; 0x2d
 801335e:	d132      	bne.n	80133c6 <_strtol_l.constprop.0+0x9a>
 8013360:	782c      	ldrb	r4, [r5, #0]
 8013362:	2701      	movs	r7, #1
 8013364:	1cb5      	adds	r5, r6, #2
 8013366:	2b00      	cmp	r3, #0
 8013368:	d05b      	beq.n	8013422 <_strtol_l.constprop.0+0xf6>
 801336a:	2b10      	cmp	r3, #16
 801336c:	d109      	bne.n	8013382 <_strtol_l.constprop.0+0x56>
 801336e:	2c30      	cmp	r4, #48	; 0x30
 8013370:	d107      	bne.n	8013382 <_strtol_l.constprop.0+0x56>
 8013372:	782c      	ldrb	r4, [r5, #0]
 8013374:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013378:	2c58      	cmp	r4, #88	; 0x58
 801337a:	d14d      	bne.n	8013418 <_strtol_l.constprop.0+0xec>
 801337c:	786c      	ldrb	r4, [r5, #1]
 801337e:	2310      	movs	r3, #16
 8013380:	3502      	adds	r5, #2
 8013382:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013386:	f108 38ff 	add.w	r8, r8, #4294967295
 801338a:	f04f 0e00 	mov.w	lr, #0
 801338e:	fbb8 f9f3 	udiv	r9, r8, r3
 8013392:	4676      	mov	r6, lr
 8013394:	fb03 8a19 	mls	sl, r3, r9, r8
 8013398:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801339c:	f1bc 0f09 	cmp.w	ip, #9
 80133a0:	d816      	bhi.n	80133d0 <_strtol_l.constprop.0+0xa4>
 80133a2:	4664      	mov	r4, ip
 80133a4:	42a3      	cmp	r3, r4
 80133a6:	dd24      	ble.n	80133f2 <_strtol_l.constprop.0+0xc6>
 80133a8:	f1be 3fff 	cmp.w	lr, #4294967295
 80133ac:	d008      	beq.n	80133c0 <_strtol_l.constprop.0+0x94>
 80133ae:	45b1      	cmp	r9, r6
 80133b0:	d31c      	bcc.n	80133ec <_strtol_l.constprop.0+0xc0>
 80133b2:	d101      	bne.n	80133b8 <_strtol_l.constprop.0+0x8c>
 80133b4:	45a2      	cmp	sl, r4
 80133b6:	db19      	blt.n	80133ec <_strtol_l.constprop.0+0xc0>
 80133b8:	fb06 4603 	mla	r6, r6, r3, r4
 80133bc:	f04f 0e01 	mov.w	lr, #1
 80133c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80133c4:	e7e8      	b.n	8013398 <_strtol_l.constprop.0+0x6c>
 80133c6:	2c2b      	cmp	r4, #43	; 0x2b
 80133c8:	bf04      	itt	eq
 80133ca:	782c      	ldrbeq	r4, [r5, #0]
 80133cc:	1cb5      	addeq	r5, r6, #2
 80133ce:	e7ca      	b.n	8013366 <_strtol_l.constprop.0+0x3a>
 80133d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80133d4:	f1bc 0f19 	cmp.w	ip, #25
 80133d8:	d801      	bhi.n	80133de <_strtol_l.constprop.0+0xb2>
 80133da:	3c37      	subs	r4, #55	; 0x37
 80133dc:	e7e2      	b.n	80133a4 <_strtol_l.constprop.0+0x78>
 80133de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80133e2:	f1bc 0f19 	cmp.w	ip, #25
 80133e6:	d804      	bhi.n	80133f2 <_strtol_l.constprop.0+0xc6>
 80133e8:	3c57      	subs	r4, #87	; 0x57
 80133ea:	e7db      	b.n	80133a4 <_strtol_l.constprop.0+0x78>
 80133ec:	f04f 3eff 	mov.w	lr, #4294967295
 80133f0:	e7e6      	b.n	80133c0 <_strtol_l.constprop.0+0x94>
 80133f2:	f1be 3fff 	cmp.w	lr, #4294967295
 80133f6:	d105      	bne.n	8013404 <_strtol_l.constprop.0+0xd8>
 80133f8:	2322      	movs	r3, #34	; 0x22
 80133fa:	6003      	str	r3, [r0, #0]
 80133fc:	4646      	mov	r6, r8
 80133fe:	b942      	cbnz	r2, 8013412 <_strtol_l.constprop.0+0xe6>
 8013400:	4630      	mov	r0, r6
 8013402:	e79e      	b.n	8013342 <_strtol_l.constprop.0+0x16>
 8013404:	b107      	cbz	r7, 8013408 <_strtol_l.constprop.0+0xdc>
 8013406:	4276      	negs	r6, r6
 8013408:	2a00      	cmp	r2, #0
 801340a:	d0f9      	beq.n	8013400 <_strtol_l.constprop.0+0xd4>
 801340c:	f1be 0f00 	cmp.w	lr, #0
 8013410:	d000      	beq.n	8013414 <_strtol_l.constprop.0+0xe8>
 8013412:	1e69      	subs	r1, r5, #1
 8013414:	6011      	str	r1, [r2, #0]
 8013416:	e7f3      	b.n	8013400 <_strtol_l.constprop.0+0xd4>
 8013418:	2430      	movs	r4, #48	; 0x30
 801341a:	2b00      	cmp	r3, #0
 801341c:	d1b1      	bne.n	8013382 <_strtol_l.constprop.0+0x56>
 801341e:	2308      	movs	r3, #8
 8013420:	e7af      	b.n	8013382 <_strtol_l.constprop.0+0x56>
 8013422:	2c30      	cmp	r4, #48	; 0x30
 8013424:	d0a5      	beq.n	8013372 <_strtol_l.constprop.0+0x46>
 8013426:	230a      	movs	r3, #10
 8013428:	e7ab      	b.n	8013382 <_strtol_l.constprop.0+0x56>
 801342a:	bf00      	nop
 801342c:	080165f9 	.word	0x080165f9

08013430 <_strtol_r>:
 8013430:	f7ff bf7c 	b.w	801332c <_strtol_l.constprop.0>

08013434 <__ssputs_r>:
 8013434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013438:	688e      	ldr	r6, [r1, #8]
 801343a:	461f      	mov	r7, r3
 801343c:	42be      	cmp	r6, r7
 801343e:	680b      	ldr	r3, [r1, #0]
 8013440:	4682      	mov	sl, r0
 8013442:	460c      	mov	r4, r1
 8013444:	4690      	mov	r8, r2
 8013446:	d82c      	bhi.n	80134a2 <__ssputs_r+0x6e>
 8013448:	898a      	ldrh	r2, [r1, #12]
 801344a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801344e:	d026      	beq.n	801349e <__ssputs_r+0x6a>
 8013450:	6965      	ldr	r5, [r4, #20]
 8013452:	6909      	ldr	r1, [r1, #16]
 8013454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013458:	eba3 0901 	sub.w	r9, r3, r1
 801345c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013460:	1c7b      	adds	r3, r7, #1
 8013462:	444b      	add	r3, r9
 8013464:	106d      	asrs	r5, r5, #1
 8013466:	429d      	cmp	r5, r3
 8013468:	bf38      	it	cc
 801346a:	461d      	movcc	r5, r3
 801346c:	0553      	lsls	r3, r2, #21
 801346e:	d527      	bpl.n	80134c0 <__ssputs_r+0x8c>
 8013470:	4629      	mov	r1, r5
 8013472:	f7fc fcb3 	bl	800fddc <_malloc_r>
 8013476:	4606      	mov	r6, r0
 8013478:	b360      	cbz	r0, 80134d4 <__ssputs_r+0xa0>
 801347a:	6921      	ldr	r1, [r4, #16]
 801347c:	464a      	mov	r2, r9
 801347e:	f000 fd9e 	bl	8013fbe <memcpy>
 8013482:	89a3      	ldrh	r3, [r4, #12]
 8013484:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801348c:	81a3      	strh	r3, [r4, #12]
 801348e:	6126      	str	r6, [r4, #16]
 8013490:	6165      	str	r5, [r4, #20]
 8013492:	444e      	add	r6, r9
 8013494:	eba5 0509 	sub.w	r5, r5, r9
 8013498:	6026      	str	r6, [r4, #0]
 801349a:	60a5      	str	r5, [r4, #8]
 801349c:	463e      	mov	r6, r7
 801349e:	42be      	cmp	r6, r7
 80134a0:	d900      	bls.n	80134a4 <__ssputs_r+0x70>
 80134a2:	463e      	mov	r6, r7
 80134a4:	6820      	ldr	r0, [r4, #0]
 80134a6:	4632      	mov	r2, r6
 80134a8:	4641      	mov	r1, r8
 80134aa:	f000 fd5c 	bl	8013f66 <memmove>
 80134ae:	68a3      	ldr	r3, [r4, #8]
 80134b0:	1b9b      	subs	r3, r3, r6
 80134b2:	60a3      	str	r3, [r4, #8]
 80134b4:	6823      	ldr	r3, [r4, #0]
 80134b6:	4433      	add	r3, r6
 80134b8:	6023      	str	r3, [r4, #0]
 80134ba:	2000      	movs	r0, #0
 80134bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134c0:	462a      	mov	r2, r5
 80134c2:	f001 f932 	bl	801472a <_realloc_r>
 80134c6:	4606      	mov	r6, r0
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d1e0      	bne.n	801348e <__ssputs_r+0x5a>
 80134cc:	6921      	ldr	r1, [r4, #16]
 80134ce:	4650      	mov	r0, sl
 80134d0:	f7fe fc20 	bl	8011d14 <_free_r>
 80134d4:	230c      	movs	r3, #12
 80134d6:	f8ca 3000 	str.w	r3, [sl]
 80134da:	89a3      	ldrh	r3, [r4, #12]
 80134dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134e0:	81a3      	strh	r3, [r4, #12]
 80134e2:	f04f 30ff 	mov.w	r0, #4294967295
 80134e6:	e7e9      	b.n	80134bc <__ssputs_r+0x88>

080134e8 <_svfiprintf_r>:
 80134e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ec:	4698      	mov	r8, r3
 80134ee:	898b      	ldrh	r3, [r1, #12]
 80134f0:	061b      	lsls	r3, r3, #24
 80134f2:	b09d      	sub	sp, #116	; 0x74
 80134f4:	4607      	mov	r7, r0
 80134f6:	460d      	mov	r5, r1
 80134f8:	4614      	mov	r4, r2
 80134fa:	d50e      	bpl.n	801351a <_svfiprintf_r+0x32>
 80134fc:	690b      	ldr	r3, [r1, #16]
 80134fe:	b963      	cbnz	r3, 801351a <_svfiprintf_r+0x32>
 8013500:	2140      	movs	r1, #64	; 0x40
 8013502:	f7fc fc6b 	bl	800fddc <_malloc_r>
 8013506:	6028      	str	r0, [r5, #0]
 8013508:	6128      	str	r0, [r5, #16]
 801350a:	b920      	cbnz	r0, 8013516 <_svfiprintf_r+0x2e>
 801350c:	230c      	movs	r3, #12
 801350e:	603b      	str	r3, [r7, #0]
 8013510:	f04f 30ff 	mov.w	r0, #4294967295
 8013514:	e0d0      	b.n	80136b8 <_svfiprintf_r+0x1d0>
 8013516:	2340      	movs	r3, #64	; 0x40
 8013518:	616b      	str	r3, [r5, #20]
 801351a:	2300      	movs	r3, #0
 801351c:	9309      	str	r3, [sp, #36]	; 0x24
 801351e:	2320      	movs	r3, #32
 8013520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013524:	f8cd 800c 	str.w	r8, [sp, #12]
 8013528:	2330      	movs	r3, #48	; 0x30
 801352a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80136d0 <_svfiprintf_r+0x1e8>
 801352e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013532:	f04f 0901 	mov.w	r9, #1
 8013536:	4623      	mov	r3, r4
 8013538:	469a      	mov	sl, r3
 801353a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801353e:	b10a      	cbz	r2, 8013544 <_svfiprintf_r+0x5c>
 8013540:	2a25      	cmp	r2, #37	; 0x25
 8013542:	d1f9      	bne.n	8013538 <_svfiprintf_r+0x50>
 8013544:	ebba 0b04 	subs.w	fp, sl, r4
 8013548:	d00b      	beq.n	8013562 <_svfiprintf_r+0x7a>
 801354a:	465b      	mov	r3, fp
 801354c:	4622      	mov	r2, r4
 801354e:	4629      	mov	r1, r5
 8013550:	4638      	mov	r0, r7
 8013552:	f7ff ff6f 	bl	8013434 <__ssputs_r>
 8013556:	3001      	adds	r0, #1
 8013558:	f000 80a9 	beq.w	80136ae <_svfiprintf_r+0x1c6>
 801355c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801355e:	445a      	add	r2, fp
 8013560:	9209      	str	r2, [sp, #36]	; 0x24
 8013562:	f89a 3000 	ldrb.w	r3, [sl]
 8013566:	2b00      	cmp	r3, #0
 8013568:	f000 80a1 	beq.w	80136ae <_svfiprintf_r+0x1c6>
 801356c:	2300      	movs	r3, #0
 801356e:	f04f 32ff 	mov.w	r2, #4294967295
 8013572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013576:	f10a 0a01 	add.w	sl, sl, #1
 801357a:	9304      	str	r3, [sp, #16]
 801357c:	9307      	str	r3, [sp, #28]
 801357e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013582:	931a      	str	r3, [sp, #104]	; 0x68
 8013584:	4654      	mov	r4, sl
 8013586:	2205      	movs	r2, #5
 8013588:	f814 1b01 	ldrb.w	r1, [r4], #1
 801358c:	4850      	ldr	r0, [pc, #320]	; (80136d0 <_svfiprintf_r+0x1e8>)
 801358e:	f7ec fe27 	bl	80001e0 <memchr>
 8013592:	9a04      	ldr	r2, [sp, #16]
 8013594:	b9d8      	cbnz	r0, 80135ce <_svfiprintf_r+0xe6>
 8013596:	06d0      	lsls	r0, r2, #27
 8013598:	bf44      	itt	mi
 801359a:	2320      	movmi	r3, #32
 801359c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135a0:	0711      	lsls	r1, r2, #28
 80135a2:	bf44      	itt	mi
 80135a4:	232b      	movmi	r3, #43	; 0x2b
 80135a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135aa:	f89a 3000 	ldrb.w	r3, [sl]
 80135ae:	2b2a      	cmp	r3, #42	; 0x2a
 80135b0:	d015      	beq.n	80135de <_svfiprintf_r+0xf6>
 80135b2:	9a07      	ldr	r2, [sp, #28]
 80135b4:	4654      	mov	r4, sl
 80135b6:	2000      	movs	r0, #0
 80135b8:	f04f 0c0a 	mov.w	ip, #10
 80135bc:	4621      	mov	r1, r4
 80135be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135c2:	3b30      	subs	r3, #48	; 0x30
 80135c4:	2b09      	cmp	r3, #9
 80135c6:	d94d      	bls.n	8013664 <_svfiprintf_r+0x17c>
 80135c8:	b1b0      	cbz	r0, 80135f8 <_svfiprintf_r+0x110>
 80135ca:	9207      	str	r2, [sp, #28]
 80135cc:	e014      	b.n	80135f8 <_svfiprintf_r+0x110>
 80135ce:	eba0 0308 	sub.w	r3, r0, r8
 80135d2:	fa09 f303 	lsl.w	r3, r9, r3
 80135d6:	4313      	orrs	r3, r2
 80135d8:	9304      	str	r3, [sp, #16]
 80135da:	46a2      	mov	sl, r4
 80135dc:	e7d2      	b.n	8013584 <_svfiprintf_r+0x9c>
 80135de:	9b03      	ldr	r3, [sp, #12]
 80135e0:	1d19      	adds	r1, r3, #4
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	9103      	str	r1, [sp, #12]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	bfbb      	ittet	lt
 80135ea:	425b      	neglt	r3, r3
 80135ec:	f042 0202 	orrlt.w	r2, r2, #2
 80135f0:	9307      	strge	r3, [sp, #28]
 80135f2:	9307      	strlt	r3, [sp, #28]
 80135f4:	bfb8      	it	lt
 80135f6:	9204      	strlt	r2, [sp, #16]
 80135f8:	7823      	ldrb	r3, [r4, #0]
 80135fa:	2b2e      	cmp	r3, #46	; 0x2e
 80135fc:	d10c      	bne.n	8013618 <_svfiprintf_r+0x130>
 80135fe:	7863      	ldrb	r3, [r4, #1]
 8013600:	2b2a      	cmp	r3, #42	; 0x2a
 8013602:	d134      	bne.n	801366e <_svfiprintf_r+0x186>
 8013604:	9b03      	ldr	r3, [sp, #12]
 8013606:	1d1a      	adds	r2, r3, #4
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	9203      	str	r2, [sp, #12]
 801360c:	2b00      	cmp	r3, #0
 801360e:	bfb8      	it	lt
 8013610:	f04f 33ff 	movlt.w	r3, #4294967295
 8013614:	3402      	adds	r4, #2
 8013616:	9305      	str	r3, [sp, #20]
 8013618:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80136e0 <_svfiprintf_r+0x1f8>
 801361c:	7821      	ldrb	r1, [r4, #0]
 801361e:	2203      	movs	r2, #3
 8013620:	4650      	mov	r0, sl
 8013622:	f7ec fddd 	bl	80001e0 <memchr>
 8013626:	b138      	cbz	r0, 8013638 <_svfiprintf_r+0x150>
 8013628:	9b04      	ldr	r3, [sp, #16]
 801362a:	eba0 000a 	sub.w	r0, r0, sl
 801362e:	2240      	movs	r2, #64	; 0x40
 8013630:	4082      	lsls	r2, r0
 8013632:	4313      	orrs	r3, r2
 8013634:	3401      	adds	r4, #1
 8013636:	9304      	str	r3, [sp, #16]
 8013638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801363c:	4825      	ldr	r0, [pc, #148]	; (80136d4 <_svfiprintf_r+0x1ec>)
 801363e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013642:	2206      	movs	r2, #6
 8013644:	f7ec fdcc 	bl	80001e0 <memchr>
 8013648:	2800      	cmp	r0, #0
 801364a:	d038      	beq.n	80136be <_svfiprintf_r+0x1d6>
 801364c:	4b22      	ldr	r3, [pc, #136]	; (80136d8 <_svfiprintf_r+0x1f0>)
 801364e:	bb1b      	cbnz	r3, 8013698 <_svfiprintf_r+0x1b0>
 8013650:	9b03      	ldr	r3, [sp, #12]
 8013652:	3307      	adds	r3, #7
 8013654:	f023 0307 	bic.w	r3, r3, #7
 8013658:	3308      	adds	r3, #8
 801365a:	9303      	str	r3, [sp, #12]
 801365c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801365e:	4433      	add	r3, r6
 8013660:	9309      	str	r3, [sp, #36]	; 0x24
 8013662:	e768      	b.n	8013536 <_svfiprintf_r+0x4e>
 8013664:	fb0c 3202 	mla	r2, ip, r2, r3
 8013668:	460c      	mov	r4, r1
 801366a:	2001      	movs	r0, #1
 801366c:	e7a6      	b.n	80135bc <_svfiprintf_r+0xd4>
 801366e:	2300      	movs	r3, #0
 8013670:	3401      	adds	r4, #1
 8013672:	9305      	str	r3, [sp, #20]
 8013674:	4619      	mov	r1, r3
 8013676:	f04f 0c0a 	mov.w	ip, #10
 801367a:	4620      	mov	r0, r4
 801367c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013680:	3a30      	subs	r2, #48	; 0x30
 8013682:	2a09      	cmp	r2, #9
 8013684:	d903      	bls.n	801368e <_svfiprintf_r+0x1a6>
 8013686:	2b00      	cmp	r3, #0
 8013688:	d0c6      	beq.n	8013618 <_svfiprintf_r+0x130>
 801368a:	9105      	str	r1, [sp, #20]
 801368c:	e7c4      	b.n	8013618 <_svfiprintf_r+0x130>
 801368e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013692:	4604      	mov	r4, r0
 8013694:	2301      	movs	r3, #1
 8013696:	e7f0      	b.n	801367a <_svfiprintf_r+0x192>
 8013698:	ab03      	add	r3, sp, #12
 801369a:	9300      	str	r3, [sp, #0]
 801369c:	462a      	mov	r2, r5
 801369e:	4b0f      	ldr	r3, [pc, #60]	; (80136dc <_svfiprintf_r+0x1f4>)
 80136a0:	a904      	add	r1, sp, #16
 80136a2:	4638      	mov	r0, r7
 80136a4:	f7fc fcc6 	bl	8010034 <_printf_float>
 80136a8:	1c42      	adds	r2, r0, #1
 80136aa:	4606      	mov	r6, r0
 80136ac:	d1d6      	bne.n	801365c <_svfiprintf_r+0x174>
 80136ae:	89ab      	ldrh	r3, [r5, #12]
 80136b0:	065b      	lsls	r3, r3, #25
 80136b2:	f53f af2d 	bmi.w	8013510 <_svfiprintf_r+0x28>
 80136b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136b8:	b01d      	add	sp, #116	; 0x74
 80136ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136be:	ab03      	add	r3, sp, #12
 80136c0:	9300      	str	r3, [sp, #0]
 80136c2:	462a      	mov	r2, r5
 80136c4:	4b05      	ldr	r3, [pc, #20]	; (80136dc <_svfiprintf_r+0x1f4>)
 80136c6:	a904      	add	r1, sp, #16
 80136c8:	4638      	mov	r0, r7
 80136ca:	f7fc ff57 	bl	801057c <_printf_i>
 80136ce:	e7eb      	b.n	80136a8 <_svfiprintf_r+0x1c0>
 80136d0:	080166f9 	.word	0x080166f9
 80136d4:	08016703 	.word	0x08016703
 80136d8:	08010035 	.word	0x08010035
 80136dc:	08013435 	.word	0x08013435
 80136e0:	080166ff 	.word	0x080166ff

080136e4 <_sungetc_r>:
 80136e4:	b538      	push	{r3, r4, r5, lr}
 80136e6:	1c4b      	adds	r3, r1, #1
 80136e8:	4614      	mov	r4, r2
 80136ea:	d103      	bne.n	80136f4 <_sungetc_r+0x10>
 80136ec:	f04f 35ff 	mov.w	r5, #4294967295
 80136f0:	4628      	mov	r0, r5
 80136f2:	bd38      	pop	{r3, r4, r5, pc}
 80136f4:	8993      	ldrh	r3, [r2, #12]
 80136f6:	f023 0320 	bic.w	r3, r3, #32
 80136fa:	8193      	strh	r3, [r2, #12]
 80136fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80136fe:	6852      	ldr	r2, [r2, #4]
 8013700:	b2cd      	uxtb	r5, r1
 8013702:	b18b      	cbz	r3, 8013728 <_sungetc_r+0x44>
 8013704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013706:	4293      	cmp	r3, r2
 8013708:	dd08      	ble.n	801371c <_sungetc_r+0x38>
 801370a:	6823      	ldr	r3, [r4, #0]
 801370c:	1e5a      	subs	r2, r3, #1
 801370e:	6022      	str	r2, [r4, #0]
 8013710:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013714:	6863      	ldr	r3, [r4, #4]
 8013716:	3301      	adds	r3, #1
 8013718:	6063      	str	r3, [r4, #4]
 801371a:	e7e9      	b.n	80136f0 <_sungetc_r+0xc>
 801371c:	4621      	mov	r1, r4
 801371e:	f000 fbe8 	bl	8013ef2 <__submore>
 8013722:	2800      	cmp	r0, #0
 8013724:	d0f1      	beq.n	801370a <_sungetc_r+0x26>
 8013726:	e7e1      	b.n	80136ec <_sungetc_r+0x8>
 8013728:	6921      	ldr	r1, [r4, #16]
 801372a:	6823      	ldr	r3, [r4, #0]
 801372c:	b151      	cbz	r1, 8013744 <_sungetc_r+0x60>
 801372e:	4299      	cmp	r1, r3
 8013730:	d208      	bcs.n	8013744 <_sungetc_r+0x60>
 8013732:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013736:	42a9      	cmp	r1, r5
 8013738:	d104      	bne.n	8013744 <_sungetc_r+0x60>
 801373a:	3b01      	subs	r3, #1
 801373c:	3201      	adds	r2, #1
 801373e:	6023      	str	r3, [r4, #0]
 8013740:	6062      	str	r2, [r4, #4]
 8013742:	e7d5      	b.n	80136f0 <_sungetc_r+0xc>
 8013744:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801374c:	6363      	str	r3, [r4, #52]	; 0x34
 801374e:	2303      	movs	r3, #3
 8013750:	63a3      	str	r3, [r4, #56]	; 0x38
 8013752:	4623      	mov	r3, r4
 8013754:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013758:	6023      	str	r3, [r4, #0]
 801375a:	2301      	movs	r3, #1
 801375c:	e7dc      	b.n	8013718 <_sungetc_r+0x34>

0801375e <__ssrefill_r>:
 801375e:	b510      	push	{r4, lr}
 8013760:	460c      	mov	r4, r1
 8013762:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013764:	b169      	cbz	r1, 8013782 <__ssrefill_r+0x24>
 8013766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801376a:	4299      	cmp	r1, r3
 801376c:	d001      	beq.n	8013772 <__ssrefill_r+0x14>
 801376e:	f7fe fad1 	bl	8011d14 <_free_r>
 8013772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013774:	6063      	str	r3, [r4, #4]
 8013776:	2000      	movs	r0, #0
 8013778:	6360      	str	r0, [r4, #52]	; 0x34
 801377a:	b113      	cbz	r3, 8013782 <__ssrefill_r+0x24>
 801377c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801377e:	6023      	str	r3, [r4, #0]
 8013780:	bd10      	pop	{r4, pc}
 8013782:	6923      	ldr	r3, [r4, #16]
 8013784:	6023      	str	r3, [r4, #0]
 8013786:	2300      	movs	r3, #0
 8013788:	6063      	str	r3, [r4, #4]
 801378a:	89a3      	ldrh	r3, [r4, #12]
 801378c:	f043 0320 	orr.w	r3, r3, #32
 8013790:	81a3      	strh	r3, [r4, #12]
 8013792:	f04f 30ff 	mov.w	r0, #4294967295
 8013796:	e7f3      	b.n	8013780 <__ssrefill_r+0x22>

08013798 <__ssvfiscanf_r>:
 8013798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801379c:	460c      	mov	r4, r1
 801379e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80137a2:	2100      	movs	r1, #0
 80137a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80137a8:	49a6      	ldr	r1, [pc, #664]	; (8013a44 <__ssvfiscanf_r+0x2ac>)
 80137aa:	91a0      	str	r1, [sp, #640]	; 0x280
 80137ac:	f10d 0804 	add.w	r8, sp, #4
 80137b0:	49a5      	ldr	r1, [pc, #660]	; (8013a48 <__ssvfiscanf_r+0x2b0>)
 80137b2:	4fa6      	ldr	r7, [pc, #664]	; (8013a4c <__ssvfiscanf_r+0x2b4>)
 80137b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013a50 <__ssvfiscanf_r+0x2b8>
 80137b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80137bc:	4606      	mov	r6, r0
 80137be:	91a1      	str	r1, [sp, #644]	; 0x284
 80137c0:	9300      	str	r3, [sp, #0]
 80137c2:	7813      	ldrb	r3, [r2, #0]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	f000 815a 	beq.w	8013a7e <__ssvfiscanf_r+0x2e6>
 80137ca:	5cf9      	ldrb	r1, [r7, r3]
 80137cc:	f011 0108 	ands.w	r1, r1, #8
 80137d0:	f102 0501 	add.w	r5, r2, #1
 80137d4:	d019      	beq.n	801380a <__ssvfiscanf_r+0x72>
 80137d6:	6863      	ldr	r3, [r4, #4]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	dd0f      	ble.n	80137fc <__ssvfiscanf_r+0x64>
 80137dc:	6823      	ldr	r3, [r4, #0]
 80137de:	781a      	ldrb	r2, [r3, #0]
 80137e0:	5cba      	ldrb	r2, [r7, r2]
 80137e2:	0712      	lsls	r2, r2, #28
 80137e4:	d401      	bmi.n	80137ea <__ssvfiscanf_r+0x52>
 80137e6:	462a      	mov	r2, r5
 80137e8:	e7eb      	b.n	80137c2 <__ssvfiscanf_r+0x2a>
 80137ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80137ec:	3201      	adds	r2, #1
 80137ee:	9245      	str	r2, [sp, #276]	; 0x114
 80137f0:	6862      	ldr	r2, [r4, #4]
 80137f2:	3301      	adds	r3, #1
 80137f4:	3a01      	subs	r2, #1
 80137f6:	6062      	str	r2, [r4, #4]
 80137f8:	6023      	str	r3, [r4, #0]
 80137fa:	e7ec      	b.n	80137d6 <__ssvfiscanf_r+0x3e>
 80137fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80137fe:	4621      	mov	r1, r4
 8013800:	4630      	mov	r0, r6
 8013802:	4798      	blx	r3
 8013804:	2800      	cmp	r0, #0
 8013806:	d0e9      	beq.n	80137dc <__ssvfiscanf_r+0x44>
 8013808:	e7ed      	b.n	80137e6 <__ssvfiscanf_r+0x4e>
 801380a:	2b25      	cmp	r3, #37	; 0x25
 801380c:	d012      	beq.n	8013834 <__ssvfiscanf_r+0x9c>
 801380e:	469a      	mov	sl, r3
 8013810:	6863      	ldr	r3, [r4, #4]
 8013812:	2b00      	cmp	r3, #0
 8013814:	f340 8091 	ble.w	801393a <__ssvfiscanf_r+0x1a2>
 8013818:	6822      	ldr	r2, [r4, #0]
 801381a:	7813      	ldrb	r3, [r2, #0]
 801381c:	4553      	cmp	r3, sl
 801381e:	f040 812e 	bne.w	8013a7e <__ssvfiscanf_r+0x2e6>
 8013822:	6863      	ldr	r3, [r4, #4]
 8013824:	3b01      	subs	r3, #1
 8013826:	6063      	str	r3, [r4, #4]
 8013828:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801382a:	3201      	adds	r2, #1
 801382c:	3301      	adds	r3, #1
 801382e:	6022      	str	r2, [r4, #0]
 8013830:	9345      	str	r3, [sp, #276]	; 0x114
 8013832:	e7d8      	b.n	80137e6 <__ssvfiscanf_r+0x4e>
 8013834:	9141      	str	r1, [sp, #260]	; 0x104
 8013836:	9143      	str	r1, [sp, #268]	; 0x10c
 8013838:	7853      	ldrb	r3, [r2, #1]
 801383a:	2b2a      	cmp	r3, #42	; 0x2a
 801383c:	bf02      	ittt	eq
 801383e:	2310      	moveq	r3, #16
 8013840:	1c95      	addeq	r5, r2, #2
 8013842:	9341      	streq	r3, [sp, #260]	; 0x104
 8013844:	220a      	movs	r2, #10
 8013846:	46aa      	mov	sl, r5
 8013848:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801384c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013850:	2b09      	cmp	r3, #9
 8013852:	d91c      	bls.n	801388e <__ssvfiscanf_r+0xf6>
 8013854:	487e      	ldr	r0, [pc, #504]	; (8013a50 <__ssvfiscanf_r+0x2b8>)
 8013856:	2203      	movs	r2, #3
 8013858:	f7ec fcc2 	bl	80001e0 <memchr>
 801385c:	b138      	cbz	r0, 801386e <__ssvfiscanf_r+0xd6>
 801385e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013860:	eba0 0009 	sub.w	r0, r0, r9
 8013864:	2301      	movs	r3, #1
 8013866:	4083      	lsls	r3, r0
 8013868:	4313      	orrs	r3, r2
 801386a:	9341      	str	r3, [sp, #260]	; 0x104
 801386c:	4655      	mov	r5, sl
 801386e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013872:	2b78      	cmp	r3, #120	; 0x78
 8013874:	d806      	bhi.n	8013884 <__ssvfiscanf_r+0xec>
 8013876:	2b57      	cmp	r3, #87	; 0x57
 8013878:	d810      	bhi.n	801389c <__ssvfiscanf_r+0x104>
 801387a:	2b25      	cmp	r3, #37	; 0x25
 801387c:	d0c7      	beq.n	801380e <__ssvfiscanf_r+0x76>
 801387e:	d857      	bhi.n	8013930 <__ssvfiscanf_r+0x198>
 8013880:	2b00      	cmp	r3, #0
 8013882:	d065      	beq.n	8013950 <__ssvfiscanf_r+0x1b8>
 8013884:	2303      	movs	r3, #3
 8013886:	9347      	str	r3, [sp, #284]	; 0x11c
 8013888:	230a      	movs	r3, #10
 801388a:	9342      	str	r3, [sp, #264]	; 0x108
 801388c:	e076      	b.n	801397c <__ssvfiscanf_r+0x1e4>
 801388e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013890:	fb02 1103 	mla	r1, r2, r3, r1
 8013894:	3930      	subs	r1, #48	; 0x30
 8013896:	9143      	str	r1, [sp, #268]	; 0x10c
 8013898:	4655      	mov	r5, sl
 801389a:	e7d4      	b.n	8013846 <__ssvfiscanf_r+0xae>
 801389c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80138a0:	2a20      	cmp	r2, #32
 80138a2:	d8ef      	bhi.n	8013884 <__ssvfiscanf_r+0xec>
 80138a4:	a101      	add	r1, pc, #4	; (adr r1, 80138ac <__ssvfiscanf_r+0x114>)
 80138a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80138aa:	bf00      	nop
 80138ac:	0801395f 	.word	0x0801395f
 80138b0:	08013885 	.word	0x08013885
 80138b4:	08013885 	.word	0x08013885
 80138b8:	080139bd 	.word	0x080139bd
 80138bc:	08013885 	.word	0x08013885
 80138c0:	08013885 	.word	0x08013885
 80138c4:	08013885 	.word	0x08013885
 80138c8:	08013885 	.word	0x08013885
 80138cc:	08013885 	.word	0x08013885
 80138d0:	08013885 	.word	0x08013885
 80138d4:	08013885 	.word	0x08013885
 80138d8:	080139d3 	.word	0x080139d3
 80138dc:	080139b9 	.word	0x080139b9
 80138e0:	08013937 	.word	0x08013937
 80138e4:	08013937 	.word	0x08013937
 80138e8:	08013937 	.word	0x08013937
 80138ec:	08013885 	.word	0x08013885
 80138f0:	08013975 	.word	0x08013975
 80138f4:	08013885 	.word	0x08013885
 80138f8:	08013885 	.word	0x08013885
 80138fc:	08013885 	.word	0x08013885
 8013900:	08013885 	.word	0x08013885
 8013904:	080139e3 	.word	0x080139e3
 8013908:	080139b1 	.word	0x080139b1
 801390c:	08013957 	.word	0x08013957
 8013910:	08013885 	.word	0x08013885
 8013914:	08013885 	.word	0x08013885
 8013918:	080139df 	.word	0x080139df
 801391c:	08013885 	.word	0x08013885
 8013920:	080139b9 	.word	0x080139b9
 8013924:	08013885 	.word	0x08013885
 8013928:	08013885 	.word	0x08013885
 801392c:	0801395f 	.word	0x0801395f
 8013930:	3b45      	subs	r3, #69	; 0x45
 8013932:	2b02      	cmp	r3, #2
 8013934:	d8a6      	bhi.n	8013884 <__ssvfiscanf_r+0xec>
 8013936:	2305      	movs	r3, #5
 8013938:	e01f      	b.n	801397a <__ssvfiscanf_r+0x1e2>
 801393a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801393c:	4621      	mov	r1, r4
 801393e:	4630      	mov	r0, r6
 8013940:	4798      	blx	r3
 8013942:	2800      	cmp	r0, #0
 8013944:	f43f af68 	beq.w	8013818 <__ssvfiscanf_r+0x80>
 8013948:	9844      	ldr	r0, [sp, #272]	; 0x110
 801394a:	2800      	cmp	r0, #0
 801394c:	f040 808d 	bne.w	8013a6a <__ssvfiscanf_r+0x2d2>
 8013950:	f04f 30ff 	mov.w	r0, #4294967295
 8013954:	e08f      	b.n	8013a76 <__ssvfiscanf_r+0x2de>
 8013956:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013958:	f042 0220 	orr.w	r2, r2, #32
 801395c:	9241      	str	r2, [sp, #260]	; 0x104
 801395e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013964:	9241      	str	r2, [sp, #260]	; 0x104
 8013966:	2210      	movs	r2, #16
 8013968:	2b6f      	cmp	r3, #111	; 0x6f
 801396a:	9242      	str	r2, [sp, #264]	; 0x108
 801396c:	bf34      	ite	cc
 801396e:	2303      	movcc	r3, #3
 8013970:	2304      	movcs	r3, #4
 8013972:	e002      	b.n	801397a <__ssvfiscanf_r+0x1e2>
 8013974:	2300      	movs	r3, #0
 8013976:	9342      	str	r3, [sp, #264]	; 0x108
 8013978:	2303      	movs	r3, #3
 801397a:	9347      	str	r3, [sp, #284]	; 0x11c
 801397c:	6863      	ldr	r3, [r4, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	dd3d      	ble.n	80139fe <__ssvfiscanf_r+0x266>
 8013982:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013984:	0659      	lsls	r1, r3, #25
 8013986:	d404      	bmi.n	8013992 <__ssvfiscanf_r+0x1fa>
 8013988:	6823      	ldr	r3, [r4, #0]
 801398a:	781a      	ldrb	r2, [r3, #0]
 801398c:	5cba      	ldrb	r2, [r7, r2]
 801398e:	0712      	lsls	r2, r2, #28
 8013990:	d43c      	bmi.n	8013a0c <__ssvfiscanf_r+0x274>
 8013992:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013994:	2b02      	cmp	r3, #2
 8013996:	dc4b      	bgt.n	8013a30 <__ssvfiscanf_r+0x298>
 8013998:	466b      	mov	r3, sp
 801399a:	4622      	mov	r2, r4
 801399c:	a941      	add	r1, sp, #260	; 0x104
 801399e:	4630      	mov	r0, r6
 80139a0:	f000 f872 	bl	8013a88 <_scanf_chars>
 80139a4:	2801      	cmp	r0, #1
 80139a6:	d06a      	beq.n	8013a7e <__ssvfiscanf_r+0x2e6>
 80139a8:	2802      	cmp	r0, #2
 80139aa:	f47f af1c 	bne.w	80137e6 <__ssvfiscanf_r+0x4e>
 80139ae:	e7cb      	b.n	8013948 <__ssvfiscanf_r+0x1b0>
 80139b0:	2308      	movs	r3, #8
 80139b2:	9342      	str	r3, [sp, #264]	; 0x108
 80139b4:	2304      	movs	r3, #4
 80139b6:	e7e0      	b.n	801397a <__ssvfiscanf_r+0x1e2>
 80139b8:	220a      	movs	r2, #10
 80139ba:	e7d5      	b.n	8013968 <__ssvfiscanf_r+0x1d0>
 80139bc:	4629      	mov	r1, r5
 80139be:	4640      	mov	r0, r8
 80139c0:	f000 fa5e 	bl	8013e80 <__sccl>
 80139c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80139c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139ca:	9341      	str	r3, [sp, #260]	; 0x104
 80139cc:	4605      	mov	r5, r0
 80139ce:	2301      	movs	r3, #1
 80139d0:	e7d3      	b.n	801397a <__ssvfiscanf_r+0x1e2>
 80139d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80139d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139d8:	9341      	str	r3, [sp, #260]	; 0x104
 80139da:	2300      	movs	r3, #0
 80139dc:	e7cd      	b.n	801397a <__ssvfiscanf_r+0x1e2>
 80139de:	2302      	movs	r3, #2
 80139e0:	e7cb      	b.n	801397a <__ssvfiscanf_r+0x1e2>
 80139e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80139e4:	06c3      	lsls	r3, r0, #27
 80139e6:	f53f aefe 	bmi.w	80137e6 <__ssvfiscanf_r+0x4e>
 80139ea:	9b00      	ldr	r3, [sp, #0]
 80139ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80139ee:	1d19      	adds	r1, r3, #4
 80139f0:	9100      	str	r1, [sp, #0]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	07c0      	lsls	r0, r0, #31
 80139f6:	bf4c      	ite	mi
 80139f8:	801a      	strhmi	r2, [r3, #0]
 80139fa:	601a      	strpl	r2, [r3, #0]
 80139fc:	e6f3      	b.n	80137e6 <__ssvfiscanf_r+0x4e>
 80139fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013a00:	4621      	mov	r1, r4
 8013a02:	4630      	mov	r0, r6
 8013a04:	4798      	blx	r3
 8013a06:	2800      	cmp	r0, #0
 8013a08:	d0bb      	beq.n	8013982 <__ssvfiscanf_r+0x1ea>
 8013a0a:	e79d      	b.n	8013948 <__ssvfiscanf_r+0x1b0>
 8013a0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013a0e:	3201      	adds	r2, #1
 8013a10:	9245      	str	r2, [sp, #276]	; 0x114
 8013a12:	6862      	ldr	r2, [r4, #4]
 8013a14:	3a01      	subs	r2, #1
 8013a16:	2a00      	cmp	r2, #0
 8013a18:	6062      	str	r2, [r4, #4]
 8013a1a:	dd02      	ble.n	8013a22 <__ssvfiscanf_r+0x28a>
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	6023      	str	r3, [r4, #0]
 8013a20:	e7b2      	b.n	8013988 <__ssvfiscanf_r+0x1f0>
 8013a22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013a24:	4621      	mov	r1, r4
 8013a26:	4630      	mov	r0, r6
 8013a28:	4798      	blx	r3
 8013a2a:	2800      	cmp	r0, #0
 8013a2c:	d0ac      	beq.n	8013988 <__ssvfiscanf_r+0x1f0>
 8013a2e:	e78b      	b.n	8013948 <__ssvfiscanf_r+0x1b0>
 8013a30:	2b04      	cmp	r3, #4
 8013a32:	dc0f      	bgt.n	8013a54 <__ssvfiscanf_r+0x2bc>
 8013a34:	466b      	mov	r3, sp
 8013a36:	4622      	mov	r2, r4
 8013a38:	a941      	add	r1, sp, #260	; 0x104
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	f000 f87e 	bl	8013b3c <_scanf_i>
 8013a40:	e7b0      	b.n	80139a4 <__ssvfiscanf_r+0x20c>
 8013a42:	bf00      	nop
 8013a44:	080136e5 	.word	0x080136e5
 8013a48:	0801375f 	.word	0x0801375f
 8013a4c:	080165f9 	.word	0x080165f9
 8013a50:	080166ff 	.word	0x080166ff
 8013a54:	4b0b      	ldr	r3, [pc, #44]	; (8013a84 <__ssvfiscanf_r+0x2ec>)
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	f43f aec5 	beq.w	80137e6 <__ssvfiscanf_r+0x4e>
 8013a5c:	466b      	mov	r3, sp
 8013a5e:	4622      	mov	r2, r4
 8013a60:	a941      	add	r1, sp, #260	; 0x104
 8013a62:	4630      	mov	r0, r6
 8013a64:	f7fc feac 	bl	80107c0 <_scanf_float>
 8013a68:	e79c      	b.n	80139a4 <__ssvfiscanf_r+0x20c>
 8013a6a:	89a3      	ldrh	r3, [r4, #12]
 8013a6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013a70:	bf18      	it	ne
 8013a72:	f04f 30ff 	movne.w	r0, #4294967295
 8013a76:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a7e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013a80:	e7f9      	b.n	8013a76 <__ssvfiscanf_r+0x2de>
 8013a82:	bf00      	nop
 8013a84:	080107c1 	.word	0x080107c1

08013a88 <_scanf_chars>:
 8013a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a8c:	4615      	mov	r5, r2
 8013a8e:	688a      	ldr	r2, [r1, #8]
 8013a90:	4680      	mov	r8, r0
 8013a92:	460c      	mov	r4, r1
 8013a94:	b932      	cbnz	r2, 8013aa4 <_scanf_chars+0x1c>
 8013a96:	698a      	ldr	r2, [r1, #24]
 8013a98:	2a00      	cmp	r2, #0
 8013a9a:	bf0c      	ite	eq
 8013a9c:	2201      	moveq	r2, #1
 8013a9e:	f04f 32ff 	movne.w	r2, #4294967295
 8013aa2:	608a      	str	r2, [r1, #8]
 8013aa4:	6822      	ldr	r2, [r4, #0]
 8013aa6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013b38 <_scanf_chars+0xb0>
 8013aaa:	06d1      	lsls	r1, r2, #27
 8013aac:	bf5f      	itttt	pl
 8013aae:	681a      	ldrpl	r2, [r3, #0]
 8013ab0:	1d11      	addpl	r1, r2, #4
 8013ab2:	6019      	strpl	r1, [r3, #0]
 8013ab4:	6816      	ldrpl	r6, [r2, #0]
 8013ab6:	2700      	movs	r7, #0
 8013ab8:	69a0      	ldr	r0, [r4, #24]
 8013aba:	b188      	cbz	r0, 8013ae0 <_scanf_chars+0x58>
 8013abc:	2801      	cmp	r0, #1
 8013abe:	d107      	bne.n	8013ad0 <_scanf_chars+0x48>
 8013ac0:	682a      	ldr	r2, [r5, #0]
 8013ac2:	7811      	ldrb	r1, [r2, #0]
 8013ac4:	6962      	ldr	r2, [r4, #20]
 8013ac6:	5c52      	ldrb	r2, [r2, r1]
 8013ac8:	b952      	cbnz	r2, 8013ae0 <_scanf_chars+0x58>
 8013aca:	2f00      	cmp	r7, #0
 8013acc:	d031      	beq.n	8013b32 <_scanf_chars+0xaa>
 8013ace:	e022      	b.n	8013b16 <_scanf_chars+0x8e>
 8013ad0:	2802      	cmp	r0, #2
 8013ad2:	d120      	bne.n	8013b16 <_scanf_chars+0x8e>
 8013ad4:	682b      	ldr	r3, [r5, #0]
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013adc:	071b      	lsls	r3, r3, #28
 8013ade:	d41a      	bmi.n	8013b16 <_scanf_chars+0x8e>
 8013ae0:	6823      	ldr	r3, [r4, #0]
 8013ae2:	06da      	lsls	r2, r3, #27
 8013ae4:	bf5e      	ittt	pl
 8013ae6:	682b      	ldrpl	r3, [r5, #0]
 8013ae8:	781b      	ldrbpl	r3, [r3, #0]
 8013aea:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013aee:	682a      	ldr	r2, [r5, #0]
 8013af0:	686b      	ldr	r3, [r5, #4]
 8013af2:	3201      	adds	r2, #1
 8013af4:	602a      	str	r2, [r5, #0]
 8013af6:	68a2      	ldr	r2, [r4, #8]
 8013af8:	3b01      	subs	r3, #1
 8013afa:	3a01      	subs	r2, #1
 8013afc:	606b      	str	r3, [r5, #4]
 8013afe:	3701      	adds	r7, #1
 8013b00:	60a2      	str	r2, [r4, #8]
 8013b02:	b142      	cbz	r2, 8013b16 <_scanf_chars+0x8e>
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	dcd7      	bgt.n	8013ab8 <_scanf_chars+0x30>
 8013b08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013b0c:	4629      	mov	r1, r5
 8013b0e:	4640      	mov	r0, r8
 8013b10:	4798      	blx	r3
 8013b12:	2800      	cmp	r0, #0
 8013b14:	d0d0      	beq.n	8013ab8 <_scanf_chars+0x30>
 8013b16:	6823      	ldr	r3, [r4, #0]
 8013b18:	f013 0310 	ands.w	r3, r3, #16
 8013b1c:	d105      	bne.n	8013b2a <_scanf_chars+0xa2>
 8013b1e:	68e2      	ldr	r2, [r4, #12]
 8013b20:	3201      	adds	r2, #1
 8013b22:	60e2      	str	r2, [r4, #12]
 8013b24:	69a2      	ldr	r2, [r4, #24]
 8013b26:	b102      	cbz	r2, 8013b2a <_scanf_chars+0xa2>
 8013b28:	7033      	strb	r3, [r6, #0]
 8013b2a:	6923      	ldr	r3, [r4, #16]
 8013b2c:	443b      	add	r3, r7
 8013b2e:	6123      	str	r3, [r4, #16]
 8013b30:	2000      	movs	r0, #0
 8013b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b36:	bf00      	nop
 8013b38:	080165f9 	.word	0x080165f9

08013b3c <_scanf_i>:
 8013b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b40:	4698      	mov	r8, r3
 8013b42:	4b74      	ldr	r3, [pc, #464]	; (8013d14 <_scanf_i+0x1d8>)
 8013b44:	460c      	mov	r4, r1
 8013b46:	4682      	mov	sl, r0
 8013b48:	4616      	mov	r6, r2
 8013b4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013b4e:	b087      	sub	sp, #28
 8013b50:	ab03      	add	r3, sp, #12
 8013b52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013b56:	4b70      	ldr	r3, [pc, #448]	; (8013d18 <_scanf_i+0x1dc>)
 8013b58:	69a1      	ldr	r1, [r4, #24]
 8013b5a:	4a70      	ldr	r2, [pc, #448]	; (8013d1c <_scanf_i+0x1e0>)
 8013b5c:	2903      	cmp	r1, #3
 8013b5e:	bf18      	it	ne
 8013b60:	461a      	movne	r2, r3
 8013b62:	68a3      	ldr	r3, [r4, #8]
 8013b64:	9201      	str	r2, [sp, #4]
 8013b66:	1e5a      	subs	r2, r3, #1
 8013b68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013b6c:	bf88      	it	hi
 8013b6e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013b72:	4627      	mov	r7, r4
 8013b74:	bf82      	ittt	hi
 8013b76:	eb03 0905 	addhi.w	r9, r3, r5
 8013b7a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013b7e:	60a3      	strhi	r3, [r4, #8]
 8013b80:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013b84:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013b88:	bf98      	it	ls
 8013b8a:	f04f 0900 	movls.w	r9, #0
 8013b8e:	6023      	str	r3, [r4, #0]
 8013b90:	463d      	mov	r5, r7
 8013b92:	f04f 0b00 	mov.w	fp, #0
 8013b96:	6831      	ldr	r1, [r6, #0]
 8013b98:	ab03      	add	r3, sp, #12
 8013b9a:	7809      	ldrb	r1, [r1, #0]
 8013b9c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013ba0:	2202      	movs	r2, #2
 8013ba2:	f7ec fb1d 	bl	80001e0 <memchr>
 8013ba6:	b328      	cbz	r0, 8013bf4 <_scanf_i+0xb8>
 8013ba8:	f1bb 0f01 	cmp.w	fp, #1
 8013bac:	d159      	bne.n	8013c62 <_scanf_i+0x126>
 8013bae:	6862      	ldr	r2, [r4, #4]
 8013bb0:	b92a      	cbnz	r2, 8013bbe <_scanf_i+0x82>
 8013bb2:	6822      	ldr	r2, [r4, #0]
 8013bb4:	2308      	movs	r3, #8
 8013bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013bba:	6063      	str	r3, [r4, #4]
 8013bbc:	6022      	str	r2, [r4, #0]
 8013bbe:	6822      	ldr	r2, [r4, #0]
 8013bc0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013bc4:	6022      	str	r2, [r4, #0]
 8013bc6:	68a2      	ldr	r2, [r4, #8]
 8013bc8:	1e51      	subs	r1, r2, #1
 8013bca:	60a1      	str	r1, [r4, #8]
 8013bcc:	b192      	cbz	r2, 8013bf4 <_scanf_i+0xb8>
 8013bce:	6832      	ldr	r2, [r6, #0]
 8013bd0:	1c51      	adds	r1, r2, #1
 8013bd2:	6031      	str	r1, [r6, #0]
 8013bd4:	7812      	ldrb	r2, [r2, #0]
 8013bd6:	f805 2b01 	strb.w	r2, [r5], #1
 8013bda:	6872      	ldr	r2, [r6, #4]
 8013bdc:	3a01      	subs	r2, #1
 8013bde:	2a00      	cmp	r2, #0
 8013be0:	6072      	str	r2, [r6, #4]
 8013be2:	dc07      	bgt.n	8013bf4 <_scanf_i+0xb8>
 8013be4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013be8:	4631      	mov	r1, r6
 8013bea:	4650      	mov	r0, sl
 8013bec:	4790      	blx	r2
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	f040 8085 	bne.w	8013cfe <_scanf_i+0x1c2>
 8013bf4:	f10b 0b01 	add.w	fp, fp, #1
 8013bf8:	f1bb 0f03 	cmp.w	fp, #3
 8013bfc:	d1cb      	bne.n	8013b96 <_scanf_i+0x5a>
 8013bfe:	6863      	ldr	r3, [r4, #4]
 8013c00:	b90b      	cbnz	r3, 8013c06 <_scanf_i+0xca>
 8013c02:	230a      	movs	r3, #10
 8013c04:	6063      	str	r3, [r4, #4]
 8013c06:	6863      	ldr	r3, [r4, #4]
 8013c08:	4945      	ldr	r1, [pc, #276]	; (8013d20 <_scanf_i+0x1e4>)
 8013c0a:	6960      	ldr	r0, [r4, #20]
 8013c0c:	1ac9      	subs	r1, r1, r3
 8013c0e:	f000 f937 	bl	8013e80 <__sccl>
 8013c12:	f04f 0b00 	mov.w	fp, #0
 8013c16:	68a3      	ldr	r3, [r4, #8]
 8013c18:	6822      	ldr	r2, [r4, #0]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d03d      	beq.n	8013c9a <_scanf_i+0x15e>
 8013c1e:	6831      	ldr	r1, [r6, #0]
 8013c20:	6960      	ldr	r0, [r4, #20]
 8013c22:	f891 c000 	ldrb.w	ip, [r1]
 8013c26:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	d035      	beq.n	8013c9a <_scanf_i+0x15e>
 8013c2e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013c32:	d124      	bne.n	8013c7e <_scanf_i+0x142>
 8013c34:	0510      	lsls	r0, r2, #20
 8013c36:	d522      	bpl.n	8013c7e <_scanf_i+0x142>
 8013c38:	f10b 0b01 	add.w	fp, fp, #1
 8013c3c:	f1b9 0f00 	cmp.w	r9, #0
 8013c40:	d003      	beq.n	8013c4a <_scanf_i+0x10e>
 8013c42:	3301      	adds	r3, #1
 8013c44:	f109 39ff 	add.w	r9, r9, #4294967295
 8013c48:	60a3      	str	r3, [r4, #8]
 8013c4a:	6873      	ldr	r3, [r6, #4]
 8013c4c:	3b01      	subs	r3, #1
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	6073      	str	r3, [r6, #4]
 8013c52:	dd1b      	ble.n	8013c8c <_scanf_i+0x150>
 8013c54:	6833      	ldr	r3, [r6, #0]
 8013c56:	3301      	adds	r3, #1
 8013c58:	6033      	str	r3, [r6, #0]
 8013c5a:	68a3      	ldr	r3, [r4, #8]
 8013c5c:	3b01      	subs	r3, #1
 8013c5e:	60a3      	str	r3, [r4, #8]
 8013c60:	e7d9      	b.n	8013c16 <_scanf_i+0xda>
 8013c62:	f1bb 0f02 	cmp.w	fp, #2
 8013c66:	d1ae      	bne.n	8013bc6 <_scanf_i+0x8a>
 8013c68:	6822      	ldr	r2, [r4, #0]
 8013c6a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013c6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013c72:	d1bf      	bne.n	8013bf4 <_scanf_i+0xb8>
 8013c74:	2310      	movs	r3, #16
 8013c76:	6063      	str	r3, [r4, #4]
 8013c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013c7c:	e7a2      	b.n	8013bc4 <_scanf_i+0x88>
 8013c7e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013c82:	6022      	str	r2, [r4, #0]
 8013c84:	780b      	ldrb	r3, [r1, #0]
 8013c86:	f805 3b01 	strb.w	r3, [r5], #1
 8013c8a:	e7de      	b.n	8013c4a <_scanf_i+0x10e>
 8013c8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013c90:	4631      	mov	r1, r6
 8013c92:	4650      	mov	r0, sl
 8013c94:	4798      	blx	r3
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d0df      	beq.n	8013c5a <_scanf_i+0x11e>
 8013c9a:	6823      	ldr	r3, [r4, #0]
 8013c9c:	05d9      	lsls	r1, r3, #23
 8013c9e:	d50d      	bpl.n	8013cbc <_scanf_i+0x180>
 8013ca0:	42bd      	cmp	r5, r7
 8013ca2:	d909      	bls.n	8013cb8 <_scanf_i+0x17c>
 8013ca4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013cac:	4632      	mov	r2, r6
 8013cae:	4650      	mov	r0, sl
 8013cb0:	4798      	blx	r3
 8013cb2:	f105 39ff 	add.w	r9, r5, #4294967295
 8013cb6:	464d      	mov	r5, r9
 8013cb8:	42bd      	cmp	r5, r7
 8013cba:	d028      	beq.n	8013d0e <_scanf_i+0x1d2>
 8013cbc:	6822      	ldr	r2, [r4, #0]
 8013cbe:	f012 0210 	ands.w	r2, r2, #16
 8013cc2:	d113      	bne.n	8013cec <_scanf_i+0x1b0>
 8013cc4:	702a      	strb	r2, [r5, #0]
 8013cc6:	6863      	ldr	r3, [r4, #4]
 8013cc8:	9e01      	ldr	r6, [sp, #4]
 8013cca:	4639      	mov	r1, r7
 8013ccc:	4650      	mov	r0, sl
 8013cce:	47b0      	blx	r6
 8013cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8013cd4:	6821      	ldr	r1, [r4, #0]
 8013cd6:	1d1a      	adds	r2, r3, #4
 8013cd8:	f8c8 2000 	str.w	r2, [r8]
 8013cdc:	f011 0f20 	tst.w	r1, #32
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	d00f      	beq.n	8013d04 <_scanf_i+0x1c8>
 8013ce4:	6018      	str	r0, [r3, #0]
 8013ce6:	68e3      	ldr	r3, [r4, #12]
 8013ce8:	3301      	adds	r3, #1
 8013cea:	60e3      	str	r3, [r4, #12]
 8013cec:	6923      	ldr	r3, [r4, #16]
 8013cee:	1bed      	subs	r5, r5, r7
 8013cf0:	445d      	add	r5, fp
 8013cf2:	442b      	add	r3, r5
 8013cf4:	6123      	str	r3, [r4, #16]
 8013cf6:	2000      	movs	r0, #0
 8013cf8:	b007      	add	sp, #28
 8013cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cfe:	f04f 0b00 	mov.w	fp, #0
 8013d02:	e7ca      	b.n	8013c9a <_scanf_i+0x15e>
 8013d04:	07ca      	lsls	r2, r1, #31
 8013d06:	bf4c      	ite	mi
 8013d08:	8018      	strhmi	r0, [r3, #0]
 8013d0a:	6018      	strpl	r0, [r3, #0]
 8013d0c:	e7eb      	b.n	8013ce6 <_scanf_i+0x1aa>
 8013d0e:	2001      	movs	r0, #1
 8013d10:	e7f2      	b.n	8013cf8 <_scanf_i+0x1bc>
 8013d12:	bf00      	nop
 8013d14:	08015f1c 	.word	0x08015f1c
 8013d18:	0801486d 	.word	0x0801486d
 8013d1c:	08013431 	.word	0x08013431
 8013d20:	0801671a 	.word	0x0801671a

08013d24 <__sflush_r>:
 8013d24:	898a      	ldrh	r2, [r1, #12]
 8013d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d2a:	4605      	mov	r5, r0
 8013d2c:	0710      	lsls	r0, r2, #28
 8013d2e:	460c      	mov	r4, r1
 8013d30:	d458      	bmi.n	8013de4 <__sflush_r+0xc0>
 8013d32:	684b      	ldr	r3, [r1, #4]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	dc05      	bgt.n	8013d44 <__sflush_r+0x20>
 8013d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	dc02      	bgt.n	8013d44 <__sflush_r+0x20>
 8013d3e:	2000      	movs	r0, #0
 8013d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d46:	2e00      	cmp	r6, #0
 8013d48:	d0f9      	beq.n	8013d3e <__sflush_r+0x1a>
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d50:	682f      	ldr	r7, [r5, #0]
 8013d52:	6a21      	ldr	r1, [r4, #32]
 8013d54:	602b      	str	r3, [r5, #0]
 8013d56:	d032      	beq.n	8013dbe <__sflush_r+0x9a>
 8013d58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d5a:	89a3      	ldrh	r3, [r4, #12]
 8013d5c:	075a      	lsls	r2, r3, #29
 8013d5e:	d505      	bpl.n	8013d6c <__sflush_r+0x48>
 8013d60:	6863      	ldr	r3, [r4, #4]
 8013d62:	1ac0      	subs	r0, r0, r3
 8013d64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d66:	b10b      	cbz	r3, 8013d6c <__sflush_r+0x48>
 8013d68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d6a:	1ac0      	subs	r0, r0, r3
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	4602      	mov	r2, r0
 8013d70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d72:	6a21      	ldr	r1, [r4, #32]
 8013d74:	4628      	mov	r0, r5
 8013d76:	47b0      	blx	r6
 8013d78:	1c43      	adds	r3, r0, #1
 8013d7a:	89a3      	ldrh	r3, [r4, #12]
 8013d7c:	d106      	bne.n	8013d8c <__sflush_r+0x68>
 8013d7e:	6829      	ldr	r1, [r5, #0]
 8013d80:	291d      	cmp	r1, #29
 8013d82:	d82b      	bhi.n	8013ddc <__sflush_r+0xb8>
 8013d84:	4a29      	ldr	r2, [pc, #164]	; (8013e2c <__sflush_r+0x108>)
 8013d86:	410a      	asrs	r2, r1
 8013d88:	07d6      	lsls	r6, r2, #31
 8013d8a:	d427      	bmi.n	8013ddc <__sflush_r+0xb8>
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	6062      	str	r2, [r4, #4]
 8013d90:	04d9      	lsls	r1, r3, #19
 8013d92:	6922      	ldr	r2, [r4, #16]
 8013d94:	6022      	str	r2, [r4, #0]
 8013d96:	d504      	bpl.n	8013da2 <__sflush_r+0x7e>
 8013d98:	1c42      	adds	r2, r0, #1
 8013d9a:	d101      	bne.n	8013da0 <__sflush_r+0x7c>
 8013d9c:	682b      	ldr	r3, [r5, #0]
 8013d9e:	b903      	cbnz	r3, 8013da2 <__sflush_r+0x7e>
 8013da0:	6560      	str	r0, [r4, #84]	; 0x54
 8013da2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013da4:	602f      	str	r7, [r5, #0]
 8013da6:	2900      	cmp	r1, #0
 8013da8:	d0c9      	beq.n	8013d3e <__sflush_r+0x1a>
 8013daa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013dae:	4299      	cmp	r1, r3
 8013db0:	d002      	beq.n	8013db8 <__sflush_r+0x94>
 8013db2:	4628      	mov	r0, r5
 8013db4:	f7fd ffae 	bl	8011d14 <_free_r>
 8013db8:	2000      	movs	r0, #0
 8013dba:	6360      	str	r0, [r4, #52]	; 0x34
 8013dbc:	e7c0      	b.n	8013d40 <__sflush_r+0x1c>
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	4628      	mov	r0, r5
 8013dc2:	47b0      	blx	r6
 8013dc4:	1c41      	adds	r1, r0, #1
 8013dc6:	d1c8      	bne.n	8013d5a <__sflush_r+0x36>
 8013dc8:	682b      	ldr	r3, [r5, #0]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d0c5      	beq.n	8013d5a <__sflush_r+0x36>
 8013dce:	2b1d      	cmp	r3, #29
 8013dd0:	d001      	beq.n	8013dd6 <__sflush_r+0xb2>
 8013dd2:	2b16      	cmp	r3, #22
 8013dd4:	d101      	bne.n	8013dda <__sflush_r+0xb6>
 8013dd6:	602f      	str	r7, [r5, #0]
 8013dd8:	e7b1      	b.n	8013d3e <__sflush_r+0x1a>
 8013dda:	89a3      	ldrh	r3, [r4, #12]
 8013ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013de0:	81a3      	strh	r3, [r4, #12]
 8013de2:	e7ad      	b.n	8013d40 <__sflush_r+0x1c>
 8013de4:	690f      	ldr	r7, [r1, #16]
 8013de6:	2f00      	cmp	r7, #0
 8013de8:	d0a9      	beq.n	8013d3e <__sflush_r+0x1a>
 8013dea:	0793      	lsls	r3, r2, #30
 8013dec:	680e      	ldr	r6, [r1, #0]
 8013dee:	bf08      	it	eq
 8013df0:	694b      	ldreq	r3, [r1, #20]
 8013df2:	600f      	str	r7, [r1, #0]
 8013df4:	bf18      	it	ne
 8013df6:	2300      	movne	r3, #0
 8013df8:	eba6 0807 	sub.w	r8, r6, r7
 8013dfc:	608b      	str	r3, [r1, #8]
 8013dfe:	f1b8 0f00 	cmp.w	r8, #0
 8013e02:	dd9c      	ble.n	8013d3e <__sflush_r+0x1a>
 8013e04:	6a21      	ldr	r1, [r4, #32]
 8013e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013e08:	4643      	mov	r3, r8
 8013e0a:	463a      	mov	r2, r7
 8013e0c:	4628      	mov	r0, r5
 8013e0e:	47b0      	blx	r6
 8013e10:	2800      	cmp	r0, #0
 8013e12:	dc06      	bgt.n	8013e22 <__sflush_r+0xfe>
 8013e14:	89a3      	ldrh	r3, [r4, #12]
 8013e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e1a:	81a3      	strh	r3, [r4, #12]
 8013e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e20:	e78e      	b.n	8013d40 <__sflush_r+0x1c>
 8013e22:	4407      	add	r7, r0
 8013e24:	eba8 0800 	sub.w	r8, r8, r0
 8013e28:	e7e9      	b.n	8013dfe <__sflush_r+0xda>
 8013e2a:	bf00      	nop
 8013e2c:	dfbffffe 	.word	0xdfbffffe

08013e30 <_fflush_r>:
 8013e30:	b538      	push	{r3, r4, r5, lr}
 8013e32:	690b      	ldr	r3, [r1, #16]
 8013e34:	4605      	mov	r5, r0
 8013e36:	460c      	mov	r4, r1
 8013e38:	b913      	cbnz	r3, 8013e40 <_fflush_r+0x10>
 8013e3a:	2500      	movs	r5, #0
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	bd38      	pop	{r3, r4, r5, pc}
 8013e40:	b118      	cbz	r0, 8013e4a <_fflush_r+0x1a>
 8013e42:	6a03      	ldr	r3, [r0, #32]
 8013e44:	b90b      	cbnz	r3, 8013e4a <_fflush_r+0x1a>
 8013e46:	f7fc ff57 	bl	8010cf8 <__sinit>
 8013e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d0f3      	beq.n	8013e3a <_fflush_r+0xa>
 8013e52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e54:	07d0      	lsls	r0, r2, #31
 8013e56:	d404      	bmi.n	8013e62 <_fflush_r+0x32>
 8013e58:	0599      	lsls	r1, r3, #22
 8013e5a:	d402      	bmi.n	8013e62 <_fflush_r+0x32>
 8013e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e5e:	f7fd f8d6 	bl	801100e <__retarget_lock_acquire_recursive>
 8013e62:	4628      	mov	r0, r5
 8013e64:	4621      	mov	r1, r4
 8013e66:	f7ff ff5d 	bl	8013d24 <__sflush_r>
 8013e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e6c:	07da      	lsls	r2, r3, #31
 8013e6e:	4605      	mov	r5, r0
 8013e70:	d4e4      	bmi.n	8013e3c <_fflush_r+0xc>
 8013e72:	89a3      	ldrh	r3, [r4, #12]
 8013e74:	059b      	lsls	r3, r3, #22
 8013e76:	d4e1      	bmi.n	8013e3c <_fflush_r+0xc>
 8013e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e7a:	f7fd f8c9 	bl	8011010 <__retarget_lock_release_recursive>
 8013e7e:	e7dd      	b.n	8013e3c <_fflush_r+0xc>

08013e80 <__sccl>:
 8013e80:	b570      	push	{r4, r5, r6, lr}
 8013e82:	780b      	ldrb	r3, [r1, #0]
 8013e84:	4604      	mov	r4, r0
 8013e86:	2b5e      	cmp	r3, #94	; 0x5e
 8013e88:	bf0b      	itete	eq
 8013e8a:	784b      	ldrbeq	r3, [r1, #1]
 8013e8c:	1c4a      	addne	r2, r1, #1
 8013e8e:	1c8a      	addeq	r2, r1, #2
 8013e90:	2100      	movne	r1, #0
 8013e92:	bf08      	it	eq
 8013e94:	2101      	moveq	r1, #1
 8013e96:	3801      	subs	r0, #1
 8013e98:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013e9c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013ea0:	42a8      	cmp	r0, r5
 8013ea2:	d1fb      	bne.n	8013e9c <__sccl+0x1c>
 8013ea4:	b90b      	cbnz	r3, 8013eaa <__sccl+0x2a>
 8013ea6:	1e50      	subs	r0, r2, #1
 8013ea8:	bd70      	pop	{r4, r5, r6, pc}
 8013eaa:	f081 0101 	eor.w	r1, r1, #1
 8013eae:	54e1      	strb	r1, [r4, r3]
 8013eb0:	4610      	mov	r0, r2
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013eb8:	2d2d      	cmp	r5, #45	; 0x2d
 8013eba:	d005      	beq.n	8013ec8 <__sccl+0x48>
 8013ebc:	2d5d      	cmp	r5, #93	; 0x5d
 8013ebe:	d016      	beq.n	8013eee <__sccl+0x6e>
 8013ec0:	2d00      	cmp	r5, #0
 8013ec2:	d0f1      	beq.n	8013ea8 <__sccl+0x28>
 8013ec4:	462b      	mov	r3, r5
 8013ec6:	e7f2      	b.n	8013eae <__sccl+0x2e>
 8013ec8:	7846      	ldrb	r6, [r0, #1]
 8013eca:	2e5d      	cmp	r6, #93	; 0x5d
 8013ecc:	d0fa      	beq.n	8013ec4 <__sccl+0x44>
 8013ece:	42b3      	cmp	r3, r6
 8013ed0:	dcf8      	bgt.n	8013ec4 <__sccl+0x44>
 8013ed2:	3002      	adds	r0, #2
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	3201      	adds	r2, #1
 8013ed8:	4296      	cmp	r6, r2
 8013eda:	54a1      	strb	r1, [r4, r2]
 8013edc:	dcfb      	bgt.n	8013ed6 <__sccl+0x56>
 8013ede:	1af2      	subs	r2, r6, r3
 8013ee0:	3a01      	subs	r2, #1
 8013ee2:	1c5d      	adds	r5, r3, #1
 8013ee4:	42b3      	cmp	r3, r6
 8013ee6:	bfa8      	it	ge
 8013ee8:	2200      	movge	r2, #0
 8013eea:	18ab      	adds	r3, r5, r2
 8013eec:	e7e1      	b.n	8013eb2 <__sccl+0x32>
 8013eee:	4610      	mov	r0, r2
 8013ef0:	e7da      	b.n	8013ea8 <__sccl+0x28>

08013ef2 <__submore>:
 8013ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef6:	460c      	mov	r4, r1
 8013ef8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013efa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013efe:	4299      	cmp	r1, r3
 8013f00:	d11d      	bne.n	8013f3e <__submore+0x4c>
 8013f02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013f06:	f7fb ff69 	bl	800fddc <_malloc_r>
 8013f0a:	b918      	cbnz	r0, 8013f14 <__submore+0x22>
 8013f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f18:	63a3      	str	r3, [r4, #56]	; 0x38
 8013f1a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013f1e:	6360      	str	r0, [r4, #52]	; 0x34
 8013f20:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013f24:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013f28:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013f2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013f30:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013f34:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013f38:	6020      	str	r0, [r4, #0]
 8013f3a:	2000      	movs	r0, #0
 8013f3c:	e7e8      	b.n	8013f10 <__submore+0x1e>
 8013f3e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013f40:	0077      	lsls	r7, r6, #1
 8013f42:	463a      	mov	r2, r7
 8013f44:	f000 fbf1 	bl	801472a <_realloc_r>
 8013f48:	4605      	mov	r5, r0
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d0de      	beq.n	8013f0c <__submore+0x1a>
 8013f4e:	eb00 0806 	add.w	r8, r0, r6
 8013f52:	4601      	mov	r1, r0
 8013f54:	4632      	mov	r2, r6
 8013f56:	4640      	mov	r0, r8
 8013f58:	f000 f831 	bl	8013fbe <memcpy>
 8013f5c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013f60:	f8c4 8000 	str.w	r8, [r4]
 8013f64:	e7e9      	b.n	8013f3a <__submore+0x48>

08013f66 <memmove>:
 8013f66:	4288      	cmp	r0, r1
 8013f68:	b510      	push	{r4, lr}
 8013f6a:	eb01 0402 	add.w	r4, r1, r2
 8013f6e:	d902      	bls.n	8013f76 <memmove+0x10>
 8013f70:	4284      	cmp	r4, r0
 8013f72:	4623      	mov	r3, r4
 8013f74:	d807      	bhi.n	8013f86 <memmove+0x20>
 8013f76:	1e43      	subs	r3, r0, #1
 8013f78:	42a1      	cmp	r1, r4
 8013f7a:	d008      	beq.n	8013f8e <memmove+0x28>
 8013f7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f84:	e7f8      	b.n	8013f78 <memmove+0x12>
 8013f86:	4402      	add	r2, r0
 8013f88:	4601      	mov	r1, r0
 8013f8a:	428a      	cmp	r2, r1
 8013f8c:	d100      	bne.n	8013f90 <memmove+0x2a>
 8013f8e:	bd10      	pop	{r4, pc}
 8013f90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f98:	e7f7      	b.n	8013f8a <memmove+0x24>

08013f9a <strncmp>:
 8013f9a:	b510      	push	{r4, lr}
 8013f9c:	b16a      	cbz	r2, 8013fba <strncmp+0x20>
 8013f9e:	3901      	subs	r1, #1
 8013fa0:	1884      	adds	r4, r0, r2
 8013fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fa6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d103      	bne.n	8013fb6 <strncmp+0x1c>
 8013fae:	42a0      	cmp	r0, r4
 8013fb0:	d001      	beq.n	8013fb6 <strncmp+0x1c>
 8013fb2:	2a00      	cmp	r2, #0
 8013fb4:	d1f5      	bne.n	8013fa2 <strncmp+0x8>
 8013fb6:	1ad0      	subs	r0, r2, r3
 8013fb8:	bd10      	pop	{r4, pc}
 8013fba:	4610      	mov	r0, r2
 8013fbc:	e7fc      	b.n	8013fb8 <strncmp+0x1e>

08013fbe <memcpy>:
 8013fbe:	440a      	add	r2, r1
 8013fc0:	4291      	cmp	r1, r2
 8013fc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8013fc6:	d100      	bne.n	8013fca <memcpy+0xc>
 8013fc8:	4770      	bx	lr
 8013fca:	b510      	push	{r4, lr}
 8013fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013fd4:	4291      	cmp	r1, r2
 8013fd6:	d1f9      	bne.n	8013fcc <memcpy+0xe>
 8013fd8:	bd10      	pop	{r4, pc}
 8013fda:	0000      	movs	r0, r0
 8013fdc:	0000      	movs	r0, r0
	...

08013fe0 <nan>:
 8013fe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013fe8 <nan+0x8>
 8013fe4:	4770      	bx	lr
 8013fe6:	bf00      	nop
 8013fe8:	00000000 	.word	0x00000000
 8013fec:	7ff80000 	.word	0x7ff80000

08013ff0 <__assert_func>:
 8013ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ff2:	4614      	mov	r4, r2
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	4b09      	ldr	r3, [pc, #36]	; (801401c <__assert_func+0x2c>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	4605      	mov	r5, r0
 8013ffc:	68d8      	ldr	r0, [r3, #12]
 8013ffe:	b14c      	cbz	r4, 8014014 <__assert_func+0x24>
 8014000:	4b07      	ldr	r3, [pc, #28]	; (8014020 <__assert_func+0x30>)
 8014002:	9100      	str	r1, [sp, #0]
 8014004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014008:	4906      	ldr	r1, [pc, #24]	; (8014024 <__assert_func+0x34>)
 801400a:	462b      	mov	r3, r5
 801400c:	f000 fc3e 	bl	801488c <fiprintf>
 8014010:	f000 fc4e 	bl	80148b0 <abort>
 8014014:	4b04      	ldr	r3, [pc, #16]	; (8014028 <__assert_func+0x38>)
 8014016:	461c      	mov	r4, r3
 8014018:	e7f3      	b.n	8014002 <__assert_func+0x12>
 801401a:	bf00      	nop
 801401c:	2000016c 	.word	0x2000016c
 8014020:	0801672d 	.word	0x0801672d
 8014024:	0801673a 	.word	0x0801673a
 8014028:	08016768 	.word	0x08016768

0801402c <_calloc_r>:
 801402c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801402e:	fba1 2402 	umull	r2, r4, r1, r2
 8014032:	b94c      	cbnz	r4, 8014048 <_calloc_r+0x1c>
 8014034:	4611      	mov	r1, r2
 8014036:	9201      	str	r2, [sp, #4]
 8014038:	f7fb fed0 	bl	800fddc <_malloc_r>
 801403c:	9a01      	ldr	r2, [sp, #4]
 801403e:	4605      	mov	r5, r0
 8014040:	b930      	cbnz	r0, 8014050 <_calloc_r+0x24>
 8014042:	4628      	mov	r0, r5
 8014044:	b003      	add	sp, #12
 8014046:	bd30      	pop	{r4, r5, pc}
 8014048:	220c      	movs	r2, #12
 801404a:	6002      	str	r2, [r0, #0]
 801404c:	2500      	movs	r5, #0
 801404e:	e7f8      	b.n	8014042 <_calloc_r+0x16>
 8014050:	4621      	mov	r1, r4
 8014052:	f7fc ff18 	bl	8010e86 <memset>
 8014056:	e7f4      	b.n	8014042 <_calloc_r+0x16>

08014058 <rshift>:
 8014058:	6903      	ldr	r3, [r0, #16]
 801405a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801405e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014062:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014066:	f100 0414 	add.w	r4, r0, #20
 801406a:	dd45      	ble.n	80140f8 <rshift+0xa0>
 801406c:	f011 011f 	ands.w	r1, r1, #31
 8014070:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014074:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014078:	d10c      	bne.n	8014094 <rshift+0x3c>
 801407a:	f100 0710 	add.w	r7, r0, #16
 801407e:	4629      	mov	r1, r5
 8014080:	42b1      	cmp	r1, r6
 8014082:	d334      	bcc.n	80140ee <rshift+0x96>
 8014084:	1a9b      	subs	r3, r3, r2
 8014086:	009b      	lsls	r3, r3, #2
 8014088:	1eea      	subs	r2, r5, #3
 801408a:	4296      	cmp	r6, r2
 801408c:	bf38      	it	cc
 801408e:	2300      	movcc	r3, #0
 8014090:	4423      	add	r3, r4
 8014092:	e015      	b.n	80140c0 <rshift+0x68>
 8014094:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014098:	f1c1 0820 	rsb	r8, r1, #32
 801409c:	40cf      	lsrs	r7, r1
 801409e:	f105 0e04 	add.w	lr, r5, #4
 80140a2:	46a1      	mov	r9, r4
 80140a4:	4576      	cmp	r6, lr
 80140a6:	46f4      	mov	ip, lr
 80140a8:	d815      	bhi.n	80140d6 <rshift+0x7e>
 80140aa:	1a9a      	subs	r2, r3, r2
 80140ac:	0092      	lsls	r2, r2, #2
 80140ae:	3a04      	subs	r2, #4
 80140b0:	3501      	adds	r5, #1
 80140b2:	42ae      	cmp	r6, r5
 80140b4:	bf38      	it	cc
 80140b6:	2200      	movcc	r2, #0
 80140b8:	18a3      	adds	r3, r4, r2
 80140ba:	50a7      	str	r7, [r4, r2]
 80140bc:	b107      	cbz	r7, 80140c0 <rshift+0x68>
 80140be:	3304      	adds	r3, #4
 80140c0:	1b1a      	subs	r2, r3, r4
 80140c2:	42a3      	cmp	r3, r4
 80140c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80140c8:	bf08      	it	eq
 80140ca:	2300      	moveq	r3, #0
 80140cc:	6102      	str	r2, [r0, #16]
 80140ce:	bf08      	it	eq
 80140d0:	6143      	streq	r3, [r0, #20]
 80140d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140d6:	f8dc c000 	ldr.w	ip, [ip]
 80140da:	fa0c fc08 	lsl.w	ip, ip, r8
 80140de:	ea4c 0707 	orr.w	r7, ip, r7
 80140e2:	f849 7b04 	str.w	r7, [r9], #4
 80140e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80140ea:	40cf      	lsrs	r7, r1
 80140ec:	e7da      	b.n	80140a4 <rshift+0x4c>
 80140ee:	f851 cb04 	ldr.w	ip, [r1], #4
 80140f2:	f847 cf04 	str.w	ip, [r7, #4]!
 80140f6:	e7c3      	b.n	8014080 <rshift+0x28>
 80140f8:	4623      	mov	r3, r4
 80140fa:	e7e1      	b.n	80140c0 <rshift+0x68>

080140fc <__hexdig_fun>:
 80140fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014100:	2b09      	cmp	r3, #9
 8014102:	d802      	bhi.n	801410a <__hexdig_fun+0xe>
 8014104:	3820      	subs	r0, #32
 8014106:	b2c0      	uxtb	r0, r0
 8014108:	4770      	bx	lr
 801410a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801410e:	2b05      	cmp	r3, #5
 8014110:	d801      	bhi.n	8014116 <__hexdig_fun+0x1a>
 8014112:	3847      	subs	r0, #71	; 0x47
 8014114:	e7f7      	b.n	8014106 <__hexdig_fun+0xa>
 8014116:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801411a:	2b05      	cmp	r3, #5
 801411c:	d801      	bhi.n	8014122 <__hexdig_fun+0x26>
 801411e:	3827      	subs	r0, #39	; 0x27
 8014120:	e7f1      	b.n	8014106 <__hexdig_fun+0xa>
 8014122:	2000      	movs	r0, #0
 8014124:	4770      	bx	lr
	...

08014128 <__gethex>:
 8014128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801412c:	4617      	mov	r7, r2
 801412e:	680a      	ldr	r2, [r1, #0]
 8014130:	b085      	sub	sp, #20
 8014132:	f102 0b02 	add.w	fp, r2, #2
 8014136:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801413a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801413e:	4681      	mov	r9, r0
 8014140:	468a      	mov	sl, r1
 8014142:	9302      	str	r3, [sp, #8]
 8014144:	32fe      	adds	r2, #254	; 0xfe
 8014146:	eb02 030b 	add.w	r3, r2, fp
 801414a:	46d8      	mov	r8, fp
 801414c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014150:	9301      	str	r3, [sp, #4]
 8014152:	2830      	cmp	r0, #48	; 0x30
 8014154:	d0f7      	beq.n	8014146 <__gethex+0x1e>
 8014156:	f7ff ffd1 	bl	80140fc <__hexdig_fun>
 801415a:	4604      	mov	r4, r0
 801415c:	2800      	cmp	r0, #0
 801415e:	d138      	bne.n	80141d2 <__gethex+0xaa>
 8014160:	49a7      	ldr	r1, [pc, #668]	; (8014400 <__gethex+0x2d8>)
 8014162:	2201      	movs	r2, #1
 8014164:	4640      	mov	r0, r8
 8014166:	f7ff ff18 	bl	8013f9a <strncmp>
 801416a:	4606      	mov	r6, r0
 801416c:	2800      	cmp	r0, #0
 801416e:	d169      	bne.n	8014244 <__gethex+0x11c>
 8014170:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014174:	465d      	mov	r5, fp
 8014176:	f7ff ffc1 	bl	80140fc <__hexdig_fun>
 801417a:	2800      	cmp	r0, #0
 801417c:	d064      	beq.n	8014248 <__gethex+0x120>
 801417e:	465a      	mov	r2, fp
 8014180:	7810      	ldrb	r0, [r2, #0]
 8014182:	2830      	cmp	r0, #48	; 0x30
 8014184:	4690      	mov	r8, r2
 8014186:	f102 0201 	add.w	r2, r2, #1
 801418a:	d0f9      	beq.n	8014180 <__gethex+0x58>
 801418c:	f7ff ffb6 	bl	80140fc <__hexdig_fun>
 8014190:	2301      	movs	r3, #1
 8014192:	fab0 f480 	clz	r4, r0
 8014196:	0964      	lsrs	r4, r4, #5
 8014198:	465e      	mov	r6, fp
 801419a:	9301      	str	r3, [sp, #4]
 801419c:	4642      	mov	r2, r8
 801419e:	4615      	mov	r5, r2
 80141a0:	3201      	adds	r2, #1
 80141a2:	7828      	ldrb	r0, [r5, #0]
 80141a4:	f7ff ffaa 	bl	80140fc <__hexdig_fun>
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d1f8      	bne.n	801419e <__gethex+0x76>
 80141ac:	4994      	ldr	r1, [pc, #592]	; (8014400 <__gethex+0x2d8>)
 80141ae:	2201      	movs	r2, #1
 80141b0:	4628      	mov	r0, r5
 80141b2:	f7ff fef2 	bl	8013f9a <strncmp>
 80141b6:	b978      	cbnz	r0, 80141d8 <__gethex+0xb0>
 80141b8:	b946      	cbnz	r6, 80141cc <__gethex+0xa4>
 80141ba:	1c6e      	adds	r6, r5, #1
 80141bc:	4632      	mov	r2, r6
 80141be:	4615      	mov	r5, r2
 80141c0:	3201      	adds	r2, #1
 80141c2:	7828      	ldrb	r0, [r5, #0]
 80141c4:	f7ff ff9a 	bl	80140fc <__hexdig_fun>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d1f8      	bne.n	80141be <__gethex+0x96>
 80141cc:	1b73      	subs	r3, r6, r5
 80141ce:	009e      	lsls	r6, r3, #2
 80141d0:	e004      	b.n	80141dc <__gethex+0xb4>
 80141d2:	2400      	movs	r4, #0
 80141d4:	4626      	mov	r6, r4
 80141d6:	e7e1      	b.n	801419c <__gethex+0x74>
 80141d8:	2e00      	cmp	r6, #0
 80141da:	d1f7      	bne.n	80141cc <__gethex+0xa4>
 80141dc:	782b      	ldrb	r3, [r5, #0]
 80141de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80141e2:	2b50      	cmp	r3, #80	; 0x50
 80141e4:	d13d      	bne.n	8014262 <__gethex+0x13a>
 80141e6:	786b      	ldrb	r3, [r5, #1]
 80141e8:	2b2b      	cmp	r3, #43	; 0x2b
 80141ea:	d02f      	beq.n	801424c <__gethex+0x124>
 80141ec:	2b2d      	cmp	r3, #45	; 0x2d
 80141ee:	d031      	beq.n	8014254 <__gethex+0x12c>
 80141f0:	1c69      	adds	r1, r5, #1
 80141f2:	f04f 0b00 	mov.w	fp, #0
 80141f6:	7808      	ldrb	r0, [r1, #0]
 80141f8:	f7ff ff80 	bl	80140fc <__hexdig_fun>
 80141fc:	1e42      	subs	r2, r0, #1
 80141fe:	b2d2      	uxtb	r2, r2
 8014200:	2a18      	cmp	r2, #24
 8014202:	d82e      	bhi.n	8014262 <__gethex+0x13a>
 8014204:	f1a0 0210 	sub.w	r2, r0, #16
 8014208:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801420c:	f7ff ff76 	bl	80140fc <__hexdig_fun>
 8014210:	f100 3cff 	add.w	ip, r0, #4294967295
 8014214:	fa5f fc8c 	uxtb.w	ip, ip
 8014218:	f1bc 0f18 	cmp.w	ip, #24
 801421c:	d91d      	bls.n	801425a <__gethex+0x132>
 801421e:	f1bb 0f00 	cmp.w	fp, #0
 8014222:	d000      	beq.n	8014226 <__gethex+0xfe>
 8014224:	4252      	negs	r2, r2
 8014226:	4416      	add	r6, r2
 8014228:	f8ca 1000 	str.w	r1, [sl]
 801422c:	b1dc      	cbz	r4, 8014266 <__gethex+0x13e>
 801422e:	9b01      	ldr	r3, [sp, #4]
 8014230:	2b00      	cmp	r3, #0
 8014232:	bf14      	ite	ne
 8014234:	f04f 0800 	movne.w	r8, #0
 8014238:	f04f 0806 	moveq.w	r8, #6
 801423c:	4640      	mov	r0, r8
 801423e:	b005      	add	sp, #20
 8014240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014244:	4645      	mov	r5, r8
 8014246:	4626      	mov	r6, r4
 8014248:	2401      	movs	r4, #1
 801424a:	e7c7      	b.n	80141dc <__gethex+0xb4>
 801424c:	f04f 0b00 	mov.w	fp, #0
 8014250:	1ca9      	adds	r1, r5, #2
 8014252:	e7d0      	b.n	80141f6 <__gethex+0xce>
 8014254:	f04f 0b01 	mov.w	fp, #1
 8014258:	e7fa      	b.n	8014250 <__gethex+0x128>
 801425a:	230a      	movs	r3, #10
 801425c:	fb03 0002 	mla	r0, r3, r2, r0
 8014260:	e7d0      	b.n	8014204 <__gethex+0xdc>
 8014262:	4629      	mov	r1, r5
 8014264:	e7e0      	b.n	8014228 <__gethex+0x100>
 8014266:	eba5 0308 	sub.w	r3, r5, r8
 801426a:	3b01      	subs	r3, #1
 801426c:	4621      	mov	r1, r4
 801426e:	2b07      	cmp	r3, #7
 8014270:	dc0a      	bgt.n	8014288 <__gethex+0x160>
 8014272:	4648      	mov	r0, r9
 8014274:	f7fd fd9a 	bl	8011dac <_Balloc>
 8014278:	4604      	mov	r4, r0
 801427a:	b940      	cbnz	r0, 801428e <__gethex+0x166>
 801427c:	4b61      	ldr	r3, [pc, #388]	; (8014404 <__gethex+0x2dc>)
 801427e:	4602      	mov	r2, r0
 8014280:	21e4      	movs	r1, #228	; 0xe4
 8014282:	4861      	ldr	r0, [pc, #388]	; (8014408 <__gethex+0x2e0>)
 8014284:	f7ff feb4 	bl	8013ff0 <__assert_func>
 8014288:	3101      	adds	r1, #1
 801428a:	105b      	asrs	r3, r3, #1
 801428c:	e7ef      	b.n	801426e <__gethex+0x146>
 801428e:	f100 0a14 	add.w	sl, r0, #20
 8014292:	2300      	movs	r3, #0
 8014294:	495a      	ldr	r1, [pc, #360]	; (8014400 <__gethex+0x2d8>)
 8014296:	f8cd a004 	str.w	sl, [sp, #4]
 801429a:	469b      	mov	fp, r3
 801429c:	45a8      	cmp	r8, r5
 801429e:	d342      	bcc.n	8014326 <__gethex+0x1fe>
 80142a0:	9801      	ldr	r0, [sp, #4]
 80142a2:	f840 bb04 	str.w	fp, [r0], #4
 80142a6:	eba0 000a 	sub.w	r0, r0, sl
 80142aa:	1080      	asrs	r0, r0, #2
 80142ac:	6120      	str	r0, [r4, #16]
 80142ae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80142b2:	4658      	mov	r0, fp
 80142b4:	f7fd fe6c 	bl	8011f90 <__hi0bits>
 80142b8:	683d      	ldr	r5, [r7, #0]
 80142ba:	eba8 0000 	sub.w	r0, r8, r0
 80142be:	42a8      	cmp	r0, r5
 80142c0:	dd59      	ble.n	8014376 <__gethex+0x24e>
 80142c2:	eba0 0805 	sub.w	r8, r0, r5
 80142c6:	4641      	mov	r1, r8
 80142c8:	4620      	mov	r0, r4
 80142ca:	f7fe f9fb 	bl	80126c4 <__any_on>
 80142ce:	4683      	mov	fp, r0
 80142d0:	b1b8      	cbz	r0, 8014302 <__gethex+0x1da>
 80142d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80142d6:	1159      	asrs	r1, r3, #5
 80142d8:	f003 021f 	and.w	r2, r3, #31
 80142dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80142e0:	f04f 0b01 	mov.w	fp, #1
 80142e4:	fa0b f202 	lsl.w	r2, fp, r2
 80142e8:	420a      	tst	r2, r1
 80142ea:	d00a      	beq.n	8014302 <__gethex+0x1da>
 80142ec:	455b      	cmp	r3, fp
 80142ee:	dd06      	ble.n	80142fe <__gethex+0x1d6>
 80142f0:	f1a8 0102 	sub.w	r1, r8, #2
 80142f4:	4620      	mov	r0, r4
 80142f6:	f7fe f9e5 	bl	80126c4 <__any_on>
 80142fa:	2800      	cmp	r0, #0
 80142fc:	d138      	bne.n	8014370 <__gethex+0x248>
 80142fe:	f04f 0b02 	mov.w	fp, #2
 8014302:	4641      	mov	r1, r8
 8014304:	4620      	mov	r0, r4
 8014306:	f7ff fea7 	bl	8014058 <rshift>
 801430a:	4446      	add	r6, r8
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	42b3      	cmp	r3, r6
 8014310:	da41      	bge.n	8014396 <__gethex+0x26e>
 8014312:	4621      	mov	r1, r4
 8014314:	4648      	mov	r0, r9
 8014316:	f7fd fd89 	bl	8011e2c <_Bfree>
 801431a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801431c:	2300      	movs	r3, #0
 801431e:	6013      	str	r3, [r2, #0]
 8014320:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014324:	e78a      	b.n	801423c <__gethex+0x114>
 8014326:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801432a:	2a2e      	cmp	r2, #46	; 0x2e
 801432c:	d014      	beq.n	8014358 <__gethex+0x230>
 801432e:	2b20      	cmp	r3, #32
 8014330:	d106      	bne.n	8014340 <__gethex+0x218>
 8014332:	9b01      	ldr	r3, [sp, #4]
 8014334:	f843 bb04 	str.w	fp, [r3], #4
 8014338:	f04f 0b00 	mov.w	fp, #0
 801433c:	9301      	str	r3, [sp, #4]
 801433e:	465b      	mov	r3, fp
 8014340:	7828      	ldrb	r0, [r5, #0]
 8014342:	9303      	str	r3, [sp, #12]
 8014344:	f7ff feda 	bl	80140fc <__hexdig_fun>
 8014348:	9b03      	ldr	r3, [sp, #12]
 801434a:	f000 000f 	and.w	r0, r0, #15
 801434e:	4098      	lsls	r0, r3
 8014350:	ea4b 0b00 	orr.w	fp, fp, r0
 8014354:	3304      	adds	r3, #4
 8014356:	e7a1      	b.n	801429c <__gethex+0x174>
 8014358:	45a8      	cmp	r8, r5
 801435a:	d8e8      	bhi.n	801432e <__gethex+0x206>
 801435c:	2201      	movs	r2, #1
 801435e:	4628      	mov	r0, r5
 8014360:	9303      	str	r3, [sp, #12]
 8014362:	f7ff fe1a 	bl	8013f9a <strncmp>
 8014366:	4926      	ldr	r1, [pc, #152]	; (8014400 <__gethex+0x2d8>)
 8014368:	9b03      	ldr	r3, [sp, #12]
 801436a:	2800      	cmp	r0, #0
 801436c:	d1df      	bne.n	801432e <__gethex+0x206>
 801436e:	e795      	b.n	801429c <__gethex+0x174>
 8014370:	f04f 0b03 	mov.w	fp, #3
 8014374:	e7c5      	b.n	8014302 <__gethex+0x1da>
 8014376:	da0b      	bge.n	8014390 <__gethex+0x268>
 8014378:	eba5 0800 	sub.w	r8, r5, r0
 801437c:	4621      	mov	r1, r4
 801437e:	4642      	mov	r2, r8
 8014380:	4648      	mov	r0, r9
 8014382:	f7fd ff6d 	bl	8012260 <__lshift>
 8014386:	eba6 0608 	sub.w	r6, r6, r8
 801438a:	4604      	mov	r4, r0
 801438c:	f100 0a14 	add.w	sl, r0, #20
 8014390:	f04f 0b00 	mov.w	fp, #0
 8014394:	e7ba      	b.n	801430c <__gethex+0x1e4>
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	42b3      	cmp	r3, r6
 801439a:	dd73      	ble.n	8014484 <__gethex+0x35c>
 801439c:	1b9e      	subs	r6, r3, r6
 801439e:	42b5      	cmp	r5, r6
 80143a0:	dc34      	bgt.n	801440c <__gethex+0x2e4>
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	2b02      	cmp	r3, #2
 80143a6:	d023      	beq.n	80143f0 <__gethex+0x2c8>
 80143a8:	2b03      	cmp	r3, #3
 80143aa:	d025      	beq.n	80143f8 <__gethex+0x2d0>
 80143ac:	2b01      	cmp	r3, #1
 80143ae:	d115      	bne.n	80143dc <__gethex+0x2b4>
 80143b0:	42b5      	cmp	r5, r6
 80143b2:	d113      	bne.n	80143dc <__gethex+0x2b4>
 80143b4:	2d01      	cmp	r5, #1
 80143b6:	d10b      	bne.n	80143d0 <__gethex+0x2a8>
 80143b8:	9a02      	ldr	r2, [sp, #8]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	6013      	str	r3, [r2, #0]
 80143be:	2301      	movs	r3, #1
 80143c0:	6123      	str	r3, [r4, #16]
 80143c2:	f8ca 3000 	str.w	r3, [sl]
 80143c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80143c8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80143cc:	601c      	str	r4, [r3, #0]
 80143ce:	e735      	b.n	801423c <__gethex+0x114>
 80143d0:	1e69      	subs	r1, r5, #1
 80143d2:	4620      	mov	r0, r4
 80143d4:	f7fe f976 	bl	80126c4 <__any_on>
 80143d8:	2800      	cmp	r0, #0
 80143da:	d1ed      	bne.n	80143b8 <__gethex+0x290>
 80143dc:	4621      	mov	r1, r4
 80143de:	4648      	mov	r0, r9
 80143e0:	f7fd fd24 	bl	8011e2c <_Bfree>
 80143e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80143e6:	2300      	movs	r3, #0
 80143e8:	6013      	str	r3, [r2, #0]
 80143ea:	f04f 0850 	mov.w	r8, #80	; 0x50
 80143ee:	e725      	b.n	801423c <__gethex+0x114>
 80143f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d1f2      	bne.n	80143dc <__gethex+0x2b4>
 80143f6:	e7df      	b.n	80143b8 <__gethex+0x290>
 80143f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d1dc      	bne.n	80143b8 <__gethex+0x290>
 80143fe:	e7ed      	b.n	80143dc <__gethex+0x2b4>
 8014400:	080165a4 	.word	0x080165a4
 8014404:	0801643b 	.word	0x0801643b
 8014408:	08016769 	.word	0x08016769
 801440c:	f106 38ff 	add.w	r8, r6, #4294967295
 8014410:	f1bb 0f00 	cmp.w	fp, #0
 8014414:	d133      	bne.n	801447e <__gethex+0x356>
 8014416:	f1b8 0f00 	cmp.w	r8, #0
 801441a:	d004      	beq.n	8014426 <__gethex+0x2fe>
 801441c:	4641      	mov	r1, r8
 801441e:	4620      	mov	r0, r4
 8014420:	f7fe f950 	bl	80126c4 <__any_on>
 8014424:	4683      	mov	fp, r0
 8014426:	ea4f 1268 	mov.w	r2, r8, asr #5
 801442a:	2301      	movs	r3, #1
 801442c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014430:	f008 081f 	and.w	r8, r8, #31
 8014434:	fa03 f308 	lsl.w	r3, r3, r8
 8014438:	4213      	tst	r3, r2
 801443a:	4631      	mov	r1, r6
 801443c:	4620      	mov	r0, r4
 801443e:	bf18      	it	ne
 8014440:	f04b 0b02 	orrne.w	fp, fp, #2
 8014444:	1bad      	subs	r5, r5, r6
 8014446:	f7ff fe07 	bl	8014058 <rshift>
 801444a:	687e      	ldr	r6, [r7, #4]
 801444c:	f04f 0802 	mov.w	r8, #2
 8014450:	f1bb 0f00 	cmp.w	fp, #0
 8014454:	d04a      	beq.n	80144ec <__gethex+0x3c4>
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	2b02      	cmp	r3, #2
 801445a:	d016      	beq.n	801448a <__gethex+0x362>
 801445c:	2b03      	cmp	r3, #3
 801445e:	d018      	beq.n	8014492 <__gethex+0x36a>
 8014460:	2b01      	cmp	r3, #1
 8014462:	d109      	bne.n	8014478 <__gethex+0x350>
 8014464:	f01b 0f02 	tst.w	fp, #2
 8014468:	d006      	beq.n	8014478 <__gethex+0x350>
 801446a:	f8da 3000 	ldr.w	r3, [sl]
 801446e:	ea4b 0b03 	orr.w	fp, fp, r3
 8014472:	f01b 0f01 	tst.w	fp, #1
 8014476:	d10f      	bne.n	8014498 <__gethex+0x370>
 8014478:	f048 0810 	orr.w	r8, r8, #16
 801447c:	e036      	b.n	80144ec <__gethex+0x3c4>
 801447e:	f04f 0b01 	mov.w	fp, #1
 8014482:	e7d0      	b.n	8014426 <__gethex+0x2fe>
 8014484:	f04f 0801 	mov.w	r8, #1
 8014488:	e7e2      	b.n	8014450 <__gethex+0x328>
 801448a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801448c:	f1c3 0301 	rsb	r3, r3, #1
 8014490:	930f      	str	r3, [sp, #60]	; 0x3c
 8014492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014494:	2b00      	cmp	r3, #0
 8014496:	d0ef      	beq.n	8014478 <__gethex+0x350>
 8014498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801449c:	f104 0214 	add.w	r2, r4, #20
 80144a0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80144a4:	9301      	str	r3, [sp, #4]
 80144a6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80144aa:	2300      	movs	r3, #0
 80144ac:	4694      	mov	ip, r2
 80144ae:	f852 1b04 	ldr.w	r1, [r2], #4
 80144b2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80144b6:	d01e      	beq.n	80144f6 <__gethex+0x3ce>
 80144b8:	3101      	adds	r1, #1
 80144ba:	f8cc 1000 	str.w	r1, [ip]
 80144be:	f1b8 0f02 	cmp.w	r8, #2
 80144c2:	f104 0214 	add.w	r2, r4, #20
 80144c6:	d13d      	bne.n	8014544 <__gethex+0x41c>
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	3b01      	subs	r3, #1
 80144cc:	42ab      	cmp	r3, r5
 80144ce:	d10b      	bne.n	80144e8 <__gethex+0x3c0>
 80144d0:	1169      	asrs	r1, r5, #5
 80144d2:	2301      	movs	r3, #1
 80144d4:	f005 051f 	and.w	r5, r5, #31
 80144d8:	fa03 f505 	lsl.w	r5, r3, r5
 80144dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80144e0:	421d      	tst	r5, r3
 80144e2:	bf18      	it	ne
 80144e4:	f04f 0801 	movne.w	r8, #1
 80144e8:	f048 0820 	orr.w	r8, r8, #32
 80144ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144ee:	601c      	str	r4, [r3, #0]
 80144f0:	9b02      	ldr	r3, [sp, #8]
 80144f2:	601e      	str	r6, [r3, #0]
 80144f4:	e6a2      	b.n	801423c <__gethex+0x114>
 80144f6:	4290      	cmp	r0, r2
 80144f8:	f842 3c04 	str.w	r3, [r2, #-4]
 80144fc:	d8d6      	bhi.n	80144ac <__gethex+0x384>
 80144fe:	68a2      	ldr	r2, [r4, #8]
 8014500:	4593      	cmp	fp, r2
 8014502:	db17      	blt.n	8014534 <__gethex+0x40c>
 8014504:	6861      	ldr	r1, [r4, #4]
 8014506:	4648      	mov	r0, r9
 8014508:	3101      	adds	r1, #1
 801450a:	f7fd fc4f 	bl	8011dac <_Balloc>
 801450e:	4682      	mov	sl, r0
 8014510:	b918      	cbnz	r0, 801451a <__gethex+0x3f2>
 8014512:	4b1b      	ldr	r3, [pc, #108]	; (8014580 <__gethex+0x458>)
 8014514:	4602      	mov	r2, r0
 8014516:	2184      	movs	r1, #132	; 0x84
 8014518:	e6b3      	b.n	8014282 <__gethex+0x15a>
 801451a:	6922      	ldr	r2, [r4, #16]
 801451c:	3202      	adds	r2, #2
 801451e:	f104 010c 	add.w	r1, r4, #12
 8014522:	0092      	lsls	r2, r2, #2
 8014524:	300c      	adds	r0, #12
 8014526:	f7ff fd4a 	bl	8013fbe <memcpy>
 801452a:	4621      	mov	r1, r4
 801452c:	4648      	mov	r0, r9
 801452e:	f7fd fc7d 	bl	8011e2c <_Bfree>
 8014532:	4654      	mov	r4, sl
 8014534:	6922      	ldr	r2, [r4, #16]
 8014536:	1c51      	adds	r1, r2, #1
 8014538:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801453c:	6121      	str	r1, [r4, #16]
 801453e:	2101      	movs	r1, #1
 8014540:	6151      	str	r1, [r2, #20]
 8014542:	e7bc      	b.n	80144be <__gethex+0x396>
 8014544:	6921      	ldr	r1, [r4, #16]
 8014546:	4559      	cmp	r1, fp
 8014548:	dd0b      	ble.n	8014562 <__gethex+0x43a>
 801454a:	2101      	movs	r1, #1
 801454c:	4620      	mov	r0, r4
 801454e:	f7ff fd83 	bl	8014058 <rshift>
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	3601      	adds	r6, #1
 8014556:	42b3      	cmp	r3, r6
 8014558:	f6ff aedb 	blt.w	8014312 <__gethex+0x1ea>
 801455c:	f04f 0801 	mov.w	r8, #1
 8014560:	e7c2      	b.n	80144e8 <__gethex+0x3c0>
 8014562:	f015 051f 	ands.w	r5, r5, #31
 8014566:	d0f9      	beq.n	801455c <__gethex+0x434>
 8014568:	9b01      	ldr	r3, [sp, #4]
 801456a:	441a      	add	r2, r3
 801456c:	f1c5 0520 	rsb	r5, r5, #32
 8014570:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014574:	f7fd fd0c 	bl	8011f90 <__hi0bits>
 8014578:	42a8      	cmp	r0, r5
 801457a:	dbe6      	blt.n	801454a <__gethex+0x422>
 801457c:	e7ee      	b.n	801455c <__gethex+0x434>
 801457e:	bf00      	nop
 8014580:	0801643b 	.word	0x0801643b

08014584 <L_shift>:
 8014584:	f1c2 0208 	rsb	r2, r2, #8
 8014588:	0092      	lsls	r2, r2, #2
 801458a:	b570      	push	{r4, r5, r6, lr}
 801458c:	f1c2 0620 	rsb	r6, r2, #32
 8014590:	6843      	ldr	r3, [r0, #4]
 8014592:	6804      	ldr	r4, [r0, #0]
 8014594:	fa03 f506 	lsl.w	r5, r3, r6
 8014598:	432c      	orrs	r4, r5
 801459a:	40d3      	lsrs	r3, r2
 801459c:	6004      	str	r4, [r0, #0]
 801459e:	f840 3f04 	str.w	r3, [r0, #4]!
 80145a2:	4288      	cmp	r0, r1
 80145a4:	d3f4      	bcc.n	8014590 <L_shift+0xc>
 80145a6:	bd70      	pop	{r4, r5, r6, pc}

080145a8 <__match>:
 80145a8:	b530      	push	{r4, r5, lr}
 80145aa:	6803      	ldr	r3, [r0, #0]
 80145ac:	3301      	adds	r3, #1
 80145ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145b2:	b914      	cbnz	r4, 80145ba <__match+0x12>
 80145b4:	6003      	str	r3, [r0, #0]
 80145b6:	2001      	movs	r0, #1
 80145b8:	bd30      	pop	{r4, r5, pc}
 80145ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80145c2:	2d19      	cmp	r5, #25
 80145c4:	bf98      	it	ls
 80145c6:	3220      	addls	r2, #32
 80145c8:	42a2      	cmp	r2, r4
 80145ca:	d0f0      	beq.n	80145ae <__match+0x6>
 80145cc:	2000      	movs	r0, #0
 80145ce:	e7f3      	b.n	80145b8 <__match+0x10>

080145d0 <__hexnan>:
 80145d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d4:	680b      	ldr	r3, [r1, #0]
 80145d6:	6801      	ldr	r1, [r0, #0]
 80145d8:	115e      	asrs	r6, r3, #5
 80145da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80145de:	f013 031f 	ands.w	r3, r3, #31
 80145e2:	b087      	sub	sp, #28
 80145e4:	bf18      	it	ne
 80145e6:	3604      	addne	r6, #4
 80145e8:	2500      	movs	r5, #0
 80145ea:	1f37      	subs	r7, r6, #4
 80145ec:	4682      	mov	sl, r0
 80145ee:	4690      	mov	r8, r2
 80145f0:	9301      	str	r3, [sp, #4]
 80145f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80145f6:	46b9      	mov	r9, r7
 80145f8:	463c      	mov	r4, r7
 80145fa:	9502      	str	r5, [sp, #8]
 80145fc:	46ab      	mov	fp, r5
 80145fe:	784a      	ldrb	r2, [r1, #1]
 8014600:	1c4b      	adds	r3, r1, #1
 8014602:	9303      	str	r3, [sp, #12]
 8014604:	b342      	cbz	r2, 8014658 <__hexnan+0x88>
 8014606:	4610      	mov	r0, r2
 8014608:	9105      	str	r1, [sp, #20]
 801460a:	9204      	str	r2, [sp, #16]
 801460c:	f7ff fd76 	bl	80140fc <__hexdig_fun>
 8014610:	2800      	cmp	r0, #0
 8014612:	d14f      	bne.n	80146b4 <__hexnan+0xe4>
 8014614:	9a04      	ldr	r2, [sp, #16]
 8014616:	9905      	ldr	r1, [sp, #20]
 8014618:	2a20      	cmp	r2, #32
 801461a:	d818      	bhi.n	801464e <__hexnan+0x7e>
 801461c:	9b02      	ldr	r3, [sp, #8]
 801461e:	459b      	cmp	fp, r3
 8014620:	dd13      	ble.n	801464a <__hexnan+0x7a>
 8014622:	454c      	cmp	r4, r9
 8014624:	d206      	bcs.n	8014634 <__hexnan+0x64>
 8014626:	2d07      	cmp	r5, #7
 8014628:	dc04      	bgt.n	8014634 <__hexnan+0x64>
 801462a:	462a      	mov	r2, r5
 801462c:	4649      	mov	r1, r9
 801462e:	4620      	mov	r0, r4
 8014630:	f7ff ffa8 	bl	8014584 <L_shift>
 8014634:	4544      	cmp	r4, r8
 8014636:	d950      	bls.n	80146da <__hexnan+0x10a>
 8014638:	2300      	movs	r3, #0
 801463a:	f1a4 0904 	sub.w	r9, r4, #4
 801463e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014642:	f8cd b008 	str.w	fp, [sp, #8]
 8014646:	464c      	mov	r4, r9
 8014648:	461d      	mov	r5, r3
 801464a:	9903      	ldr	r1, [sp, #12]
 801464c:	e7d7      	b.n	80145fe <__hexnan+0x2e>
 801464e:	2a29      	cmp	r2, #41	; 0x29
 8014650:	d155      	bne.n	80146fe <__hexnan+0x12e>
 8014652:	3102      	adds	r1, #2
 8014654:	f8ca 1000 	str.w	r1, [sl]
 8014658:	f1bb 0f00 	cmp.w	fp, #0
 801465c:	d04f      	beq.n	80146fe <__hexnan+0x12e>
 801465e:	454c      	cmp	r4, r9
 8014660:	d206      	bcs.n	8014670 <__hexnan+0xa0>
 8014662:	2d07      	cmp	r5, #7
 8014664:	dc04      	bgt.n	8014670 <__hexnan+0xa0>
 8014666:	462a      	mov	r2, r5
 8014668:	4649      	mov	r1, r9
 801466a:	4620      	mov	r0, r4
 801466c:	f7ff ff8a 	bl	8014584 <L_shift>
 8014670:	4544      	cmp	r4, r8
 8014672:	d934      	bls.n	80146de <__hexnan+0x10e>
 8014674:	f1a8 0204 	sub.w	r2, r8, #4
 8014678:	4623      	mov	r3, r4
 801467a:	f853 1b04 	ldr.w	r1, [r3], #4
 801467e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014682:	429f      	cmp	r7, r3
 8014684:	d2f9      	bcs.n	801467a <__hexnan+0xaa>
 8014686:	1b3b      	subs	r3, r7, r4
 8014688:	f023 0303 	bic.w	r3, r3, #3
 801468c:	3304      	adds	r3, #4
 801468e:	3e03      	subs	r6, #3
 8014690:	3401      	adds	r4, #1
 8014692:	42a6      	cmp	r6, r4
 8014694:	bf38      	it	cc
 8014696:	2304      	movcc	r3, #4
 8014698:	4443      	add	r3, r8
 801469a:	2200      	movs	r2, #0
 801469c:	f843 2b04 	str.w	r2, [r3], #4
 80146a0:	429f      	cmp	r7, r3
 80146a2:	d2fb      	bcs.n	801469c <__hexnan+0xcc>
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	b91b      	cbnz	r3, 80146b0 <__hexnan+0xe0>
 80146a8:	4547      	cmp	r7, r8
 80146aa:	d126      	bne.n	80146fa <__hexnan+0x12a>
 80146ac:	2301      	movs	r3, #1
 80146ae:	603b      	str	r3, [r7, #0]
 80146b0:	2005      	movs	r0, #5
 80146b2:	e025      	b.n	8014700 <__hexnan+0x130>
 80146b4:	3501      	adds	r5, #1
 80146b6:	2d08      	cmp	r5, #8
 80146b8:	f10b 0b01 	add.w	fp, fp, #1
 80146bc:	dd06      	ble.n	80146cc <__hexnan+0xfc>
 80146be:	4544      	cmp	r4, r8
 80146c0:	d9c3      	bls.n	801464a <__hexnan+0x7a>
 80146c2:	2300      	movs	r3, #0
 80146c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80146c8:	2501      	movs	r5, #1
 80146ca:	3c04      	subs	r4, #4
 80146cc:	6822      	ldr	r2, [r4, #0]
 80146ce:	f000 000f 	and.w	r0, r0, #15
 80146d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80146d6:	6020      	str	r0, [r4, #0]
 80146d8:	e7b7      	b.n	801464a <__hexnan+0x7a>
 80146da:	2508      	movs	r5, #8
 80146dc:	e7b5      	b.n	801464a <__hexnan+0x7a>
 80146de:	9b01      	ldr	r3, [sp, #4]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d0df      	beq.n	80146a4 <__hexnan+0xd4>
 80146e4:	f1c3 0320 	rsb	r3, r3, #32
 80146e8:	f04f 32ff 	mov.w	r2, #4294967295
 80146ec:	40da      	lsrs	r2, r3
 80146ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80146f2:	4013      	ands	r3, r2
 80146f4:	f846 3c04 	str.w	r3, [r6, #-4]
 80146f8:	e7d4      	b.n	80146a4 <__hexnan+0xd4>
 80146fa:	3f04      	subs	r7, #4
 80146fc:	e7d2      	b.n	80146a4 <__hexnan+0xd4>
 80146fe:	2004      	movs	r0, #4
 8014700:	b007      	add	sp, #28
 8014702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014706 <__ascii_mbtowc>:
 8014706:	b082      	sub	sp, #8
 8014708:	b901      	cbnz	r1, 801470c <__ascii_mbtowc+0x6>
 801470a:	a901      	add	r1, sp, #4
 801470c:	b142      	cbz	r2, 8014720 <__ascii_mbtowc+0x1a>
 801470e:	b14b      	cbz	r3, 8014724 <__ascii_mbtowc+0x1e>
 8014710:	7813      	ldrb	r3, [r2, #0]
 8014712:	600b      	str	r3, [r1, #0]
 8014714:	7812      	ldrb	r2, [r2, #0]
 8014716:	1e10      	subs	r0, r2, #0
 8014718:	bf18      	it	ne
 801471a:	2001      	movne	r0, #1
 801471c:	b002      	add	sp, #8
 801471e:	4770      	bx	lr
 8014720:	4610      	mov	r0, r2
 8014722:	e7fb      	b.n	801471c <__ascii_mbtowc+0x16>
 8014724:	f06f 0001 	mvn.w	r0, #1
 8014728:	e7f8      	b.n	801471c <__ascii_mbtowc+0x16>

0801472a <_realloc_r>:
 801472a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801472e:	4680      	mov	r8, r0
 8014730:	4614      	mov	r4, r2
 8014732:	460e      	mov	r6, r1
 8014734:	b921      	cbnz	r1, 8014740 <_realloc_r+0x16>
 8014736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801473a:	4611      	mov	r1, r2
 801473c:	f7fb bb4e 	b.w	800fddc <_malloc_r>
 8014740:	b92a      	cbnz	r2, 801474e <_realloc_r+0x24>
 8014742:	f7fd fae7 	bl	8011d14 <_free_r>
 8014746:	4625      	mov	r5, r4
 8014748:	4628      	mov	r0, r5
 801474a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801474e:	f000 f8b6 	bl	80148be <_malloc_usable_size_r>
 8014752:	4284      	cmp	r4, r0
 8014754:	4607      	mov	r7, r0
 8014756:	d802      	bhi.n	801475e <_realloc_r+0x34>
 8014758:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801475c:	d812      	bhi.n	8014784 <_realloc_r+0x5a>
 801475e:	4621      	mov	r1, r4
 8014760:	4640      	mov	r0, r8
 8014762:	f7fb fb3b 	bl	800fddc <_malloc_r>
 8014766:	4605      	mov	r5, r0
 8014768:	2800      	cmp	r0, #0
 801476a:	d0ed      	beq.n	8014748 <_realloc_r+0x1e>
 801476c:	42bc      	cmp	r4, r7
 801476e:	4622      	mov	r2, r4
 8014770:	4631      	mov	r1, r6
 8014772:	bf28      	it	cs
 8014774:	463a      	movcs	r2, r7
 8014776:	f7ff fc22 	bl	8013fbe <memcpy>
 801477a:	4631      	mov	r1, r6
 801477c:	4640      	mov	r0, r8
 801477e:	f7fd fac9 	bl	8011d14 <_free_r>
 8014782:	e7e1      	b.n	8014748 <_realloc_r+0x1e>
 8014784:	4635      	mov	r5, r6
 8014786:	e7df      	b.n	8014748 <_realloc_r+0x1e>

08014788 <_strtoul_l.constprop.0>:
 8014788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801478c:	4f36      	ldr	r7, [pc, #216]	; (8014868 <_strtoul_l.constprop.0+0xe0>)
 801478e:	4686      	mov	lr, r0
 8014790:	460d      	mov	r5, r1
 8014792:	4628      	mov	r0, r5
 8014794:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014798:	5d3e      	ldrb	r6, [r7, r4]
 801479a:	f016 0608 	ands.w	r6, r6, #8
 801479e:	d1f8      	bne.n	8014792 <_strtoul_l.constprop.0+0xa>
 80147a0:	2c2d      	cmp	r4, #45	; 0x2d
 80147a2:	d130      	bne.n	8014806 <_strtoul_l.constprop.0+0x7e>
 80147a4:	782c      	ldrb	r4, [r5, #0]
 80147a6:	2601      	movs	r6, #1
 80147a8:	1c85      	adds	r5, r0, #2
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d057      	beq.n	801485e <_strtoul_l.constprop.0+0xd6>
 80147ae:	2b10      	cmp	r3, #16
 80147b0:	d109      	bne.n	80147c6 <_strtoul_l.constprop.0+0x3e>
 80147b2:	2c30      	cmp	r4, #48	; 0x30
 80147b4:	d107      	bne.n	80147c6 <_strtoul_l.constprop.0+0x3e>
 80147b6:	7828      	ldrb	r0, [r5, #0]
 80147b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80147bc:	2858      	cmp	r0, #88	; 0x58
 80147be:	d149      	bne.n	8014854 <_strtoul_l.constprop.0+0xcc>
 80147c0:	786c      	ldrb	r4, [r5, #1]
 80147c2:	2310      	movs	r3, #16
 80147c4:	3502      	adds	r5, #2
 80147c6:	f04f 38ff 	mov.w	r8, #4294967295
 80147ca:	2700      	movs	r7, #0
 80147cc:	fbb8 f8f3 	udiv	r8, r8, r3
 80147d0:	fb03 f908 	mul.w	r9, r3, r8
 80147d4:	ea6f 0909 	mvn.w	r9, r9
 80147d8:	4638      	mov	r0, r7
 80147da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80147de:	f1bc 0f09 	cmp.w	ip, #9
 80147e2:	d815      	bhi.n	8014810 <_strtoul_l.constprop.0+0x88>
 80147e4:	4664      	mov	r4, ip
 80147e6:	42a3      	cmp	r3, r4
 80147e8:	dd23      	ble.n	8014832 <_strtoul_l.constprop.0+0xaa>
 80147ea:	f1b7 3fff 	cmp.w	r7, #4294967295
 80147ee:	d007      	beq.n	8014800 <_strtoul_l.constprop.0+0x78>
 80147f0:	4580      	cmp	r8, r0
 80147f2:	d31b      	bcc.n	801482c <_strtoul_l.constprop.0+0xa4>
 80147f4:	d101      	bne.n	80147fa <_strtoul_l.constprop.0+0x72>
 80147f6:	45a1      	cmp	r9, r4
 80147f8:	db18      	blt.n	801482c <_strtoul_l.constprop.0+0xa4>
 80147fa:	fb00 4003 	mla	r0, r0, r3, r4
 80147fe:	2701      	movs	r7, #1
 8014800:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014804:	e7e9      	b.n	80147da <_strtoul_l.constprop.0+0x52>
 8014806:	2c2b      	cmp	r4, #43	; 0x2b
 8014808:	bf04      	itt	eq
 801480a:	782c      	ldrbeq	r4, [r5, #0]
 801480c:	1c85      	addeq	r5, r0, #2
 801480e:	e7cc      	b.n	80147aa <_strtoul_l.constprop.0+0x22>
 8014810:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014814:	f1bc 0f19 	cmp.w	ip, #25
 8014818:	d801      	bhi.n	801481e <_strtoul_l.constprop.0+0x96>
 801481a:	3c37      	subs	r4, #55	; 0x37
 801481c:	e7e3      	b.n	80147e6 <_strtoul_l.constprop.0+0x5e>
 801481e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014822:	f1bc 0f19 	cmp.w	ip, #25
 8014826:	d804      	bhi.n	8014832 <_strtoul_l.constprop.0+0xaa>
 8014828:	3c57      	subs	r4, #87	; 0x57
 801482a:	e7dc      	b.n	80147e6 <_strtoul_l.constprop.0+0x5e>
 801482c:	f04f 37ff 	mov.w	r7, #4294967295
 8014830:	e7e6      	b.n	8014800 <_strtoul_l.constprop.0+0x78>
 8014832:	1c7b      	adds	r3, r7, #1
 8014834:	d106      	bne.n	8014844 <_strtoul_l.constprop.0+0xbc>
 8014836:	2322      	movs	r3, #34	; 0x22
 8014838:	f8ce 3000 	str.w	r3, [lr]
 801483c:	4638      	mov	r0, r7
 801483e:	b932      	cbnz	r2, 801484e <_strtoul_l.constprop.0+0xc6>
 8014840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014844:	b106      	cbz	r6, 8014848 <_strtoul_l.constprop.0+0xc0>
 8014846:	4240      	negs	r0, r0
 8014848:	2a00      	cmp	r2, #0
 801484a:	d0f9      	beq.n	8014840 <_strtoul_l.constprop.0+0xb8>
 801484c:	b107      	cbz	r7, 8014850 <_strtoul_l.constprop.0+0xc8>
 801484e:	1e69      	subs	r1, r5, #1
 8014850:	6011      	str	r1, [r2, #0]
 8014852:	e7f5      	b.n	8014840 <_strtoul_l.constprop.0+0xb8>
 8014854:	2430      	movs	r4, #48	; 0x30
 8014856:	2b00      	cmp	r3, #0
 8014858:	d1b5      	bne.n	80147c6 <_strtoul_l.constprop.0+0x3e>
 801485a:	2308      	movs	r3, #8
 801485c:	e7b3      	b.n	80147c6 <_strtoul_l.constprop.0+0x3e>
 801485e:	2c30      	cmp	r4, #48	; 0x30
 8014860:	d0a9      	beq.n	80147b6 <_strtoul_l.constprop.0+0x2e>
 8014862:	230a      	movs	r3, #10
 8014864:	e7af      	b.n	80147c6 <_strtoul_l.constprop.0+0x3e>
 8014866:	bf00      	nop
 8014868:	080165f9 	.word	0x080165f9

0801486c <_strtoul_r>:
 801486c:	f7ff bf8c 	b.w	8014788 <_strtoul_l.constprop.0>

08014870 <__ascii_wctomb>:
 8014870:	b149      	cbz	r1, 8014886 <__ascii_wctomb+0x16>
 8014872:	2aff      	cmp	r2, #255	; 0xff
 8014874:	bf85      	ittet	hi
 8014876:	238a      	movhi	r3, #138	; 0x8a
 8014878:	6003      	strhi	r3, [r0, #0]
 801487a:	700a      	strbls	r2, [r1, #0]
 801487c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014880:	bf98      	it	ls
 8014882:	2001      	movls	r0, #1
 8014884:	4770      	bx	lr
 8014886:	4608      	mov	r0, r1
 8014888:	4770      	bx	lr
	...

0801488c <fiprintf>:
 801488c:	b40e      	push	{r1, r2, r3}
 801488e:	b503      	push	{r0, r1, lr}
 8014890:	4601      	mov	r1, r0
 8014892:	ab03      	add	r3, sp, #12
 8014894:	4805      	ldr	r0, [pc, #20]	; (80148ac <fiprintf+0x20>)
 8014896:	f853 2b04 	ldr.w	r2, [r3], #4
 801489a:	6800      	ldr	r0, [r0, #0]
 801489c:	9301      	str	r3, [sp, #4]
 801489e:	f000 f83f 	bl	8014920 <_vfiprintf_r>
 80148a2:	b002      	add	sp, #8
 80148a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80148a8:	b003      	add	sp, #12
 80148aa:	4770      	bx	lr
 80148ac:	2000016c 	.word	0x2000016c

080148b0 <abort>:
 80148b0:	b508      	push	{r3, lr}
 80148b2:	2006      	movs	r0, #6
 80148b4:	f000 fa0c 	bl	8014cd0 <raise>
 80148b8:	2001      	movs	r0, #1
 80148ba:	f7ee ff2b 	bl	8003714 <_exit>

080148be <_malloc_usable_size_r>:
 80148be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148c2:	1f18      	subs	r0, r3, #4
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	bfbc      	itt	lt
 80148c8:	580b      	ldrlt	r3, [r1, r0]
 80148ca:	18c0      	addlt	r0, r0, r3
 80148cc:	4770      	bx	lr

080148ce <__sfputc_r>:
 80148ce:	6893      	ldr	r3, [r2, #8]
 80148d0:	3b01      	subs	r3, #1
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	b410      	push	{r4}
 80148d6:	6093      	str	r3, [r2, #8]
 80148d8:	da08      	bge.n	80148ec <__sfputc_r+0x1e>
 80148da:	6994      	ldr	r4, [r2, #24]
 80148dc:	42a3      	cmp	r3, r4
 80148de:	db01      	blt.n	80148e4 <__sfputc_r+0x16>
 80148e0:	290a      	cmp	r1, #10
 80148e2:	d103      	bne.n	80148ec <__sfputc_r+0x1e>
 80148e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148e8:	f000 b934 	b.w	8014b54 <__swbuf_r>
 80148ec:	6813      	ldr	r3, [r2, #0]
 80148ee:	1c58      	adds	r0, r3, #1
 80148f0:	6010      	str	r0, [r2, #0]
 80148f2:	7019      	strb	r1, [r3, #0]
 80148f4:	4608      	mov	r0, r1
 80148f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148fa:	4770      	bx	lr

080148fc <__sfputs_r>:
 80148fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148fe:	4606      	mov	r6, r0
 8014900:	460f      	mov	r7, r1
 8014902:	4614      	mov	r4, r2
 8014904:	18d5      	adds	r5, r2, r3
 8014906:	42ac      	cmp	r4, r5
 8014908:	d101      	bne.n	801490e <__sfputs_r+0x12>
 801490a:	2000      	movs	r0, #0
 801490c:	e007      	b.n	801491e <__sfputs_r+0x22>
 801490e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014912:	463a      	mov	r2, r7
 8014914:	4630      	mov	r0, r6
 8014916:	f7ff ffda 	bl	80148ce <__sfputc_r>
 801491a:	1c43      	adds	r3, r0, #1
 801491c:	d1f3      	bne.n	8014906 <__sfputs_r+0xa>
 801491e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014920 <_vfiprintf_r>:
 8014920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014924:	460d      	mov	r5, r1
 8014926:	b09d      	sub	sp, #116	; 0x74
 8014928:	4614      	mov	r4, r2
 801492a:	4698      	mov	r8, r3
 801492c:	4606      	mov	r6, r0
 801492e:	b118      	cbz	r0, 8014938 <_vfiprintf_r+0x18>
 8014930:	6a03      	ldr	r3, [r0, #32]
 8014932:	b90b      	cbnz	r3, 8014938 <_vfiprintf_r+0x18>
 8014934:	f7fc f9e0 	bl	8010cf8 <__sinit>
 8014938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801493a:	07d9      	lsls	r1, r3, #31
 801493c:	d405      	bmi.n	801494a <_vfiprintf_r+0x2a>
 801493e:	89ab      	ldrh	r3, [r5, #12]
 8014940:	059a      	lsls	r2, r3, #22
 8014942:	d402      	bmi.n	801494a <_vfiprintf_r+0x2a>
 8014944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014946:	f7fc fb62 	bl	801100e <__retarget_lock_acquire_recursive>
 801494a:	89ab      	ldrh	r3, [r5, #12]
 801494c:	071b      	lsls	r3, r3, #28
 801494e:	d501      	bpl.n	8014954 <_vfiprintf_r+0x34>
 8014950:	692b      	ldr	r3, [r5, #16]
 8014952:	b99b      	cbnz	r3, 801497c <_vfiprintf_r+0x5c>
 8014954:	4629      	mov	r1, r5
 8014956:	4630      	mov	r0, r6
 8014958:	f000 f93a 	bl	8014bd0 <__swsetup_r>
 801495c:	b170      	cbz	r0, 801497c <_vfiprintf_r+0x5c>
 801495e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014960:	07dc      	lsls	r4, r3, #31
 8014962:	d504      	bpl.n	801496e <_vfiprintf_r+0x4e>
 8014964:	f04f 30ff 	mov.w	r0, #4294967295
 8014968:	b01d      	add	sp, #116	; 0x74
 801496a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801496e:	89ab      	ldrh	r3, [r5, #12]
 8014970:	0598      	lsls	r0, r3, #22
 8014972:	d4f7      	bmi.n	8014964 <_vfiprintf_r+0x44>
 8014974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014976:	f7fc fb4b 	bl	8011010 <__retarget_lock_release_recursive>
 801497a:	e7f3      	b.n	8014964 <_vfiprintf_r+0x44>
 801497c:	2300      	movs	r3, #0
 801497e:	9309      	str	r3, [sp, #36]	; 0x24
 8014980:	2320      	movs	r3, #32
 8014982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014986:	f8cd 800c 	str.w	r8, [sp, #12]
 801498a:	2330      	movs	r3, #48	; 0x30
 801498c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014b40 <_vfiprintf_r+0x220>
 8014990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014994:	f04f 0901 	mov.w	r9, #1
 8014998:	4623      	mov	r3, r4
 801499a:	469a      	mov	sl, r3
 801499c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149a0:	b10a      	cbz	r2, 80149a6 <_vfiprintf_r+0x86>
 80149a2:	2a25      	cmp	r2, #37	; 0x25
 80149a4:	d1f9      	bne.n	801499a <_vfiprintf_r+0x7a>
 80149a6:	ebba 0b04 	subs.w	fp, sl, r4
 80149aa:	d00b      	beq.n	80149c4 <_vfiprintf_r+0xa4>
 80149ac:	465b      	mov	r3, fp
 80149ae:	4622      	mov	r2, r4
 80149b0:	4629      	mov	r1, r5
 80149b2:	4630      	mov	r0, r6
 80149b4:	f7ff ffa2 	bl	80148fc <__sfputs_r>
 80149b8:	3001      	adds	r0, #1
 80149ba:	f000 80a9 	beq.w	8014b10 <_vfiprintf_r+0x1f0>
 80149be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149c0:	445a      	add	r2, fp
 80149c2:	9209      	str	r2, [sp, #36]	; 0x24
 80149c4:	f89a 3000 	ldrb.w	r3, [sl]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	f000 80a1 	beq.w	8014b10 <_vfiprintf_r+0x1f0>
 80149ce:	2300      	movs	r3, #0
 80149d0:	f04f 32ff 	mov.w	r2, #4294967295
 80149d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149d8:	f10a 0a01 	add.w	sl, sl, #1
 80149dc:	9304      	str	r3, [sp, #16]
 80149de:	9307      	str	r3, [sp, #28]
 80149e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149e4:	931a      	str	r3, [sp, #104]	; 0x68
 80149e6:	4654      	mov	r4, sl
 80149e8:	2205      	movs	r2, #5
 80149ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149ee:	4854      	ldr	r0, [pc, #336]	; (8014b40 <_vfiprintf_r+0x220>)
 80149f0:	f7eb fbf6 	bl	80001e0 <memchr>
 80149f4:	9a04      	ldr	r2, [sp, #16]
 80149f6:	b9d8      	cbnz	r0, 8014a30 <_vfiprintf_r+0x110>
 80149f8:	06d1      	lsls	r1, r2, #27
 80149fa:	bf44      	itt	mi
 80149fc:	2320      	movmi	r3, #32
 80149fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a02:	0713      	lsls	r3, r2, #28
 8014a04:	bf44      	itt	mi
 8014a06:	232b      	movmi	r3, #43	; 0x2b
 8014a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8014a10:	2b2a      	cmp	r3, #42	; 0x2a
 8014a12:	d015      	beq.n	8014a40 <_vfiprintf_r+0x120>
 8014a14:	9a07      	ldr	r2, [sp, #28]
 8014a16:	4654      	mov	r4, sl
 8014a18:	2000      	movs	r0, #0
 8014a1a:	f04f 0c0a 	mov.w	ip, #10
 8014a1e:	4621      	mov	r1, r4
 8014a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a24:	3b30      	subs	r3, #48	; 0x30
 8014a26:	2b09      	cmp	r3, #9
 8014a28:	d94d      	bls.n	8014ac6 <_vfiprintf_r+0x1a6>
 8014a2a:	b1b0      	cbz	r0, 8014a5a <_vfiprintf_r+0x13a>
 8014a2c:	9207      	str	r2, [sp, #28]
 8014a2e:	e014      	b.n	8014a5a <_vfiprintf_r+0x13a>
 8014a30:	eba0 0308 	sub.w	r3, r0, r8
 8014a34:	fa09 f303 	lsl.w	r3, r9, r3
 8014a38:	4313      	orrs	r3, r2
 8014a3a:	9304      	str	r3, [sp, #16]
 8014a3c:	46a2      	mov	sl, r4
 8014a3e:	e7d2      	b.n	80149e6 <_vfiprintf_r+0xc6>
 8014a40:	9b03      	ldr	r3, [sp, #12]
 8014a42:	1d19      	adds	r1, r3, #4
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	9103      	str	r1, [sp, #12]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	bfbb      	ittet	lt
 8014a4c:	425b      	neglt	r3, r3
 8014a4e:	f042 0202 	orrlt.w	r2, r2, #2
 8014a52:	9307      	strge	r3, [sp, #28]
 8014a54:	9307      	strlt	r3, [sp, #28]
 8014a56:	bfb8      	it	lt
 8014a58:	9204      	strlt	r2, [sp, #16]
 8014a5a:	7823      	ldrb	r3, [r4, #0]
 8014a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8014a5e:	d10c      	bne.n	8014a7a <_vfiprintf_r+0x15a>
 8014a60:	7863      	ldrb	r3, [r4, #1]
 8014a62:	2b2a      	cmp	r3, #42	; 0x2a
 8014a64:	d134      	bne.n	8014ad0 <_vfiprintf_r+0x1b0>
 8014a66:	9b03      	ldr	r3, [sp, #12]
 8014a68:	1d1a      	adds	r2, r3, #4
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	9203      	str	r2, [sp, #12]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	bfb8      	it	lt
 8014a72:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a76:	3402      	adds	r4, #2
 8014a78:	9305      	str	r3, [sp, #20]
 8014a7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014b50 <_vfiprintf_r+0x230>
 8014a7e:	7821      	ldrb	r1, [r4, #0]
 8014a80:	2203      	movs	r2, #3
 8014a82:	4650      	mov	r0, sl
 8014a84:	f7eb fbac 	bl	80001e0 <memchr>
 8014a88:	b138      	cbz	r0, 8014a9a <_vfiprintf_r+0x17a>
 8014a8a:	9b04      	ldr	r3, [sp, #16]
 8014a8c:	eba0 000a 	sub.w	r0, r0, sl
 8014a90:	2240      	movs	r2, #64	; 0x40
 8014a92:	4082      	lsls	r2, r0
 8014a94:	4313      	orrs	r3, r2
 8014a96:	3401      	adds	r4, #1
 8014a98:	9304      	str	r3, [sp, #16]
 8014a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a9e:	4829      	ldr	r0, [pc, #164]	; (8014b44 <_vfiprintf_r+0x224>)
 8014aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014aa4:	2206      	movs	r2, #6
 8014aa6:	f7eb fb9b 	bl	80001e0 <memchr>
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d03f      	beq.n	8014b2e <_vfiprintf_r+0x20e>
 8014aae:	4b26      	ldr	r3, [pc, #152]	; (8014b48 <_vfiprintf_r+0x228>)
 8014ab0:	bb1b      	cbnz	r3, 8014afa <_vfiprintf_r+0x1da>
 8014ab2:	9b03      	ldr	r3, [sp, #12]
 8014ab4:	3307      	adds	r3, #7
 8014ab6:	f023 0307 	bic.w	r3, r3, #7
 8014aba:	3308      	adds	r3, #8
 8014abc:	9303      	str	r3, [sp, #12]
 8014abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ac0:	443b      	add	r3, r7
 8014ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8014ac4:	e768      	b.n	8014998 <_vfiprintf_r+0x78>
 8014ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8014aca:	460c      	mov	r4, r1
 8014acc:	2001      	movs	r0, #1
 8014ace:	e7a6      	b.n	8014a1e <_vfiprintf_r+0xfe>
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	3401      	adds	r4, #1
 8014ad4:	9305      	str	r3, [sp, #20]
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	f04f 0c0a 	mov.w	ip, #10
 8014adc:	4620      	mov	r0, r4
 8014ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ae2:	3a30      	subs	r2, #48	; 0x30
 8014ae4:	2a09      	cmp	r2, #9
 8014ae6:	d903      	bls.n	8014af0 <_vfiprintf_r+0x1d0>
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d0c6      	beq.n	8014a7a <_vfiprintf_r+0x15a>
 8014aec:	9105      	str	r1, [sp, #20]
 8014aee:	e7c4      	b.n	8014a7a <_vfiprintf_r+0x15a>
 8014af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8014af4:	4604      	mov	r4, r0
 8014af6:	2301      	movs	r3, #1
 8014af8:	e7f0      	b.n	8014adc <_vfiprintf_r+0x1bc>
 8014afa:	ab03      	add	r3, sp, #12
 8014afc:	9300      	str	r3, [sp, #0]
 8014afe:	462a      	mov	r2, r5
 8014b00:	4b12      	ldr	r3, [pc, #72]	; (8014b4c <_vfiprintf_r+0x22c>)
 8014b02:	a904      	add	r1, sp, #16
 8014b04:	4630      	mov	r0, r6
 8014b06:	f7fb fa95 	bl	8010034 <_printf_float>
 8014b0a:	4607      	mov	r7, r0
 8014b0c:	1c78      	adds	r0, r7, #1
 8014b0e:	d1d6      	bne.n	8014abe <_vfiprintf_r+0x19e>
 8014b10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b12:	07d9      	lsls	r1, r3, #31
 8014b14:	d405      	bmi.n	8014b22 <_vfiprintf_r+0x202>
 8014b16:	89ab      	ldrh	r3, [r5, #12]
 8014b18:	059a      	lsls	r2, r3, #22
 8014b1a:	d402      	bmi.n	8014b22 <_vfiprintf_r+0x202>
 8014b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b1e:	f7fc fa77 	bl	8011010 <__retarget_lock_release_recursive>
 8014b22:	89ab      	ldrh	r3, [r5, #12]
 8014b24:	065b      	lsls	r3, r3, #25
 8014b26:	f53f af1d 	bmi.w	8014964 <_vfiprintf_r+0x44>
 8014b2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b2c:	e71c      	b.n	8014968 <_vfiprintf_r+0x48>
 8014b2e:	ab03      	add	r3, sp, #12
 8014b30:	9300      	str	r3, [sp, #0]
 8014b32:	462a      	mov	r2, r5
 8014b34:	4b05      	ldr	r3, [pc, #20]	; (8014b4c <_vfiprintf_r+0x22c>)
 8014b36:	a904      	add	r1, sp, #16
 8014b38:	4630      	mov	r0, r6
 8014b3a:	f7fb fd1f 	bl	801057c <_printf_i>
 8014b3e:	e7e4      	b.n	8014b0a <_vfiprintf_r+0x1ea>
 8014b40:	080166f9 	.word	0x080166f9
 8014b44:	08016703 	.word	0x08016703
 8014b48:	08010035 	.word	0x08010035
 8014b4c:	080148fd 	.word	0x080148fd
 8014b50:	080166ff 	.word	0x080166ff

08014b54 <__swbuf_r>:
 8014b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b56:	460e      	mov	r6, r1
 8014b58:	4614      	mov	r4, r2
 8014b5a:	4605      	mov	r5, r0
 8014b5c:	b118      	cbz	r0, 8014b66 <__swbuf_r+0x12>
 8014b5e:	6a03      	ldr	r3, [r0, #32]
 8014b60:	b90b      	cbnz	r3, 8014b66 <__swbuf_r+0x12>
 8014b62:	f7fc f8c9 	bl	8010cf8 <__sinit>
 8014b66:	69a3      	ldr	r3, [r4, #24]
 8014b68:	60a3      	str	r3, [r4, #8]
 8014b6a:	89a3      	ldrh	r3, [r4, #12]
 8014b6c:	071a      	lsls	r2, r3, #28
 8014b6e:	d525      	bpl.n	8014bbc <__swbuf_r+0x68>
 8014b70:	6923      	ldr	r3, [r4, #16]
 8014b72:	b31b      	cbz	r3, 8014bbc <__swbuf_r+0x68>
 8014b74:	6823      	ldr	r3, [r4, #0]
 8014b76:	6922      	ldr	r2, [r4, #16]
 8014b78:	1a98      	subs	r0, r3, r2
 8014b7a:	6963      	ldr	r3, [r4, #20]
 8014b7c:	b2f6      	uxtb	r6, r6
 8014b7e:	4283      	cmp	r3, r0
 8014b80:	4637      	mov	r7, r6
 8014b82:	dc04      	bgt.n	8014b8e <__swbuf_r+0x3a>
 8014b84:	4621      	mov	r1, r4
 8014b86:	4628      	mov	r0, r5
 8014b88:	f7ff f952 	bl	8013e30 <_fflush_r>
 8014b8c:	b9e0      	cbnz	r0, 8014bc8 <__swbuf_r+0x74>
 8014b8e:	68a3      	ldr	r3, [r4, #8]
 8014b90:	3b01      	subs	r3, #1
 8014b92:	60a3      	str	r3, [r4, #8]
 8014b94:	6823      	ldr	r3, [r4, #0]
 8014b96:	1c5a      	adds	r2, r3, #1
 8014b98:	6022      	str	r2, [r4, #0]
 8014b9a:	701e      	strb	r6, [r3, #0]
 8014b9c:	6962      	ldr	r2, [r4, #20]
 8014b9e:	1c43      	adds	r3, r0, #1
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	d004      	beq.n	8014bae <__swbuf_r+0x5a>
 8014ba4:	89a3      	ldrh	r3, [r4, #12]
 8014ba6:	07db      	lsls	r3, r3, #31
 8014ba8:	d506      	bpl.n	8014bb8 <__swbuf_r+0x64>
 8014baa:	2e0a      	cmp	r6, #10
 8014bac:	d104      	bne.n	8014bb8 <__swbuf_r+0x64>
 8014bae:	4621      	mov	r1, r4
 8014bb0:	4628      	mov	r0, r5
 8014bb2:	f7ff f93d 	bl	8013e30 <_fflush_r>
 8014bb6:	b938      	cbnz	r0, 8014bc8 <__swbuf_r+0x74>
 8014bb8:	4638      	mov	r0, r7
 8014bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bbc:	4621      	mov	r1, r4
 8014bbe:	4628      	mov	r0, r5
 8014bc0:	f000 f806 	bl	8014bd0 <__swsetup_r>
 8014bc4:	2800      	cmp	r0, #0
 8014bc6:	d0d5      	beq.n	8014b74 <__swbuf_r+0x20>
 8014bc8:	f04f 37ff 	mov.w	r7, #4294967295
 8014bcc:	e7f4      	b.n	8014bb8 <__swbuf_r+0x64>
	...

08014bd0 <__swsetup_r>:
 8014bd0:	b538      	push	{r3, r4, r5, lr}
 8014bd2:	4b2a      	ldr	r3, [pc, #168]	; (8014c7c <__swsetup_r+0xac>)
 8014bd4:	4605      	mov	r5, r0
 8014bd6:	6818      	ldr	r0, [r3, #0]
 8014bd8:	460c      	mov	r4, r1
 8014bda:	b118      	cbz	r0, 8014be4 <__swsetup_r+0x14>
 8014bdc:	6a03      	ldr	r3, [r0, #32]
 8014bde:	b90b      	cbnz	r3, 8014be4 <__swsetup_r+0x14>
 8014be0:	f7fc f88a 	bl	8010cf8 <__sinit>
 8014be4:	89a3      	ldrh	r3, [r4, #12]
 8014be6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bea:	0718      	lsls	r0, r3, #28
 8014bec:	d422      	bmi.n	8014c34 <__swsetup_r+0x64>
 8014bee:	06d9      	lsls	r1, r3, #27
 8014bf0:	d407      	bmi.n	8014c02 <__swsetup_r+0x32>
 8014bf2:	2309      	movs	r3, #9
 8014bf4:	602b      	str	r3, [r5, #0]
 8014bf6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014bfa:	81a3      	strh	r3, [r4, #12]
 8014bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8014c00:	e034      	b.n	8014c6c <__swsetup_r+0x9c>
 8014c02:	0758      	lsls	r0, r3, #29
 8014c04:	d512      	bpl.n	8014c2c <__swsetup_r+0x5c>
 8014c06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c08:	b141      	cbz	r1, 8014c1c <__swsetup_r+0x4c>
 8014c0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c0e:	4299      	cmp	r1, r3
 8014c10:	d002      	beq.n	8014c18 <__swsetup_r+0x48>
 8014c12:	4628      	mov	r0, r5
 8014c14:	f7fd f87e 	bl	8011d14 <_free_r>
 8014c18:	2300      	movs	r3, #0
 8014c1a:	6363      	str	r3, [r4, #52]	; 0x34
 8014c1c:	89a3      	ldrh	r3, [r4, #12]
 8014c1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c22:	81a3      	strh	r3, [r4, #12]
 8014c24:	2300      	movs	r3, #0
 8014c26:	6063      	str	r3, [r4, #4]
 8014c28:	6923      	ldr	r3, [r4, #16]
 8014c2a:	6023      	str	r3, [r4, #0]
 8014c2c:	89a3      	ldrh	r3, [r4, #12]
 8014c2e:	f043 0308 	orr.w	r3, r3, #8
 8014c32:	81a3      	strh	r3, [r4, #12]
 8014c34:	6923      	ldr	r3, [r4, #16]
 8014c36:	b94b      	cbnz	r3, 8014c4c <__swsetup_r+0x7c>
 8014c38:	89a3      	ldrh	r3, [r4, #12]
 8014c3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c42:	d003      	beq.n	8014c4c <__swsetup_r+0x7c>
 8014c44:	4621      	mov	r1, r4
 8014c46:	4628      	mov	r0, r5
 8014c48:	f000 f884 	bl	8014d54 <__smakebuf_r>
 8014c4c:	89a0      	ldrh	r0, [r4, #12]
 8014c4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c52:	f010 0301 	ands.w	r3, r0, #1
 8014c56:	d00a      	beq.n	8014c6e <__swsetup_r+0x9e>
 8014c58:	2300      	movs	r3, #0
 8014c5a:	60a3      	str	r3, [r4, #8]
 8014c5c:	6963      	ldr	r3, [r4, #20]
 8014c5e:	425b      	negs	r3, r3
 8014c60:	61a3      	str	r3, [r4, #24]
 8014c62:	6923      	ldr	r3, [r4, #16]
 8014c64:	b943      	cbnz	r3, 8014c78 <__swsetup_r+0xa8>
 8014c66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c6a:	d1c4      	bne.n	8014bf6 <__swsetup_r+0x26>
 8014c6c:	bd38      	pop	{r3, r4, r5, pc}
 8014c6e:	0781      	lsls	r1, r0, #30
 8014c70:	bf58      	it	pl
 8014c72:	6963      	ldrpl	r3, [r4, #20]
 8014c74:	60a3      	str	r3, [r4, #8]
 8014c76:	e7f4      	b.n	8014c62 <__swsetup_r+0x92>
 8014c78:	2000      	movs	r0, #0
 8014c7a:	e7f7      	b.n	8014c6c <__swsetup_r+0x9c>
 8014c7c:	2000016c 	.word	0x2000016c

08014c80 <_raise_r>:
 8014c80:	291f      	cmp	r1, #31
 8014c82:	b538      	push	{r3, r4, r5, lr}
 8014c84:	4604      	mov	r4, r0
 8014c86:	460d      	mov	r5, r1
 8014c88:	d904      	bls.n	8014c94 <_raise_r+0x14>
 8014c8a:	2316      	movs	r3, #22
 8014c8c:	6003      	str	r3, [r0, #0]
 8014c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c92:	bd38      	pop	{r3, r4, r5, pc}
 8014c94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014c96:	b112      	cbz	r2, 8014c9e <_raise_r+0x1e>
 8014c98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c9c:	b94b      	cbnz	r3, 8014cb2 <_raise_r+0x32>
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f000 f830 	bl	8014d04 <_getpid_r>
 8014ca4:	462a      	mov	r2, r5
 8014ca6:	4601      	mov	r1, r0
 8014ca8:	4620      	mov	r0, r4
 8014caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cae:	f000 b817 	b.w	8014ce0 <_kill_r>
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d00a      	beq.n	8014ccc <_raise_r+0x4c>
 8014cb6:	1c59      	adds	r1, r3, #1
 8014cb8:	d103      	bne.n	8014cc2 <_raise_r+0x42>
 8014cba:	2316      	movs	r3, #22
 8014cbc:	6003      	str	r3, [r0, #0]
 8014cbe:	2001      	movs	r0, #1
 8014cc0:	e7e7      	b.n	8014c92 <_raise_r+0x12>
 8014cc2:	2400      	movs	r4, #0
 8014cc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014cc8:	4628      	mov	r0, r5
 8014cca:	4798      	blx	r3
 8014ccc:	2000      	movs	r0, #0
 8014cce:	e7e0      	b.n	8014c92 <_raise_r+0x12>

08014cd0 <raise>:
 8014cd0:	4b02      	ldr	r3, [pc, #8]	; (8014cdc <raise+0xc>)
 8014cd2:	4601      	mov	r1, r0
 8014cd4:	6818      	ldr	r0, [r3, #0]
 8014cd6:	f7ff bfd3 	b.w	8014c80 <_raise_r>
 8014cda:	bf00      	nop
 8014cdc:	2000016c 	.word	0x2000016c

08014ce0 <_kill_r>:
 8014ce0:	b538      	push	{r3, r4, r5, lr}
 8014ce2:	4d07      	ldr	r5, [pc, #28]	; (8014d00 <_kill_r+0x20>)
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	4604      	mov	r4, r0
 8014ce8:	4608      	mov	r0, r1
 8014cea:	4611      	mov	r1, r2
 8014cec:	602b      	str	r3, [r5, #0]
 8014cee:	f7ee fd01 	bl	80036f4 <_kill>
 8014cf2:	1c43      	adds	r3, r0, #1
 8014cf4:	d102      	bne.n	8014cfc <_kill_r+0x1c>
 8014cf6:	682b      	ldr	r3, [r5, #0]
 8014cf8:	b103      	cbz	r3, 8014cfc <_kill_r+0x1c>
 8014cfa:	6023      	str	r3, [r4, #0]
 8014cfc:	bd38      	pop	{r3, r4, r5, pc}
 8014cfe:	bf00      	nop
 8014d00:	20004dd4 	.word	0x20004dd4

08014d04 <_getpid_r>:
 8014d04:	f7ee bcee 	b.w	80036e4 <_getpid>

08014d08 <__swhatbuf_r>:
 8014d08:	b570      	push	{r4, r5, r6, lr}
 8014d0a:	460c      	mov	r4, r1
 8014d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d10:	2900      	cmp	r1, #0
 8014d12:	b096      	sub	sp, #88	; 0x58
 8014d14:	4615      	mov	r5, r2
 8014d16:	461e      	mov	r6, r3
 8014d18:	da0d      	bge.n	8014d36 <__swhatbuf_r+0x2e>
 8014d1a:	89a3      	ldrh	r3, [r4, #12]
 8014d1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014d20:	f04f 0100 	mov.w	r1, #0
 8014d24:	bf0c      	ite	eq
 8014d26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014d2a:	2340      	movne	r3, #64	; 0x40
 8014d2c:	2000      	movs	r0, #0
 8014d2e:	6031      	str	r1, [r6, #0]
 8014d30:	602b      	str	r3, [r5, #0]
 8014d32:	b016      	add	sp, #88	; 0x58
 8014d34:	bd70      	pop	{r4, r5, r6, pc}
 8014d36:	466a      	mov	r2, sp
 8014d38:	f000 f848 	bl	8014dcc <_fstat_r>
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	dbec      	blt.n	8014d1a <__swhatbuf_r+0x12>
 8014d40:	9901      	ldr	r1, [sp, #4]
 8014d42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014d46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014d4a:	4259      	negs	r1, r3
 8014d4c:	4159      	adcs	r1, r3
 8014d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d52:	e7eb      	b.n	8014d2c <__swhatbuf_r+0x24>

08014d54 <__smakebuf_r>:
 8014d54:	898b      	ldrh	r3, [r1, #12]
 8014d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d58:	079d      	lsls	r5, r3, #30
 8014d5a:	4606      	mov	r6, r0
 8014d5c:	460c      	mov	r4, r1
 8014d5e:	d507      	bpl.n	8014d70 <__smakebuf_r+0x1c>
 8014d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014d64:	6023      	str	r3, [r4, #0]
 8014d66:	6123      	str	r3, [r4, #16]
 8014d68:	2301      	movs	r3, #1
 8014d6a:	6163      	str	r3, [r4, #20]
 8014d6c:	b002      	add	sp, #8
 8014d6e:	bd70      	pop	{r4, r5, r6, pc}
 8014d70:	ab01      	add	r3, sp, #4
 8014d72:	466a      	mov	r2, sp
 8014d74:	f7ff ffc8 	bl	8014d08 <__swhatbuf_r>
 8014d78:	9900      	ldr	r1, [sp, #0]
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	4630      	mov	r0, r6
 8014d7e:	f7fb f82d 	bl	800fddc <_malloc_r>
 8014d82:	b948      	cbnz	r0, 8014d98 <__smakebuf_r+0x44>
 8014d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d88:	059a      	lsls	r2, r3, #22
 8014d8a:	d4ef      	bmi.n	8014d6c <__smakebuf_r+0x18>
 8014d8c:	f023 0303 	bic.w	r3, r3, #3
 8014d90:	f043 0302 	orr.w	r3, r3, #2
 8014d94:	81a3      	strh	r3, [r4, #12]
 8014d96:	e7e3      	b.n	8014d60 <__smakebuf_r+0xc>
 8014d98:	89a3      	ldrh	r3, [r4, #12]
 8014d9a:	6020      	str	r0, [r4, #0]
 8014d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014da0:	81a3      	strh	r3, [r4, #12]
 8014da2:	9b00      	ldr	r3, [sp, #0]
 8014da4:	6163      	str	r3, [r4, #20]
 8014da6:	9b01      	ldr	r3, [sp, #4]
 8014da8:	6120      	str	r0, [r4, #16]
 8014daa:	b15b      	cbz	r3, 8014dc4 <__smakebuf_r+0x70>
 8014dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014db0:	4630      	mov	r0, r6
 8014db2:	f000 f81d 	bl	8014df0 <_isatty_r>
 8014db6:	b128      	cbz	r0, 8014dc4 <__smakebuf_r+0x70>
 8014db8:	89a3      	ldrh	r3, [r4, #12]
 8014dba:	f023 0303 	bic.w	r3, r3, #3
 8014dbe:	f043 0301 	orr.w	r3, r3, #1
 8014dc2:	81a3      	strh	r3, [r4, #12]
 8014dc4:	89a3      	ldrh	r3, [r4, #12]
 8014dc6:	431d      	orrs	r5, r3
 8014dc8:	81a5      	strh	r5, [r4, #12]
 8014dca:	e7cf      	b.n	8014d6c <__smakebuf_r+0x18>

08014dcc <_fstat_r>:
 8014dcc:	b538      	push	{r3, r4, r5, lr}
 8014dce:	4d07      	ldr	r5, [pc, #28]	; (8014dec <_fstat_r+0x20>)
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	4608      	mov	r0, r1
 8014dd6:	4611      	mov	r1, r2
 8014dd8:	602b      	str	r3, [r5, #0]
 8014dda:	f7ee fcea 	bl	80037b2 <_fstat>
 8014dde:	1c43      	adds	r3, r0, #1
 8014de0:	d102      	bne.n	8014de8 <_fstat_r+0x1c>
 8014de2:	682b      	ldr	r3, [r5, #0]
 8014de4:	b103      	cbz	r3, 8014de8 <_fstat_r+0x1c>
 8014de6:	6023      	str	r3, [r4, #0]
 8014de8:	bd38      	pop	{r3, r4, r5, pc}
 8014dea:	bf00      	nop
 8014dec:	20004dd4 	.word	0x20004dd4

08014df0 <_isatty_r>:
 8014df0:	b538      	push	{r3, r4, r5, lr}
 8014df2:	4d06      	ldr	r5, [pc, #24]	; (8014e0c <_isatty_r+0x1c>)
 8014df4:	2300      	movs	r3, #0
 8014df6:	4604      	mov	r4, r0
 8014df8:	4608      	mov	r0, r1
 8014dfa:	602b      	str	r3, [r5, #0]
 8014dfc:	f7ee fce9 	bl	80037d2 <_isatty>
 8014e00:	1c43      	adds	r3, r0, #1
 8014e02:	d102      	bne.n	8014e0a <_isatty_r+0x1a>
 8014e04:	682b      	ldr	r3, [r5, #0]
 8014e06:	b103      	cbz	r3, 8014e0a <_isatty_r+0x1a>
 8014e08:	6023      	str	r3, [r4, #0]
 8014e0a:	bd38      	pop	{r3, r4, r5, pc}
 8014e0c:	20004dd4 	.word	0x20004dd4

08014e10 <pow>:
 8014e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e12:	ed2d 8b02 	vpush	{d8}
 8014e16:	eeb0 8a40 	vmov.f32	s16, s0
 8014e1a:	eef0 8a60 	vmov.f32	s17, s1
 8014e1e:	ec55 4b11 	vmov	r4, r5, d1
 8014e22:	f000 f871 	bl	8014f08 <__ieee754_pow>
 8014e26:	4622      	mov	r2, r4
 8014e28:	462b      	mov	r3, r5
 8014e2a:	4620      	mov	r0, r4
 8014e2c:	4629      	mov	r1, r5
 8014e2e:	ec57 6b10 	vmov	r6, r7, d0
 8014e32:	f7eb fe83 	bl	8000b3c <__aeabi_dcmpun>
 8014e36:	2800      	cmp	r0, #0
 8014e38:	d13b      	bne.n	8014eb2 <pow+0xa2>
 8014e3a:	ec51 0b18 	vmov	r0, r1, d8
 8014e3e:	2200      	movs	r2, #0
 8014e40:	2300      	movs	r3, #0
 8014e42:	f7eb fe49 	bl	8000ad8 <__aeabi_dcmpeq>
 8014e46:	b1b8      	cbz	r0, 8014e78 <pow+0x68>
 8014e48:	2200      	movs	r2, #0
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	4629      	mov	r1, r5
 8014e50:	f7eb fe42 	bl	8000ad8 <__aeabi_dcmpeq>
 8014e54:	2800      	cmp	r0, #0
 8014e56:	d146      	bne.n	8014ee6 <pow+0xd6>
 8014e58:	ec45 4b10 	vmov	d0, r4, r5
 8014e5c:	f000 f848 	bl	8014ef0 <finite>
 8014e60:	b338      	cbz	r0, 8014eb2 <pow+0xa2>
 8014e62:	2200      	movs	r2, #0
 8014e64:	2300      	movs	r3, #0
 8014e66:	4620      	mov	r0, r4
 8014e68:	4629      	mov	r1, r5
 8014e6a:	f7eb fe3f 	bl	8000aec <__aeabi_dcmplt>
 8014e6e:	b300      	cbz	r0, 8014eb2 <pow+0xa2>
 8014e70:	f7fc f8a2 	bl	8010fb8 <__errno>
 8014e74:	2322      	movs	r3, #34	; 0x22
 8014e76:	e01b      	b.n	8014eb0 <pow+0xa0>
 8014e78:	ec47 6b10 	vmov	d0, r6, r7
 8014e7c:	f000 f838 	bl	8014ef0 <finite>
 8014e80:	b9e0      	cbnz	r0, 8014ebc <pow+0xac>
 8014e82:	eeb0 0a48 	vmov.f32	s0, s16
 8014e86:	eef0 0a68 	vmov.f32	s1, s17
 8014e8a:	f000 f831 	bl	8014ef0 <finite>
 8014e8e:	b1a8      	cbz	r0, 8014ebc <pow+0xac>
 8014e90:	ec45 4b10 	vmov	d0, r4, r5
 8014e94:	f000 f82c 	bl	8014ef0 <finite>
 8014e98:	b180      	cbz	r0, 8014ebc <pow+0xac>
 8014e9a:	4632      	mov	r2, r6
 8014e9c:	463b      	mov	r3, r7
 8014e9e:	4630      	mov	r0, r6
 8014ea0:	4639      	mov	r1, r7
 8014ea2:	f7eb fe4b 	bl	8000b3c <__aeabi_dcmpun>
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	d0e2      	beq.n	8014e70 <pow+0x60>
 8014eaa:	f7fc f885 	bl	8010fb8 <__errno>
 8014eae:	2321      	movs	r3, #33	; 0x21
 8014eb0:	6003      	str	r3, [r0, #0]
 8014eb2:	ecbd 8b02 	vpop	{d8}
 8014eb6:	ec47 6b10 	vmov	d0, r6, r7
 8014eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	4630      	mov	r0, r6
 8014ec2:	4639      	mov	r1, r7
 8014ec4:	f7eb fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d0f2      	beq.n	8014eb2 <pow+0xa2>
 8014ecc:	eeb0 0a48 	vmov.f32	s0, s16
 8014ed0:	eef0 0a68 	vmov.f32	s1, s17
 8014ed4:	f000 f80c 	bl	8014ef0 <finite>
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	d0ea      	beq.n	8014eb2 <pow+0xa2>
 8014edc:	ec45 4b10 	vmov	d0, r4, r5
 8014ee0:	f000 f806 	bl	8014ef0 <finite>
 8014ee4:	e7c3      	b.n	8014e6e <pow+0x5e>
 8014ee6:	4f01      	ldr	r7, [pc, #4]	; (8014eec <pow+0xdc>)
 8014ee8:	2600      	movs	r6, #0
 8014eea:	e7e2      	b.n	8014eb2 <pow+0xa2>
 8014eec:	3ff00000 	.word	0x3ff00000

08014ef0 <finite>:
 8014ef0:	b082      	sub	sp, #8
 8014ef2:	ed8d 0b00 	vstr	d0, [sp]
 8014ef6:	9801      	ldr	r0, [sp, #4]
 8014ef8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014efc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014f00:	0fc0      	lsrs	r0, r0, #31
 8014f02:	b002      	add	sp, #8
 8014f04:	4770      	bx	lr
	...

08014f08 <__ieee754_pow>:
 8014f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f0c:	ed2d 8b06 	vpush	{d8-d10}
 8014f10:	b089      	sub	sp, #36	; 0x24
 8014f12:	ed8d 1b00 	vstr	d1, [sp]
 8014f16:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014f1a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014f1e:	ea58 0102 	orrs.w	r1, r8, r2
 8014f22:	ec57 6b10 	vmov	r6, r7, d0
 8014f26:	d115      	bne.n	8014f54 <__ieee754_pow+0x4c>
 8014f28:	19b3      	adds	r3, r6, r6
 8014f2a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8014f2e:	4152      	adcs	r2, r2
 8014f30:	4299      	cmp	r1, r3
 8014f32:	4b89      	ldr	r3, [pc, #548]	; (8015158 <__ieee754_pow+0x250>)
 8014f34:	4193      	sbcs	r3, r2
 8014f36:	f080 84d1 	bcs.w	80158dc <__ieee754_pow+0x9d4>
 8014f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f3e:	4630      	mov	r0, r6
 8014f40:	4639      	mov	r1, r7
 8014f42:	f7eb f9ab 	bl	800029c <__adddf3>
 8014f46:	ec41 0b10 	vmov	d0, r0, r1
 8014f4a:	b009      	add	sp, #36	; 0x24
 8014f4c:	ecbd 8b06 	vpop	{d8-d10}
 8014f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f54:	4b81      	ldr	r3, [pc, #516]	; (801515c <__ieee754_pow+0x254>)
 8014f56:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014f5a:	429c      	cmp	r4, r3
 8014f5c:	ee10 aa10 	vmov	sl, s0
 8014f60:	463d      	mov	r5, r7
 8014f62:	dc06      	bgt.n	8014f72 <__ieee754_pow+0x6a>
 8014f64:	d101      	bne.n	8014f6a <__ieee754_pow+0x62>
 8014f66:	2e00      	cmp	r6, #0
 8014f68:	d1e7      	bne.n	8014f3a <__ieee754_pow+0x32>
 8014f6a:	4598      	cmp	r8, r3
 8014f6c:	dc01      	bgt.n	8014f72 <__ieee754_pow+0x6a>
 8014f6e:	d10f      	bne.n	8014f90 <__ieee754_pow+0x88>
 8014f70:	b172      	cbz	r2, 8014f90 <__ieee754_pow+0x88>
 8014f72:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8014f76:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8014f7a:	ea55 050a 	orrs.w	r5, r5, sl
 8014f7e:	d1dc      	bne.n	8014f3a <__ieee754_pow+0x32>
 8014f80:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014f84:	18db      	adds	r3, r3, r3
 8014f86:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8014f8a:	4152      	adcs	r2, r2
 8014f8c:	429d      	cmp	r5, r3
 8014f8e:	e7d0      	b.n	8014f32 <__ieee754_pow+0x2a>
 8014f90:	2d00      	cmp	r5, #0
 8014f92:	da3b      	bge.n	801500c <__ieee754_pow+0x104>
 8014f94:	4b72      	ldr	r3, [pc, #456]	; (8015160 <__ieee754_pow+0x258>)
 8014f96:	4598      	cmp	r8, r3
 8014f98:	dc51      	bgt.n	801503e <__ieee754_pow+0x136>
 8014f9a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014f9e:	4598      	cmp	r8, r3
 8014fa0:	f340 84ab 	ble.w	80158fa <__ieee754_pow+0x9f2>
 8014fa4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014fa8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014fac:	2b14      	cmp	r3, #20
 8014fae:	dd0f      	ble.n	8014fd0 <__ieee754_pow+0xc8>
 8014fb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014fb4:	fa22 f103 	lsr.w	r1, r2, r3
 8014fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8014fbc:	4293      	cmp	r3, r2
 8014fbe:	f040 849c 	bne.w	80158fa <__ieee754_pow+0x9f2>
 8014fc2:	f001 0101 	and.w	r1, r1, #1
 8014fc6:	f1c1 0302 	rsb	r3, r1, #2
 8014fca:	9304      	str	r3, [sp, #16]
 8014fcc:	b182      	cbz	r2, 8014ff0 <__ieee754_pow+0xe8>
 8014fce:	e05f      	b.n	8015090 <__ieee754_pow+0x188>
 8014fd0:	2a00      	cmp	r2, #0
 8014fd2:	d15b      	bne.n	801508c <__ieee754_pow+0x184>
 8014fd4:	f1c3 0314 	rsb	r3, r3, #20
 8014fd8:	fa48 f103 	asr.w	r1, r8, r3
 8014fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8014fe0:	4543      	cmp	r3, r8
 8014fe2:	f040 8487 	bne.w	80158f4 <__ieee754_pow+0x9ec>
 8014fe6:	f001 0101 	and.w	r1, r1, #1
 8014fea:	f1c1 0302 	rsb	r3, r1, #2
 8014fee:	9304      	str	r3, [sp, #16]
 8014ff0:	4b5c      	ldr	r3, [pc, #368]	; (8015164 <__ieee754_pow+0x25c>)
 8014ff2:	4598      	cmp	r8, r3
 8014ff4:	d132      	bne.n	801505c <__ieee754_pow+0x154>
 8014ff6:	f1b9 0f00 	cmp.w	r9, #0
 8014ffa:	f280 8477 	bge.w	80158ec <__ieee754_pow+0x9e4>
 8014ffe:	4959      	ldr	r1, [pc, #356]	; (8015164 <__ieee754_pow+0x25c>)
 8015000:	4632      	mov	r2, r6
 8015002:	463b      	mov	r3, r7
 8015004:	2000      	movs	r0, #0
 8015006:	f7eb fc29 	bl	800085c <__aeabi_ddiv>
 801500a:	e79c      	b.n	8014f46 <__ieee754_pow+0x3e>
 801500c:	2300      	movs	r3, #0
 801500e:	9304      	str	r3, [sp, #16]
 8015010:	2a00      	cmp	r2, #0
 8015012:	d13d      	bne.n	8015090 <__ieee754_pow+0x188>
 8015014:	4b51      	ldr	r3, [pc, #324]	; (801515c <__ieee754_pow+0x254>)
 8015016:	4598      	cmp	r8, r3
 8015018:	d1ea      	bne.n	8014ff0 <__ieee754_pow+0xe8>
 801501a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801501e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015022:	ea53 030a 	orrs.w	r3, r3, sl
 8015026:	f000 8459 	beq.w	80158dc <__ieee754_pow+0x9d4>
 801502a:	4b4f      	ldr	r3, [pc, #316]	; (8015168 <__ieee754_pow+0x260>)
 801502c:	429c      	cmp	r4, r3
 801502e:	dd08      	ble.n	8015042 <__ieee754_pow+0x13a>
 8015030:	f1b9 0f00 	cmp.w	r9, #0
 8015034:	f2c0 8456 	blt.w	80158e4 <__ieee754_pow+0x9dc>
 8015038:	e9dd 0100 	ldrd	r0, r1, [sp]
 801503c:	e783      	b.n	8014f46 <__ieee754_pow+0x3e>
 801503e:	2302      	movs	r3, #2
 8015040:	e7e5      	b.n	801500e <__ieee754_pow+0x106>
 8015042:	f1b9 0f00 	cmp.w	r9, #0
 8015046:	f04f 0000 	mov.w	r0, #0
 801504a:	f04f 0100 	mov.w	r1, #0
 801504e:	f6bf af7a 	bge.w	8014f46 <__ieee754_pow+0x3e>
 8015052:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015056:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801505a:	e774      	b.n	8014f46 <__ieee754_pow+0x3e>
 801505c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015060:	d106      	bne.n	8015070 <__ieee754_pow+0x168>
 8015062:	4632      	mov	r2, r6
 8015064:	463b      	mov	r3, r7
 8015066:	4630      	mov	r0, r6
 8015068:	4639      	mov	r1, r7
 801506a:	f7eb facd 	bl	8000608 <__aeabi_dmul>
 801506e:	e76a      	b.n	8014f46 <__ieee754_pow+0x3e>
 8015070:	4b3e      	ldr	r3, [pc, #248]	; (801516c <__ieee754_pow+0x264>)
 8015072:	4599      	cmp	r9, r3
 8015074:	d10c      	bne.n	8015090 <__ieee754_pow+0x188>
 8015076:	2d00      	cmp	r5, #0
 8015078:	db0a      	blt.n	8015090 <__ieee754_pow+0x188>
 801507a:	ec47 6b10 	vmov	d0, r6, r7
 801507e:	b009      	add	sp, #36	; 0x24
 8015080:	ecbd 8b06 	vpop	{d8-d10}
 8015084:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015088:	f000 bd20 	b.w	8015acc <__ieee754_sqrt>
 801508c:	2300      	movs	r3, #0
 801508e:	9304      	str	r3, [sp, #16]
 8015090:	ec47 6b10 	vmov	d0, r6, r7
 8015094:	f000 fc62 	bl	801595c <fabs>
 8015098:	ec51 0b10 	vmov	r0, r1, d0
 801509c:	f1ba 0f00 	cmp.w	sl, #0
 80150a0:	d129      	bne.n	80150f6 <__ieee754_pow+0x1ee>
 80150a2:	b124      	cbz	r4, 80150ae <__ieee754_pow+0x1a6>
 80150a4:	4b2f      	ldr	r3, [pc, #188]	; (8015164 <__ieee754_pow+0x25c>)
 80150a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d123      	bne.n	80150f6 <__ieee754_pow+0x1ee>
 80150ae:	f1b9 0f00 	cmp.w	r9, #0
 80150b2:	da05      	bge.n	80150c0 <__ieee754_pow+0x1b8>
 80150b4:	4602      	mov	r2, r0
 80150b6:	460b      	mov	r3, r1
 80150b8:	2000      	movs	r0, #0
 80150ba:	492a      	ldr	r1, [pc, #168]	; (8015164 <__ieee754_pow+0x25c>)
 80150bc:	f7eb fbce 	bl	800085c <__aeabi_ddiv>
 80150c0:	2d00      	cmp	r5, #0
 80150c2:	f6bf af40 	bge.w	8014f46 <__ieee754_pow+0x3e>
 80150c6:	9b04      	ldr	r3, [sp, #16]
 80150c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80150cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80150d0:	431c      	orrs	r4, r3
 80150d2:	d108      	bne.n	80150e6 <__ieee754_pow+0x1de>
 80150d4:	4602      	mov	r2, r0
 80150d6:	460b      	mov	r3, r1
 80150d8:	4610      	mov	r0, r2
 80150da:	4619      	mov	r1, r3
 80150dc:	f7eb f8dc 	bl	8000298 <__aeabi_dsub>
 80150e0:	4602      	mov	r2, r0
 80150e2:	460b      	mov	r3, r1
 80150e4:	e78f      	b.n	8015006 <__ieee754_pow+0xfe>
 80150e6:	9b04      	ldr	r3, [sp, #16]
 80150e8:	2b01      	cmp	r3, #1
 80150ea:	f47f af2c 	bne.w	8014f46 <__ieee754_pow+0x3e>
 80150ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80150f2:	4619      	mov	r1, r3
 80150f4:	e727      	b.n	8014f46 <__ieee754_pow+0x3e>
 80150f6:	0feb      	lsrs	r3, r5, #31
 80150f8:	3b01      	subs	r3, #1
 80150fa:	9306      	str	r3, [sp, #24]
 80150fc:	9a06      	ldr	r2, [sp, #24]
 80150fe:	9b04      	ldr	r3, [sp, #16]
 8015100:	4313      	orrs	r3, r2
 8015102:	d102      	bne.n	801510a <__ieee754_pow+0x202>
 8015104:	4632      	mov	r2, r6
 8015106:	463b      	mov	r3, r7
 8015108:	e7e6      	b.n	80150d8 <__ieee754_pow+0x1d0>
 801510a:	4b19      	ldr	r3, [pc, #100]	; (8015170 <__ieee754_pow+0x268>)
 801510c:	4598      	cmp	r8, r3
 801510e:	f340 80fb 	ble.w	8015308 <__ieee754_pow+0x400>
 8015112:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015116:	4598      	cmp	r8, r3
 8015118:	4b13      	ldr	r3, [pc, #76]	; (8015168 <__ieee754_pow+0x260>)
 801511a:	dd0c      	ble.n	8015136 <__ieee754_pow+0x22e>
 801511c:	429c      	cmp	r4, r3
 801511e:	dc0f      	bgt.n	8015140 <__ieee754_pow+0x238>
 8015120:	f1b9 0f00 	cmp.w	r9, #0
 8015124:	da0f      	bge.n	8015146 <__ieee754_pow+0x23e>
 8015126:	2000      	movs	r0, #0
 8015128:	b009      	add	sp, #36	; 0x24
 801512a:	ecbd 8b06 	vpop	{d8-d10}
 801512e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015132:	f000 bcc2 	b.w	8015aba <__math_oflow>
 8015136:	429c      	cmp	r4, r3
 8015138:	dbf2      	blt.n	8015120 <__ieee754_pow+0x218>
 801513a:	4b0a      	ldr	r3, [pc, #40]	; (8015164 <__ieee754_pow+0x25c>)
 801513c:	429c      	cmp	r4, r3
 801513e:	dd19      	ble.n	8015174 <__ieee754_pow+0x26c>
 8015140:	f1b9 0f00 	cmp.w	r9, #0
 8015144:	dcef      	bgt.n	8015126 <__ieee754_pow+0x21e>
 8015146:	2000      	movs	r0, #0
 8015148:	b009      	add	sp, #36	; 0x24
 801514a:	ecbd 8b06 	vpop	{d8-d10}
 801514e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015152:	f000 bca9 	b.w	8015aa8 <__math_uflow>
 8015156:	bf00      	nop
 8015158:	fff00000 	.word	0xfff00000
 801515c:	7ff00000 	.word	0x7ff00000
 8015160:	433fffff 	.word	0x433fffff
 8015164:	3ff00000 	.word	0x3ff00000
 8015168:	3fefffff 	.word	0x3fefffff
 801516c:	3fe00000 	.word	0x3fe00000
 8015170:	41e00000 	.word	0x41e00000
 8015174:	4b60      	ldr	r3, [pc, #384]	; (80152f8 <__ieee754_pow+0x3f0>)
 8015176:	2200      	movs	r2, #0
 8015178:	f7eb f88e 	bl	8000298 <__aeabi_dsub>
 801517c:	a354      	add	r3, pc, #336	; (adr r3, 80152d0 <__ieee754_pow+0x3c8>)
 801517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015182:	4604      	mov	r4, r0
 8015184:	460d      	mov	r5, r1
 8015186:	f7eb fa3f 	bl	8000608 <__aeabi_dmul>
 801518a:	a353      	add	r3, pc, #332	; (adr r3, 80152d8 <__ieee754_pow+0x3d0>)
 801518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015190:	4606      	mov	r6, r0
 8015192:	460f      	mov	r7, r1
 8015194:	4620      	mov	r0, r4
 8015196:	4629      	mov	r1, r5
 8015198:	f7eb fa36 	bl	8000608 <__aeabi_dmul>
 801519c:	4b57      	ldr	r3, [pc, #348]	; (80152fc <__ieee754_pow+0x3f4>)
 801519e:	4682      	mov	sl, r0
 80151a0:	468b      	mov	fp, r1
 80151a2:	2200      	movs	r2, #0
 80151a4:	4620      	mov	r0, r4
 80151a6:	4629      	mov	r1, r5
 80151a8:	f7eb fa2e 	bl	8000608 <__aeabi_dmul>
 80151ac:	4602      	mov	r2, r0
 80151ae:	460b      	mov	r3, r1
 80151b0:	a14b      	add	r1, pc, #300	; (adr r1, 80152e0 <__ieee754_pow+0x3d8>)
 80151b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80151b6:	f7eb f86f 	bl	8000298 <__aeabi_dsub>
 80151ba:	4622      	mov	r2, r4
 80151bc:	462b      	mov	r3, r5
 80151be:	f7eb fa23 	bl	8000608 <__aeabi_dmul>
 80151c2:	4602      	mov	r2, r0
 80151c4:	460b      	mov	r3, r1
 80151c6:	2000      	movs	r0, #0
 80151c8:	494d      	ldr	r1, [pc, #308]	; (8015300 <__ieee754_pow+0x3f8>)
 80151ca:	f7eb f865 	bl	8000298 <__aeabi_dsub>
 80151ce:	4622      	mov	r2, r4
 80151d0:	4680      	mov	r8, r0
 80151d2:	4689      	mov	r9, r1
 80151d4:	462b      	mov	r3, r5
 80151d6:	4620      	mov	r0, r4
 80151d8:	4629      	mov	r1, r5
 80151da:	f7eb fa15 	bl	8000608 <__aeabi_dmul>
 80151de:	4602      	mov	r2, r0
 80151e0:	460b      	mov	r3, r1
 80151e2:	4640      	mov	r0, r8
 80151e4:	4649      	mov	r1, r9
 80151e6:	f7eb fa0f 	bl	8000608 <__aeabi_dmul>
 80151ea:	a33f      	add	r3, pc, #252	; (adr r3, 80152e8 <__ieee754_pow+0x3e0>)
 80151ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f0:	f7eb fa0a 	bl	8000608 <__aeabi_dmul>
 80151f4:	4602      	mov	r2, r0
 80151f6:	460b      	mov	r3, r1
 80151f8:	4650      	mov	r0, sl
 80151fa:	4659      	mov	r1, fp
 80151fc:	f7eb f84c 	bl	8000298 <__aeabi_dsub>
 8015200:	4602      	mov	r2, r0
 8015202:	460b      	mov	r3, r1
 8015204:	4680      	mov	r8, r0
 8015206:	4689      	mov	r9, r1
 8015208:	4630      	mov	r0, r6
 801520a:	4639      	mov	r1, r7
 801520c:	f7eb f846 	bl	800029c <__adddf3>
 8015210:	2000      	movs	r0, #0
 8015212:	4632      	mov	r2, r6
 8015214:	463b      	mov	r3, r7
 8015216:	4604      	mov	r4, r0
 8015218:	460d      	mov	r5, r1
 801521a:	f7eb f83d 	bl	8000298 <__aeabi_dsub>
 801521e:	4602      	mov	r2, r0
 8015220:	460b      	mov	r3, r1
 8015222:	4640      	mov	r0, r8
 8015224:	4649      	mov	r1, r9
 8015226:	f7eb f837 	bl	8000298 <__aeabi_dsub>
 801522a:	9b04      	ldr	r3, [sp, #16]
 801522c:	9a06      	ldr	r2, [sp, #24]
 801522e:	3b01      	subs	r3, #1
 8015230:	4313      	orrs	r3, r2
 8015232:	4682      	mov	sl, r0
 8015234:	468b      	mov	fp, r1
 8015236:	f040 81e7 	bne.w	8015608 <__ieee754_pow+0x700>
 801523a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80152f0 <__ieee754_pow+0x3e8>
 801523e:	eeb0 8a47 	vmov.f32	s16, s14
 8015242:	eef0 8a67 	vmov.f32	s17, s15
 8015246:	e9dd 6700 	ldrd	r6, r7, [sp]
 801524a:	2600      	movs	r6, #0
 801524c:	4632      	mov	r2, r6
 801524e:	463b      	mov	r3, r7
 8015250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015254:	f7eb f820 	bl	8000298 <__aeabi_dsub>
 8015258:	4622      	mov	r2, r4
 801525a:	462b      	mov	r3, r5
 801525c:	f7eb f9d4 	bl	8000608 <__aeabi_dmul>
 8015260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015264:	4680      	mov	r8, r0
 8015266:	4689      	mov	r9, r1
 8015268:	4650      	mov	r0, sl
 801526a:	4659      	mov	r1, fp
 801526c:	f7eb f9cc 	bl	8000608 <__aeabi_dmul>
 8015270:	4602      	mov	r2, r0
 8015272:	460b      	mov	r3, r1
 8015274:	4640      	mov	r0, r8
 8015276:	4649      	mov	r1, r9
 8015278:	f7eb f810 	bl	800029c <__adddf3>
 801527c:	4632      	mov	r2, r6
 801527e:	463b      	mov	r3, r7
 8015280:	4680      	mov	r8, r0
 8015282:	4689      	mov	r9, r1
 8015284:	4620      	mov	r0, r4
 8015286:	4629      	mov	r1, r5
 8015288:	f7eb f9be 	bl	8000608 <__aeabi_dmul>
 801528c:	460b      	mov	r3, r1
 801528e:	4604      	mov	r4, r0
 8015290:	460d      	mov	r5, r1
 8015292:	4602      	mov	r2, r0
 8015294:	4649      	mov	r1, r9
 8015296:	4640      	mov	r0, r8
 8015298:	f7eb f800 	bl	800029c <__adddf3>
 801529c:	4b19      	ldr	r3, [pc, #100]	; (8015304 <__ieee754_pow+0x3fc>)
 801529e:	4299      	cmp	r1, r3
 80152a0:	ec45 4b19 	vmov	d9, r4, r5
 80152a4:	4606      	mov	r6, r0
 80152a6:	460f      	mov	r7, r1
 80152a8:	468b      	mov	fp, r1
 80152aa:	f340 82f0 	ble.w	801588e <__ieee754_pow+0x986>
 80152ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80152b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80152b6:	4303      	orrs	r3, r0
 80152b8:	f000 81e4 	beq.w	8015684 <__ieee754_pow+0x77c>
 80152bc:	ec51 0b18 	vmov	r0, r1, d8
 80152c0:	2200      	movs	r2, #0
 80152c2:	2300      	movs	r3, #0
 80152c4:	f7eb fc12 	bl	8000aec <__aeabi_dcmplt>
 80152c8:	3800      	subs	r0, #0
 80152ca:	bf18      	it	ne
 80152cc:	2001      	movne	r0, #1
 80152ce:	e72b      	b.n	8015128 <__ieee754_pow+0x220>
 80152d0:	60000000 	.word	0x60000000
 80152d4:	3ff71547 	.word	0x3ff71547
 80152d8:	f85ddf44 	.word	0xf85ddf44
 80152dc:	3e54ae0b 	.word	0x3e54ae0b
 80152e0:	55555555 	.word	0x55555555
 80152e4:	3fd55555 	.word	0x3fd55555
 80152e8:	652b82fe 	.word	0x652b82fe
 80152ec:	3ff71547 	.word	0x3ff71547
 80152f0:	00000000 	.word	0x00000000
 80152f4:	bff00000 	.word	0xbff00000
 80152f8:	3ff00000 	.word	0x3ff00000
 80152fc:	3fd00000 	.word	0x3fd00000
 8015300:	3fe00000 	.word	0x3fe00000
 8015304:	408fffff 	.word	0x408fffff
 8015308:	4bd5      	ldr	r3, [pc, #852]	; (8015660 <__ieee754_pow+0x758>)
 801530a:	402b      	ands	r3, r5
 801530c:	2200      	movs	r2, #0
 801530e:	b92b      	cbnz	r3, 801531c <__ieee754_pow+0x414>
 8015310:	4bd4      	ldr	r3, [pc, #848]	; (8015664 <__ieee754_pow+0x75c>)
 8015312:	f7eb f979 	bl	8000608 <__aeabi_dmul>
 8015316:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801531a:	460c      	mov	r4, r1
 801531c:	1523      	asrs	r3, r4, #20
 801531e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015322:	4413      	add	r3, r2
 8015324:	9305      	str	r3, [sp, #20]
 8015326:	4bd0      	ldr	r3, [pc, #832]	; (8015668 <__ieee754_pow+0x760>)
 8015328:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801532c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015330:	429c      	cmp	r4, r3
 8015332:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015336:	dd08      	ble.n	801534a <__ieee754_pow+0x442>
 8015338:	4bcc      	ldr	r3, [pc, #816]	; (801566c <__ieee754_pow+0x764>)
 801533a:	429c      	cmp	r4, r3
 801533c:	f340 8162 	ble.w	8015604 <__ieee754_pow+0x6fc>
 8015340:	9b05      	ldr	r3, [sp, #20]
 8015342:	3301      	adds	r3, #1
 8015344:	9305      	str	r3, [sp, #20]
 8015346:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801534a:	2400      	movs	r4, #0
 801534c:	00e3      	lsls	r3, r4, #3
 801534e:	9307      	str	r3, [sp, #28]
 8015350:	4bc7      	ldr	r3, [pc, #796]	; (8015670 <__ieee754_pow+0x768>)
 8015352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015356:	ed93 7b00 	vldr	d7, [r3]
 801535a:	4629      	mov	r1, r5
 801535c:	ec53 2b17 	vmov	r2, r3, d7
 8015360:	eeb0 9a47 	vmov.f32	s18, s14
 8015364:	eef0 9a67 	vmov.f32	s19, s15
 8015368:	4682      	mov	sl, r0
 801536a:	f7ea ff95 	bl	8000298 <__aeabi_dsub>
 801536e:	4652      	mov	r2, sl
 8015370:	4606      	mov	r6, r0
 8015372:	460f      	mov	r7, r1
 8015374:	462b      	mov	r3, r5
 8015376:	ec51 0b19 	vmov	r0, r1, d9
 801537a:	f7ea ff8f 	bl	800029c <__adddf3>
 801537e:	4602      	mov	r2, r0
 8015380:	460b      	mov	r3, r1
 8015382:	2000      	movs	r0, #0
 8015384:	49bb      	ldr	r1, [pc, #748]	; (8015674 <__ieee754_pow+0x76c>)
 8015386:	f7eb fa69 	bl	800085c <__aeabi_ddiv>
 801538a:	ec41 0b1a 	vmov	d10, r0, r1
 801538e:	4602      	mov	r2, r0
 8015390:	460b      	mov	r3, r1
 8015392:	4630      	mov	r0, r6
 8015394:	4639      	mov	r1, r7
 8015396:	f7eb f937 	bl	8000608 <__aeabi_dmul>
 801539a:	2300      	movs	r3, #0
 801539c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80153a0:	9302      	str	r3, [sp, #8]
 80153a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80153a6:	46ab      	mov	fp, r5
 80153a8:	106d      	asrs	r5, r5, #1
 80153aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80153ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80153b2:	ec41 0b18 	vmov	d8, r0, r1
 80153b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80153ba:	2200      	movs	r2, #0
 80153bc:	4640      	mov	r0, r8
 80153be:	4649      	mov	r1, r9
 80153c0:	4614      	mov	r4, r2
 80153c2:	461d      	mov	r5, r3
 80153c4:	f7eb f920 	bl	8000608 <__aeabi_dmul>
 80153c8:	4602      	mov	r2, r0
 80153ca:	460b      	mov	r3, r1
 80153cc:	4630      	mov	r0, r6
 80153ce:	4639      	mov	r1, r7
 80153d0:	f7ea ff62 	bl	8000298 <__aeabi_dsub>
 80153d4:	ec53 2b19 	vmov	r2, r3, d9
 80153d8:	4606      	mov	r6, r0
 80153da:	460f      	mov	r7, r1
 80153dc:	4620      	mov	r0, r4
 80153de:	4629      	mov	r1, r5
 80153e0:	f7ea ff5a 	bl	8000298 <__aeabi_dsub>
 80153e4:	4602      	mov	r2, r0
 80153e6:	460b      	mov	r3, r1
 80153e8:	4650      	mov	r0, sl
 80153ea:	4659      	mov	r1, fp
 80153ec:	f7ea ff54 	bl	8000298 <__aeabi_dsub>
 80153f0:	4642      	mov	r2, r8
 80153f2:	464b      	mov	r3, r9
 80153f4:	f7eb f908 	bl	8000608 <__aeabi_dmul>
 80153f8:	4602      	mov	r2, r0
 80153fa:	460b      	mov	r3, r1
 80153fc:	4630      	mov	r0, r6
 80153fe:	4639      	mov	r1, r7
 8015400:	f7ea ff4a 	bl	8000298 <__aeabi_dsub>
 8015404:	ec53 2b1a 	vmov	r2, r3, d10
 8015408:	f7eb f8fe 	bl	8000608 <__aeabi_dmul>
 801540c:	ec53 2b18 	vmov	r2, r3, d8
 8015410:	ec41 0b19 	vmov	d9, r0, r1
 8015414:	ec51 0b18 	vmov	r0, r1, d8
 8015418:	f7eb f8f6 	bl	8000608 <__aeabi_dmul>
 801541c:	a37c      	add	r3, pc, #496	; (adr r3, 8015610 <__ieee754_pow+0x708>)
 801541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015422:	4604      	mov	r4, r0
 8015424:	460d      	mov	r5, r1
 8015426:	f7eb f8ef 	bl	8000608 <__aeabi_dmul>
 801542a:	a37b      	add	r3, pc, #492	; (adr r3, 8015618 <__ieee754_pow+0x710>)
 801542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015430:	f7ea ff34 	bl	800029c <__adddf3>
 8015434:	4622      	mov	r2, r4
 8015436:	462b      	mov	r3, r5
 8015438:	f7eb f8e6 	bl	8000608 <__aeabi_dmul>
 801543c:	a378      	add	r3, pc, #480	; (adr r3, 8015620 <__ieee754_pow+0x718>)
 801543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015442:	f7ea ff2b 	bl	800029c <__adddf3>
 8015446:	4622      	mov	r2, r4
 8015448:	462b      	mov	r3, r5
 801544a:	f7eb f8dd 	bl	8000608 <__aeabi_dmul>
 801544e:	a376      	add	r3, pc, #472	; (adr r3, 8015628 <__ieee754_pow+0x720>)
 8015450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015454:	f7ea ff22 	bl	800029c <__adddf3>
 8015458:	4622      	mov	r2, r4
 801545a:	462b      	mov	r3, r5
 801545c:	f7eb f8d4 	bl	8000608 <__aeabi_dmul>
 8015460:	a373      	add	r3, pc, #460	; (adr r3, 8015630 <__ieee754_pow+0x728>)
 8015462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015466:	f7ea ff19 	bl	800029c <__adddf3>
 801546a:	4622      	mov	r2, r4
 801546c:	462b      	mov	r3, r5
 801546e:	f7eb f8cb 	bl	8000608 <__aeabi_dmul>
 8015472:	a371      	add	r3, pc, #452	; (adr r3, 8015638 <__ieee754_pow+0x730>)
 8015474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015478:	f7ea ff10 	bl	800029c <__adddf3>
 801547c:	4622      	mov	r2, r4
 801547e:	4606      	mov	r6, r0
 8015480:	460f      	mov	r7, r1
 8015482:	462b      	mov	r3, r5
 8015484:	4620      	mov	r0, r4
 8015486:	4629      	mov	r1, r5
 8015488:	f7eb f8be 	bl	8000608 <__aeabi_dmul>
 801548c:	4602      	mov	r2, r0
 801548e:	460b      	mov	r3, r1
 8015490:	4630      	mov	r0, r6
 8015492:	4639      	mov	r1, r7
 8015494:	f7eb f8b8 	bl	8000608 <__aeabi_dmul>
 8015498:	4642      	mov	r2, r8
 801549a:	4604      	mov	r4, r0
 801549c:	460d      	mov	r5, r1
 801549e:	464b      	mov	r3, r9
 80154a0:	ec51 0b18 	vmov	r0, r1, d8
 80154a4:	f7ea fefa 	bl	800029c <__adddf3>
 80154a8:	ec53 2b19 	vmov	r2, r3, d9
 80154ac:	f7eb f8ac 	bl	8000608 <__aeabi_dmul>
 80154b0:	4622      	mov	r2, r4
 80154b2:	462b      	mov	r3, r5
 80154b4:	f7ea fef2 	bl	800029c <__adddf3>
 80154b8:	4642      	mov	r2, r8
 80154ba:	4682      	mov	sl, r0
 80154bc:	468b      	mov	fp, r1
 80154be:	464b      	mov	r3, r9
 80154c0:	4640      	mov	r0, r8
 80154c2:	4649      	mov	r1, r9
 80154c4:	f7eb f8a0 	bl	8000608 <__aeabi_dmul>
 80154c8:	4b6b      	ldr	r3, [pc, #428]	; (8015678 <__ieee754_pow+0x770>)
 80154ca:	2200      	movs	r2, #0
 80154cc:	4606      	mov	r6, r0
 80154ce:	460f      	mov	r7, r1
 80154d0:	f7ea fee4 	bl	800029c <__adddf3>
 80154d4:	4652      	mov	r2, sl
 80154d6:	465b      	mov	r3, fp
 80154d8:	f7ea fee0 	bl	800029c <__adddf3>
 80154dc:	2000      	movs	r0, #0
 80154de:	4604      	mov	r4, r0
 80154e0:	460d      	mov	r5, r1
 80154e2:	4602      	mov	r2, r0
 80154e4:	460b      	mov	r3, r1
 80154e6:	4640      	mov	r0, r8
 80154e8:	4649      	mov	r1, r9
 80154ea:	f7eb f88d 	bl	8000608 <__aeabi_dmul>
 80154ee:	4b62      	ldr	r3, [pc, #392]	; (8015678 <__ieee754_pow+0x770>)
 80154f0:	4680      	mov	r8, r0
 80154f2:	4689      	mov	r9, r1
 80154f4:	2200      	movs	r2, #0
 80154f6:	4620      	mov	r0, r4
 80154f8:	4629      	mov	r1, r5
 80154fa:	f7ea fecd 	bl	8000298 <__aeabi_dsub>
 80154fe:	4632      	mov	r2, r6
 8015500:	463b      	mov	r3, r7
 8015502:	f7ea fec9 	bl	8000298 <__aeabi_dsub>
 8015506:	4602      	mov	r2, r0
 8015508:	460b      	mov	r3, r1
 801550a:	4650      	mov	r0, sl
 801550c:	4659      	mov	r1, fp
 801550e:	f7ea fec3 	bl	8000298 <__aeabi_dsub>
 8015512:	ec53 2b18 	vmov	r2, r3, d8
 8015516:	f7eb f877 	bl	8000608 <__aeabi_dmul>
 801551a:	4622      	mov	r2, r4
 801551c:	4606      	mov	r6, r0
 801551e:	460f      	mov	r7, r1
 8015520:	462b      	mov	r3, r5
 8015522:	ec51 0b19 	vmov	r0, r1, d9
 8015526:	f7eb f86f 	bl	8000608 <__aeabi_dmul>
 801552a:	4602      	mov	r2, r0
 801552c:	460b      	mov	r3, r1
 801552e:	4630      	mov	r0, r6
 8015530:	4639      	mov	r1, r7
 8015532:	f7ea feb3 	bl	800029c <__adddf3>
 8015536:	4606      	mov	r6, r0
 8015538:	460f      	mov	r7, r1
 801553a:	4602      	mov	r2, r0
 801553c:	460b      	mov	r3, r1
 801553e:	4640      	mov	r0, r8
 8015540:	4649      	mov	r1, r9
 8015542:	f7ea feab 	bl	800029c <__adddf3>
 8015546:	a33e      	add	r3, pc, #248	; (adr r3, 8015640 <__ieee754_pow+0x738>)
 8015548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801554c:	2000      	movs	r0, #0
 801554e:	4604      	mov	r4, r0
 8015550:	460d      	mov	r5, r1
 8015552:	f7eb f859 	bl	8000608 <__aeabi_dmul>
 8015556:	4642      	mov	r2, r8
 8015558:	ec41 0b18 	vmov	d8, r0, r1
 801555c:	464b      	mov	r3, r9
 801555e:	4620      	mov	r0, r4
 8015560:	4629      	mov	r1, r5
 8015562:	f7ea fe99 	bl	8000298 <__aeabi_dsub>
 8015566:	4602      	mov	r2, r0
 8015568:	460b      	mov	r3, r1
 801556a:	4630      	mov	r0, r6
 801556c:	4639      	mov	r1, r7
 801556e:	f7ea fe93 	bl	8000298 <__aeabi_dsub>
 8015572:	a335      	add	r3, pc, #212	; (adr r3, 8015648 <__ieee754_pow+0x740>)
 8015574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015578:	f7eb f846 	bl	8000608 <__aeabi_dmul>
 801557c:	a334      	add	r3, pc, #208	; (adr r3, 8015650 <__ieee754_pow+0x748>)
 801557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015582:	4606      	mov	r6, r0
 8015584:	460f      	mov	r7, r1
 8015586:	4620      	mov	r0, r4
 8015588:	4629      	mov	r1, r5
 801558a:	f7eb f83d 	bl	8000608 <__aeabi_dmul>
 801558e:	4602      	mov	r2, r0
 8015590:	460b      	mov	r3, r1
 8015592:	4630      	mov	r0, r6
 8015594:	4639      	mov	r1, r7
 8015596:	f7ea fe81 	bl	800029c <__adddf3>
 801559a:	9a07      	ldr	r2, [sp, #28]
 801559c:	4b37      	ldr	r3, [pc, #220]	; (801567c <__ieee754_pow+0x774>)
 801559e:	4413      	add	r3, r2
 80155a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a4:	f7ea fe7a 	bl	800029c <__adddf3>
 80155a8:	4682      	mov	sl, r0
 80155aa:	9805      	ldr	r0, [sp, #20]
 80155ac:	468b      	mov	fp, r1
 80155ae:	f7ea ffc1 	bl	8000534 <__aeabi_i2d>
 80155b2:	9a07      	ldr	r2, [sp, #28]
 80155b4:	4b32      	ldr	r3, [pc, #200]	; (8015680 <__ieee754_pow+0x778>)
 80155b6:	4413      	add	r3, r2
 80155b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80155bc:	4606      	mov	r6, r0
 80155be:	460f      	mov	r7, r1
 80155c0:	4652      	mov	r2, sl
 80155c2:	465b      	mov	r3, fp
 80155c4:	ec51 0b18 	vmov	r0, r1, d8
 80155c8:	f7ea fe68 	bl	800029c <__adddf3>
 80155cc:	4642      	mov	r2, r8
 80155ce:	464b      	mov	r3, r9
 80155d0:	f7ea fe64 	bl	800029c <__adddf3>
 80155d4:	4632      	mov	r2, r6
 80155d6:	463b      	mov	r3, r7
 80155d8:	f7ea fe60 	bl	800029c <__adddf3>
 80155dc:	2000      	movs	r0, #0
 80155de:	4632      	mov	r2, r6
 80155e0:	463b      	mov	r3, r7
 80155e2:	4604      	mov	r4, r0
 80155e4:	460d      	mov	r5, r1
 80155e6:	f7ea fe57 	bl	8000298 <__aeabi_dsub>
 80155ea:	4642      	mov	r2, r8
 80155ec:	464b      	mov	r3, r9
 80155ee:	f7ea fe53 	bl	8000298 <__aeabi_dsub>
 80155f2:	ec53 2b18 	vmov	r2, r3, d8
 80155f6:	f7ea fe4f 	bl	8000298 <__aeabi_dsub>
 80155fa:	4602      	mov	r2, r0
 80155fc:	460b      	mov	r3, r1
 80155fe:	4650      	mov	r0, sl
 8015600:	4659      	mov	r1, fp
 8015602:	e610      	b.n	8015226 <__ieee754_pow+0x31e>
 8015604:	2401      	movs	r4, #1
 8015606:	e6a1      	b.n	801534c <__ieee754_pow+0x444>
 8015608:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8015658 <__ieee754_pow+0x750>
 801560c:	e617      	b.n	801523e <__ieee754_pow+0x336>
 801560e:	bf00      	nop
 8015610:	4a454eef 	.word	0x4a454eef
 8015614:	3fca7e28 	.word	0x3fca7e28
 8015618:	93c9db65 	.word	0x93c9db65
 801561c:	3fcd864a 	.word	0x3fcd864a
 8015620:	a91d4101 	.word	0xa91d4101
 8015624:	3fd17460 	.word	0x3fd17460
 8015628:	518f264d 	.word	0x518f264d
 801562c:	3fd55555 	.word	0x3fd55555
 8015630:	db6fabff 	.word	0xdb6fabff
 8015634:	3fdb6db6 	.word	0x3fdb6db6
 8015638:	33333303 	.word	0x33333303
 801563c:	3fe33333 	.word	0x3fe33333
 8015640:	e0000000 	.word	0xe0000000
 8015644:	3feec709 	.word	0x3feec709
 8015648:	dc3a03fd 	.word	0xdc3a03fd
 801564c:	3feec709 	.word	0x3feec709
 8015650:	145b01f5 	.word	0x145b01f5
 8015654:	be3e2fe0 	.word	0xbe3e2fe0
 8015658:	00000000 	.word	0x00000000
 801565c:	3ff00000 	.word	0x3ff00000
 8015660:	7ff00000 	.word	0x7ff00000
 8015664:	43400000 	.word	0x43400000
 8015668:	0003988e 	.word	0x0003988e
 801566c:	000bb679 	.word	0x000bb679
 8015670:	080167d0 	.word	0x080167d0
 8015674:	3ff00000 	.word	0x3ff00000
 8015678:	40080000 	.word	0x40080000
 801567c:	080167f0 	.word	0x080167f0
 8015680:	080167e0 	.word	0x080167e0
 8015684:	a3b3      	add	r3, pc, #716	; (adr r3, 8015954 <__ieee754_pow+0xa4c>)
 8015686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801568a:	4640      	mov	r0, r8
 801568c:	4649      	mov	r1, r9
 801568e:	f7ea fe05 	bl	800029c <__adddf3>
 8015692:	4622      	mov	r2, r4
 8015694:	ec41 0b1a 	vmov	d10, r0, r1
 8015698:	462b      	mov	r3, r5
 801569a:	4630      	mov	r0, r6
 801569c:	4639      	mov	r1, r7
 801569e:	f7ea fdfb 	bl	8000298 <__aeabi_dsub>
 80156a2:	4602      	mov	r2, r0
 80156a4:	460b      	mov	r3, r1
 80156a6:	ec51 0b1a 	vmov	r0, r1, d10
 80156aa:	f7eb fa3d 	bl	8000b28 <__aeabi_dcmpgt>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	f47f ae04 	bne.w	80152bc <__ieee754_pow+0x3b4>
 80156b4:	4aa2      	ldr	r2, [pc, #648]	; (8015940 <__ieee754_pow+0xa38>)
 80156b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80156ba:	4293      	cmp	r3, r2
 80156bc:	f340 8107 	ble.w	80158ce <__ieee754_pow+0x9c6>
 80156c0:	151b      	asrs	r3, r3, #20
 80156c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80156c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80156ca:	fa4a fa03 	asr.w	sl, sl, r3
 80156ce:	44da      	add	sl, fp
 80156d0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80156d4:	489b      	ldr	r0, [pc, #620]	; (8015944 <__ieee754_pow+0xa3c>)
 80156d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80156da:	4108      	asrs	r0, r1
 80156dc:	ea00 030a 	and.w	r3, r0, sl
 80156e0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80156e4:	f1c1 0114 	rsb	r1, r1, #20
 80156e8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80156ec:	fa4a fa01 	asr.w	sl, sl, r1
 80156f0:	f1bb 0f00 	cmp.w	fp, #0
 80156f4:	f04f 0200 	mov.w	r2, #0
 80156f8:	4620      	mov	r0, r4
 80156fa:	4629      	mov	r1, r5
 80156fc:	bfb8      	it	lt
 80156fe:	f1ca 0a00 	rsblt	sl, sl, #0
 8015702:	f7ea fdc9 	bl	8000298 <__aeabi_dsub>
 8015706:	ec41 0b19 	vmov	d9, r0, r1
 801570a:	4642      	mov	r2, r8
 801570c:	464b      	mov	r3, r9
 801570e:	ec51 0b19 	vmov	r0, r1, d9
 8015712:	f7ea fdc3 	bl	800029c <__adddf3>
 8015716:	a37a      	add	r3, pc, #488	; (adr r3, 8015900 <__ieee754_pow+0x9f8>)
 8015718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801571c:	2000      	movs	r0, #0
 801571e:	4604      	mov	r4, r0
 8015720:	460d      	mov	r5, r1
 8015722:	f7ea ff71 	bl	8000608 <__aeabi_dmul>
 8015726:	ec53 2b19 	vmov	r2, r3, d9
 801572a:	4606      	mov	r6, r0
 801572c:	460f      	mov	r7, r1
 801572e:	4620      	mov	r0, r4
 8015730:	4629      	mov	r1, r5
 8015732:	f7ea fdb1 	bl	8000298 <__aeabi_dsub>
 8015736:	4602      	mov	r2, r0
 8015738:	460b      	mov	r3, r1
 801573a:	4640      	mov	r0, r8
 801573c:	4649      	mov	r1, r9
 801573e:	f7ea fdab 	bl	8000298 <__aeabi_dsub>
 8015742:	a371      	add	r3, pc, #452	; (adr r3, 8015908 <__ieee754_pow+0xa00>)
 8015744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015748:	f7ea ff5e 	bl	8000608 <__aeabi_dmul>
 801574c:	a370      	add	r3, pc, #448	; (adr r3, 8015910 <__ieee754_pow+0xa08>)
 801574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015752:	4680      	mov	r8, r0
 8015754:	4689      	mov	r9, r1
 8015756:	4620      	mov	r0, r4
 8015758:	4629      	mov	r1, r5
 801575a:	f7ea ff55 	bl	8000608 <__aeabi_dmul>
 801575e:	4602      	mov	r2, r0
 8015760:	460b      	mov	r3, r1
 8015762:	4640      	mov	r0, r8
 8015764:	4649      	mov	r1, r9
 8015766:	f7ea fd99 	bl	800029c <__adddf3>
 801576a:	4604      	mov	r4, r0
 801576c:	460d      	mov	r5, r1
 801576e:	4602      	mov	r2, r0
 8015770:	460b      	mov	r3, r1
 8015772:	4630      	mov	r0, r6
 8015774:	4639      	mov	r1, r7
 8015776:	f7ea fd91 	bl	800029c <__adddf3>
 801577a:	4632      	mov	r2, r6
 801577c:	463b      	mov	r3, r7
 801577e:	4680      	mov	r8, r0
 8015780:	4689      	mov	r9, r1
 8015782:	f7ea fd89 	bl	8000298 <__aeabi_dsub>
 8015786:	4602      	mov	r2, r0
 8015788:	460b      	mov	r3, r1
 801578a:	4620      	mov	r0, r4
 801578c:	4629      	mov	r1, r5
 801578e:	f7ea fd83 	bl	8000298 <__aeabi_dsub>
 8015792:	4642      	mov	r2, r8
 8015794:	4606      	mov	r6, r0
 8015796:	460f      	mov	r7, r1
 8015798:	464b      	mov	r3, r9
 801579a:	4640      	mov	r0, r8
 801579c:	4649      	mov	r1, r9
 801579e:	f7ea ff33 	bl	8000608 <__aeabi_dmul>
 80157a2:	a35d      	add	r3, pc, #372	; (adr r3, 8015918 <__ieee754_pow+0xa10>)
 80157a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157a8:	4604      	mov	r4, r0
 80157aa:	460d      	mov	r5, r1
 80157ac:	f7ea ff2c 	bl	8000608 <__aeabi_dmul>
 80157b0:	a35b      	add	r3, pc, #364	; (adr r3, 8015920 <__ieee754_pow+0xa18>)
 80157b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b6:	f7ea fd6f 	bl	8000298 <__aeabi_dsub>
 80157ba:	4622      	mov	r2, r4
 80157bc:	462b      	mov	r3, r5
 80157be:	f7ea ff23 	bl	8000608 <__aeabi_dmul>
 80157c2:	a359      	add	r3, pc, #356	; (adr r3, 8015928 <__ieee754_pow+0xa20>)
 80157c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c8:	f7ea fd68 	bl	800029c <__adddf3>
 80157cc:	4622      	mov	r2, r4
 80157ce:	462b      	mov	r3, r5
 80157d0:	f7ea ff1a 	bl	8000608 <__aeabi_dmul>
 80157d4:	a356      	add	r3, pc, #344	; (adr r3, 8015930 <__ieee754_pow+0xa28>)
 80157d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157da:	f7ea fd5d 	bl	8000298 <__aeabi_dsub>
 80157de:	4622      	mov	r2, r4
 80157e0:	462b      	mov	r3, r5
 80157e2:	f7ea ff11 	bl	8000608 <__aeabi_dmul>
 80157e6:	a354      	add	r3, pc, #336	; (adr r3, 8015938 <__ieee754_pow+0xa30>)
 80157e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ec:	f7ea fd56 	bl	800029c <__adddf3>
 80157f0:	4622      	mov	r2, r4
 80157f2:	462b      	mov	r3, r5
 80157f4:	f7ea ff08 	bl	8000608 <__aeabi_dmul>
 80157f8:	4602      	mov	r2, r0
 80157fa:	460b      	mov	r3, r1
 80157fc:	4640      	mov	r0, r8
 80157fe:	4649      	mov	r1, r9
 8015800:	f7ea fd4a 	bl	8000298 <__aeabi_dsub>
 8015804:	4604      	mov	r4, r0
 8015806:	460d      	mov	r5, r1
 8015808:	4602      	mov	r2, r0
 801580a:	460b      	mov	r3, r1
 801580c:	4640      	mov	r0, r8
 801580e:	4649      	mov	r1, r9
 8015810:	f7ea fefa 	bl	8000608 <__aeabi_dmul>
 8015814:	2200      	movs	r2, #0
 8015816:	ec41 0b19 	vmov	d9, r0, r1
 801581a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801581e:	4620      	mov	r0, r4
 8015820:	4629      	mov	r1, r5
 8015822:	f7ea fd39 	bl	8000298 <__aeabi_dsub>
 8015826:	4602      	mov	r2, r0
 8015828:	460b      	mov	r3, r1
 801582a:	ec51 0b19 	vmov	r0, r1, d9
 801582e:	f7eb f815 	bl	800085c <__aeabi_ddiv>
 8015832:	4632      	mov	r2, r6
 8015834:	4604      	mov	r4, r0
 8015836:	460d      	mov	r5, r1
 8015838:	463b      	mov	r3, r7
 801583a:	4640      	mov	r0, r8
 801583c:	4649      	mov	r1, r9
 801583e:	f7ea fee3 	bl	8000608 <__aeabi_dmul>
 8015842:	4632      	mov	r2, r6
 8015844:	463b      	mov	r3, r7
 8015846:	f7ea fd29 	bl	800029c <__adddf3>
 801584a:	4602      	mov	r2, r0
 801584c:	460b      	mov	r3, r1
 801584e:	4620      	mov	r0, r4
 8015850:	4629      	mov	r1, r5
 8015852:	f7ea fd21 	bl	8000298 <__aeabi_dsub>
 8015856:	4642      	mov	r2, r8
 8015858:	464b      	mov	r3, r9
 801585a:	f7ea fd1d 	bl	8000298 <__aeabi_dsub>
 801585e:	460b      	mov	r3, r1
 8015860:	4602      	mov	r2, r0
 8015862:	4939      	ldr	r1, [pc, #228]	; (8015948 <__ieee754_pow+0xa40>)
 8015864:	2000      	movs	r0, #0
 8015866:	f7ea fd17 	bl	8000298 <__aeabi_dsub>
 801586a:	ec41 0b10 	vmov	d0, r0, r1
 801586e:	ee10 3a90 	vmov	r3, s1
 8015872:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801587a:	da2b      	bge.n	80158d4 <__ieee754_pow+0x9cc>
 801587c:	4650      	mov	r0, sl
 801587e:	f000 f877 	bl	8015970 <scalbn>
 8015882:	ec51 0b10 	vmov	r0, r1, d0
 8015886:	ec53 2b18 	vmov	r2, r3, d8
 801588a:	f7ff bbee 	b.w	801506a <__ieee754_pow+0x162>
 801588e:	4b2f      	ldr	r3, [pc, #188]	; (801594c <__ieee754_pow+0xa44>)
 8015890:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015894:	429e      	cmp	r6, r3
 8015896:	f77f af0d 	ble.w	80156b4 <__ieee754_pow+0x7ac>
 801589a:	4b2d      	ldr	r3, [pc, #180]	; (8015950 <__ieee754_pow+0xa48>)
 801589c:	440b      	add	r3, r1
 801589e:	4303      	orrs	r3, r0
 80158a0:	d009      	beq.n	80158b6 <__ieee754_pow+0x9ae>
 80158a2:	ec51 0b18 	vmov	r0, r1, d8
 80158a6:	2200      	movs	r2, #0
 80158a8:	2300      	movs	r3, #0
 80158aa:	f7eb f91f 	bl	8000aec <__aeabi_dcmplt>
 80158ae:	3800      	subs	r0, #0
 80158b0:	bf18      	it	ne
 80158b2:	2001      	movne	r0, #1
 80158b4:	e448      	b.n	8015148 <__ieee754_pow+0x240>
 80158b6:	4622      	mov	r2, r4
 80158b8:	462b      	mov	r3, r5
 80158ba:	f7ea fced 	bl	8000298 <__aeabi_dsub>
 80158be:	4642      	mov	r2, r8
 80158c0:	464b      	mov	r3, r9
 80158c2:	f7eb f927 	bl	8000b14 <__aeabi_dcmpge>
 80158c6:	2800      	cmp	r0, #0
 80158c8:	f43f aef4 	beq.w	80156b4 <__ieee754_pow+0x7ac>
 80158cc:	e7e9      	b.n	80158a2 <__ieee754_pow+0x99a>
 80158ce:	f04f 0a00 	mov.w	sl, #0
 80158d2:	e71a      	b.n	801570a <__ieee754_pow+0x802>
 80158d4:	ec51 0b10 	vmov	r0, r1, d0
 80158d8:	4619      	mov	r1, r3
 80158da:	e7d4      	b.n	8015886 <__ieee754_pow+0x97e>
 80158dc:	491a      	ldr	r1, [pc, #104]	; (8015948 <__ieee754_pow+0xa40>)
 80158de:	2000      	movs	r0, #0
 80158e0:	f7ff bb31 	b.w	8014f46 <__ieee754_pow+0x3e>
 80158e4:	2000      	movs	r0, #0
 80158e6:	2100      	movs	r1, #0
 80158e8:	f7ff bb2d 	b.w	8014f46 <__ieee754_pow+0x3e>
 80158ec:	4630      	mov	r0, r6
 80158ee:	4639      	mov	r1, r7
 80158f0:	f7ff bb29 	b.w	8014f46 <__ieee754_pow+0x3e>
 80158f4:	9204      	str	r2, [sp, #16]
 80158f6:	f7ff bb7b 	b.w	8014ff0 <__ieee754_pow+0xe8>
 80158fa:	2300      	movs	r3, #0
 80158fc:	f7ff bb65 	b.w	8014fca <__ieee754_pow+0xc2>
 8015900:	00000000 	.word	0x00000000
 8015904:	3fe62e43 	.word	0x3fe62e43
 8015908:	fefa39ef 	.word	0xfefa39ef
 801590c:	3fe62e42 	.word	0x3fe62e42
 8015910:	0ca86c39 	.word	0x0ca86c39
 8015914:	be205c61 	.word	0xbe205c61
 8015918:	72bea4d0 	.word	0x72bea4d0
 801591c:	3e663769 	.word	0x3e663769
 8015920:	c5d26bf1 	.word	0xc5d26bf1
 8015924:	3ebbbd41 	.word	0x3ebbbd41
 8015928:	af25de2c 	.word	0xaf25de2c
 801592c:	3f11566a 	.word	0x3f11566a
 8015930:	16bebd93 	.word	0x16bebd93
 8015934:	3f66c16c 	.word	0x3f66c16c
 8015938:	5555553e 	.word	0x5555553e
 801593c:	3fc55555 	.word	0x3fc55555
 8015940:	3fe00000 	.word	0x3fe00000
 8015944:	fff00000 	.word	0xfff00000
 8015948:	3ff00000 	.word	0x3ff00000
 801594c:	4090cbff 	.word	0x4090cbff
 8015950:	3f6f3400 	.word	0x3f6f3400
 8015954:	652b82fe 	.word	0x652b82fe
 8015958:	3c971547 	.word	0x3c971547

0801595c <fabs>:
 801595c:	ec51 0b10 	vmov	r0, r1, d0
 8015960:	ee10 2a10 	vmov	r2, s0
 8015964:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015968:	ec43 2b10 	vmov	d0, r2, r3
 801596c:	4770      	bx	lr
	...

08015970 <scalbn>:
 8015970:	b570      	push	{r4, r5, r6, lr}
 8015972:	ec55 4b10 	vmov	r4, r5, d0
 8015976:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801597a:	4606      	mov	r6, r0
 801597c:	462b      	mov	r3, r5
 801597e:	b999      	cbnz	r1, 80159a8 <scalbn+0x38>
 8015980:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015984:	4323      	orrs	r3, r4
 8015986:	d03f      	beq.n	8015a08 <scalbn+0x98>
 8015988:	4b35      	ldr	r3, [pc, #212]	; (8015a60 <scalbn+0xf0>)
 801598a:	4629      	mov	r1, r5
 801598c:	ee10 0a10 	vmov	r0, s0
 8015990:	2200      	movs	r2, #0
 8015992:	f7ea fe39 	bl	8000608 <__aeabi_dmul>
 8015996:	4b33      	ldr	r3, [pc, #204]	; (8015a64 <scalbn+0xf4>)
 8015998:	429e      	cmp	r6, r3
 801599a:	4604      	mov	r4, r0
 801599c:	460d      	mov	r5, r1
 801599e:	da10      	bge.n	80159c2 <scalbn+0x52>
 80159a0:	a327      	add	r3, pc, #156	; (adr r3, 8015a40 <scalbn+0xd0>)
 80159a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a6:	e01f      	b.n	80159e8 <scalbn+0x78>
 80159a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80159ac:	4291      	cmp	r1, r2
 80159ae:	d10c      	bne.n	80159ca <scalbn+0x5a>
 80159b0:	ee10 2a10 	vmov	r2, s0
 80159b4:	4620      	mov	r0, r4
 80159b6:	4629      	mov	r1, r5
 80159b8:	f7ea fc70 	bl	800029c <__adddf3>
 80159bc:	4604      	mov	r4, r0
 80159be:	460d      	mov	r5, r1
 80159c0:	e022      	b.n	8015a08 <scalbn+0x98>
 80159c2:	460b      	mov	r3, r1
 80159c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80159c8:	3936      	subs	r1, #54	; 0x36
 80159ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 80159ce:	4296      	cmp	r6, r2
 80159d0:	dd0d      	ble.n	80159ee <scalbn+0x7e>
 80159d2:	2d00      	cmp	r5, #0
 80159d4:	a11c      	add	r1, pc, #112	; (adr r1, 8015a48 <scalbn+0xd8>)
 80159d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159da:	da02      	bge.n	80159e2 <scalbn+0x72>
 80159dc:	a11c      	add	r1, pc, #112	; (adr r1, 8015a50 <scalbn+0xe0>)
 80159de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159e2:	a319      	add	r3, pc, #100	; (adr r3, 8015a48 <scalbn+0xd8>)
 80159e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e8:	f7ea fe0e 	bl	8000608 <__aeabi_dmul>
 80159ec:	e7e6      	b.n	80159bc <scalbn+0x4c>
 80159ee:	1872      	adds	r2, r6, r1
 80159f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80159f4:	428a      	cmp	r2, r1
 80159f6:	dcec      	bgt.n	80159d2 <scalbn+0x62>
 80159f8:	2a00      	cmp	r2, #0
 80159fa:	dd08      	ble.n	8015a0e <scalbn+0x9e>
 80159fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015a00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015a04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015a08:	ec45 4b10 	vmov	d0, r4, r5
 8015a0c:	bd70      	pop	{r4, r5, r6, pc}
 8015a0e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015a12:	da08      	bge.n	8015a26 <scalbn+0xb6>
 8015a14:	2d00      	cmp	r5, #0
 8015a16:	a10a      	add	r1, pc, #40	; (adr r1, 8015a40 <scalbn+0xd0>)
 8015a18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a1c:	dac0      	bge.n	80159a0 <scalbn+0x30>
 8015a1e:	a10e      	add	r1, pc, #56	; (adr r1, 8015a58 <scalbn+0xe8>)
 8015a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a24:	e7bc      	b.n	80159a0 <scalbn+0x30>
 8015a26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015a2a:	3236      	adds	r2, #54	; 0x36
 8015a2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015a30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015a34:	4620      	mov	r0, r4
 8015a36:	4b0c      	ldr	r3, [pc, #48]	; (8015a68 <scalbn+0xf8>)
 8015a38:	2200      	movs	r2, #0
 8015a3a:	e7d5      	b.n	80159e8 <scalbn+0x78>
 8015a3c:	f3af 8000 	nop.w
 8015a40:	c2f8f359 	.word	0xc2f8f359
 8015a44:	01a56e1f 	.word	0x01a56e1f
 8015a48:	8800759c 	.word	0x8800759c
 8015a4c:	7e37e43c 	.word	0x7e37e43c
 8015a50:	8800759c 	.word	0x8800759c
 8015a54:	fe37e43c 	.word	0xfe37e43c
 8015a58:	c2f8f359 	.word	0xc2f8f359
 8015a5c:	81a56e1f 	.word	0x81a56e1f
 8015a60:	43500000 	.word	0x43500000
 8015a64:	ffff3cb0 	.word	0xffff3cb0
 8015a68:	3c900000 	.word	0x3c900000

08015a6c <with_errno>:
 8015a6c:	b570      	push	{r4, r5, r6, lr}
 8015a6e:	4604      	mov	r4, r0
 8015a70:	460d      	mov	r5, r1
 8015a72:	4616      	mov	r6, r2
 8015a74:	f7fb faa0 	bl	8010fb8 <__errno>
 8015a78:	4629      	mov	r1, r5
 8015a7a:	6006      	str	r6, [r0, #0]
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	bd70      	pop	{r4, r5, r6, pc}

08015a80 <xflow>:
 8015a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a82:	4614      	mov	r4, r2
 8015a84:	461d      	mov	r5, r3
 8015a86:	b108      	cbz	r0, 8015a8c <xflow+0xc>
 8015a88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015a8c:	e9cd 2300 	strd	r2, r3, [sp]
 8015a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a94:	4620      	mov	r0, r4
 8015a96:	4629      	mov	r1, r5
 8015a98:	f7ea fdb6 	bl	8000608 <__aeabi_dmul>
 8015a9c:	2222      	movs	r2, #34	; 0x22
 8015a9e:	b003      	add	sp, #12
 8015aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015aa4:	f7ff bfe2 	b.w	8015a6c <with_errno>

08015aa8 <__math_uflow>:
 8015aa8:	b508      	push	{r3, lr}
 8015aaa:	2200      	movs	r2, #0
 8015aac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015ab0:	f7ff ffe6 	bl	8015a80 <xflow>
 8015ab4:	ec41 0b10 	vmov	d0, r0, r1
 8015ab8:	bd08      	pop	{r3, pc}

08015aba <__math_oflow>:
 8015aba:	b508      	push	{r3, lr}
 8015abc:	2200      	movs	r2, #0
 8015abe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8015ac2:	f7ff ffdd 	bl	8015a80 <xflow>
 8015ac6:	ec41 0b10 	vmov	d0, r0, r1
 8015aca:	bd08      	pop	{r3, pc}

08015acc <__ieee754_sqrt>:
 8015acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad0:	ec55 4b10 	vmov	r4, r5, d0
 8015ad4:	4e67      	ldr	r6, [pc, #412]	; (8015c74 <__ieee754_sqrt+0x1a8>)
 8015ad6:	43ae      	bics	r6, r5
 8015ad8:	ee10 0a10 	vmov	r0, s0
 8015adc:	ee10 2a10 	vmov	r2, s0
 8015ae0:	4629      	mov	r1, r5
 8015ae2:	462b      	mov	r3, r5
 8015ae4:	d10d      	bne.n	8015b02 <__ieee754_sqrt+0x36>
 8015ae6:	f7ea fd8f 	bl	8000608 <__aeabi_dmul>
 8015aea:	4602      	mov	r2, r0
 8015aec:	460b      	mov	r3, r1
 8015aee:	4620      	mov	r0, r4
 8015af0:	4629      	mov	r1, r5
 8015af2:	f7ea fbd3 	bl	800029c <__adddf3>
 8015af6:	4604      	mov	r4, r0
 8015af8:	460d      	mov	r5, r1
 8015afa:	ec45 4b10 	vmov	d0, r4, r5
 8015afe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b02:	2d00      	cmp	r5, #0
 8015b04:	dc0b      	bgt.n	8015b1e <__ieee754_sqrt+0x52>
 8015b06:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015b0a:	4326      	orrs	r6, r4
 8015b0c:	d0f5      	beq.n	8015afa <__ieee754_sqrt+0x2e>
 8015b0e:	b135      	cbz	r5, 8015b1e <__ieee754_sqrt+0x52>
 8015b10:	f7ea fbc2 	bl	8000298 <__aeabi_dsub>
 8015b14:	4602      	mov	r2, r0
 8015b16:	460b      	mov	r3, r1
 8015b18:	f7ea fea0 	bl	800085c <__aeabi_ddiv>
 8015b1c:	e7eb      	b.n	8015af6 <__ieee754_sqrt+0x2a>
 8015b1e:	1509      	asrs	r1, r1, #20
 8015b20:	f000 808d 	beq.w	8015c3e <__ieee754_sqrt+0x172>
 8015b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015b28:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8015b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b30:	07c9      	lsls	r1, r1, #31
 8015b32:	bf5c      	itt	pl
 8015b34:	005b      	lslpl	r3, r3, #1
 8015b36:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8015b3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015b3e:	bf58      	it	pl
 8015b40:	0052      	lslpl	r2, r2, #1
 8015b42:	2500      	movs	r5, #0
 8015b44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015b48:	1076      	asrs	r6, r6, #1
 8015b4a:	0052      	lsls	r2, r2, #1
 8015b4c:	f04f 0e16 	mov.w	lr, #22
 8015b50:	46ac      	mov	ip, r5
 8015b52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015b56:	eb0c 0001 	add.w	r0, ip, r1
 8015b5a:	4298      	cmp	r0, r3
 8015b5c:	bfde      	ittt	le
 8015b5e:	1a1b      	suble	r3, r3, r0
 8015b60:	eb00 0c01 	addle.w	ip, r0, r1
 8015b64:	186d      	addle	r5, r5, r1
 8015b66:	005b      	lsls	r3, r3, #1
 8015b68:	f1be 0e01 	subs.w	lr, lr, #1
 8015b6c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015b70:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015b74:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015b78:	d1ed      	bne.n	8015b56 <__ieee754_sqrt+0x8a>
 8015b7a:	4674      	mov	r4, lr
 8015b7c:	2720      	movs	r7, #32
 8015b7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015b82:	4563      	cmp	r3, ip
 8015b84:	eb01 000e 	add.w	r0, r1, lr
 8015b88:	dc02      	bgt.n	8015b90 <__ieee754_sqrt+0xc4>
 8015b8a:	d113      	bne.n	8015bb4 <__ieee754_sqrt+0xe8>
 8015b8c:	4290      	cmp	r0, r2
 8015b8e:	d811      	bhi.n	8015bb4 <__ieee754_sqrt+0xe8>
 8015b90:	2800      	cmp	r0, #0
 8015b92:	eb00 0e01 	add.w	lr, r0, r1
 8015b96:	da57      	bge.n	8015c48 <__ieee754_sqrt+0x17c>
 8015b98:	f1be 0f00 	cmp.w	lr, #0
 8015b9c:	db54      	blt.n	8015c48 <__ieee754_sqrt+0x17c>
 8015b9e:	f10c 0801 	add.w	r8, ip, #1
 8015ba2:	eba3 030c 	sub.w	r3, r3, ip
 8015ba6:	4290      	cmp	r0, r2
 8015ba8:	bf88      	it	hi
 8015baa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8015bae:	1a12      	subs	r2, r2, r0
 8015bb0:	440c      	add	r4, r1
 8015bb2:	46c4      	mov	ip, r8
 8015bb4:	005b      	lsls	r3, r3, #1
 8015bb6:	3f01      	subs	r7, #1
 8015bb8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015bbc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015bc0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015bc4:	d1dd      	bne.n	8015b82 <__ieee754_sqrt+0xb6>
 8015bc6:	4313      	orrs	r3, r2
 8015bc8:	d01b      	beq.n	8015c02 <__ieee754_sqrt+0x136>
 8015bca:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8015c78 <__ieee754_sqrt+0x1ac>
 8015bce:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8015c7c <__ieee754_sqrt+0x1b0>
 8015bd2:	e9da 0100 	ldrd	r0, r1, [sl]
 8015bd6:	e9db 2300 	ldrd	r2, r3, [fp]
 8015bda:	f7ea fb5d 	bl	8000298 <__aeabi_dsub>
 8015bde:	e9da 8900 	ldrd	r8, r9, [sl]
 8015be2:	4602      	mov	r2, r0
 8015be4:	460b      	mov	r3, r1
 8015be6:	4640      	mov	r0, r8
 8015be8:	4649      	mov	r1, r9
 8015bea:	f7ea ff89 	bl	8000b00 <__aeabi_dcmple>
 8015bee:	b140      	cbz	r0, 8015c02 <__ieee754_sqrt+0x136>
 8015bf0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015bf4:	e9da 0100 	ldrd	r0, r1, [sl]
 8015bf8:	e9db 2300 	ldrd	r2, r3, [fp]
 8015bfc:	d126      	bne.n	8015c4c <__ieee754_sqrt+0x180>
 8015bfe:	3501      	adds	r5, #1
 8015c00:	463c      	mov	r4, r7
 8015c02:	106a      	asrs	r2, r5, #1
 8015c04:	0863      	lsrs	r3, r4, #1
 8015c06:	07e9      	lsls	r1, r5, #31
 8015c08:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015c0c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015c10:	bf48      	it	mi
 8015c12:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015c16:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8015c1a:	461c      	mov	r4, r3
 8015c1c:	e76d      	b.n	8015afa <__ieee754_sqrt+0x2e>
 8015c1e:	0ad3      	lsrs	r3, r2, #11
 8015c20:	3815      	subs	r0, #21
 8015c22:	0552      	lsls	r2, r2, #21
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d0fa      	beq.n	8015c1e <__ieee754_sqrt+0x152>
 8015c28:	02dc      	lsls	r4, r3, #11
 8015c2a:	d50a      	bpl.n	8015c42 <__ieee754_sqrt+0x176>
 8015c2c:	f1c1 0420 	rsb	r4, r1, #32
 8015c30:	fa22 f404 	lsr.w	r4, r2, r4
 8015c34:	1e4d      	subs	r5, r1, #1
 8015c36:	408a      	lsls	r2, r1
 8015c38:	4323      	orrs	r3, r4
 8015c3a:	1b41      	subs	r1, r0, r5
 8015c3c:	e772      	b.n	8015b24 <__ieee754_sqrt+0x58>
 8015c3e:	4608      	mov	r0, r1
 8015c40:	e7f0      	b.n	8015c24 <__ieee754_sqrt+0x158>
 8015c42:	005b      	lsls	r3, r3, #1
 8015c44:	3101      	adds	r1, #1
 8015c46:	e7ef      	b.n	8015c28 <__ieee754_sqrt+0x15c>
 8015c48:	46e0      	mov	r8, ip
 8015c4a:	e7aa      	b.n	8015ba2 <__ieee754_sqrt+0xd6>
 8015c4c:	f7ea fb26 	bl	800029c <__adddf3>
 8015c50:	e9da 8900 	ldrd	r8, r9, [sl]
 8015c54:	4602      	mov	r2, r0
 8015c56:	460b      	mov	r3, r1
 8015c58:	4640      	mov	r0, r8
 8015c5a:	4649      	mov	r1, r9
 8015c5c:	f7ea ff46 	bl	8000aec <__aeabi_dcmplt>
 8015c60:	b120      	cbz	r0, 8015c6c <__ieee754_sqrt+0x1a0>
 8015c62:	1ca0      	adds	r0, r4, #2
 8015c64:	bf08      	it	eq
 8015c66:	3501      	addeq	r5, #1
 8015c68:	3402      	adds	r4, #2
 8015c6a:	e7ca      	b.n	8015c02 <__ieee754_sqrt+0x136>
 8015c6c:	3401      	adds	r4, #1
 8015c6e:	f024 0401 	bic.w	r4, r4, #1
 8015c72:	e7c6      	b.n	8015c02 <__ieee754_sqrt+0x136>
 8015c74:	7ff00000 	.word	0x7ff00000
 8015c78:	200002e0 	.word	0x200002e0
 8015c7c:	200002e8 	.word	0x200002e8

08015c80 <_init>:
 8015c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c82:	bf00      	nop
 8015c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c86:	bc08      	pop	{r3}
 8015c88:	469e      	mov	lr, r3
 8015c8a:	4770      	bx	lr

08015c8c <_fini>:
 8015c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c8e:	bf00      	nop
 8015c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c92:	bc08      	pop	{r3}
 8015c94:	469e      	mov	lr, r3
 8015c96:	4770      	bx	lr
